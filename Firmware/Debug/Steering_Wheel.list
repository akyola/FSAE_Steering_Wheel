
Steering_Wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e50  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08008fd4  08008fd4  00018fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091dc  080091dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080091dc  080091dc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091dc  080091dc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091dc  080091dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080091e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ab0  200001e0  080093c4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c90  080093c4  00021c90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b527  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f0a  00000000  00000000  0003b730  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001438  00000000  00000000  0003f640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  00040a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d1b  00000000  00000000  00041cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014cd2  00000000  00000000  000659e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3b1d  00000000  00000000  0007a6b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e1d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f8  00000000  00000000  0013e250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08008fbc 	.word	0x08008fbc

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	08008fbc 	.word	0x08008fbc

080001c4 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80001c8:	4b16      	ldr	r3, [pc, #88]	; (8000224 <MX_CAN2_Init+0x60>)
 80001ca:	4a17      	ldr	r2, [pc, #92]	; (8000228 <MX_CAN2_Init+0x64>)
 80001cc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80001ce:	4b15      	ldr	r3, [pc, #84]	; (8000224 <MX_CAN2_Init+0x60>)
 80001d0:	2210      	movs	r2, #16
 80001d2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80001d4:	4b13      	ldr	r3, [pc, #76]	; (8000224 <MX_CAN2_Init+0x60>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001da:	4b12      	ldr	r3, [pc, #72]	; (8000224 <MX_CAN2_Init+0x60>)
 80001dc:	2200      	movs	r2, #0
 80001de:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80001e0:	4b10      	ldr	r3, [pc, #64]	; (8000224 <MX_CAN2_Init+0x60>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80001e6:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <MX_CAN2_Init+0x60>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <MX_CAN2_Init+0x60>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80001f2:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <MX_CAN2_Init+0x60>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <MX_CAN2_Init+0x60>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80001fe:	4b09      	ldr	r3, [pc, #36]	; (8000224 <MX_CAN2_Init+0x60>)
 8000200:	2200      	movs	r2, #0
 8000202:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <MX_CAN2_Init+0x60>)
 8000206:	2200      	movs	r2, #0
 8000208:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800020a:	4b06      	ldr	r3, [pc, #24]	; (8000224 <MX_CAN2_Init+0x60>)
 800020c:	2200      	movs	r2, #0
 800020e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <MX_CAN2_Init+0x60>)
 8000212:	f002 f8a1 	bl	8002358 <HAL_CAN_Init>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 800021c:	f001 fa84 	bl	8001728 <Error_Handler>
  }

}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}
 8000224:	200002ec 	.word	0x200002ec
 8000228:	40006800 	.word	0x40006800

0800022c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b08a      	sub	sp, #40	; 0x28
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a20      	ldr	r2, [pc, #128]	; (80002cc <HAL_CAN_MspInit+0xa0>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d13a      	bne.n	80002c4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800024e:	2300      	movs	r3, #0
 8000250:	613b      	str	r3, [r7, #16]
 8000252:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <HAL_CAN_MspInit+0xa4>)
 8000254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000256:	4a1e      	ldr	r2, [pc, #120]	; (80002d0 <HAL_CAN_MspInit+0xa4>)
 8000258:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800025c:	6413      	str	r3, [r2, #64]	; 0x40
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <HAL_CAN_MspInit+0xa4>)
 8000260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000262:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000266:	613b      	str	r3, [r7, #16]
 8000268:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <HAL_CAN_MspInit+0xa4>)
 8000270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000272:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <HAL_CAN_MspInit+0xa4>)
 8000274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000278:	6413      	str	r3, [r2, #64]	; 0x40
 800027a:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <HAL_CAN_MspInit+0xa4>)
 800027c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800027e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <HAL_CAN_MspInit+0xa4>)
 800028c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028e:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <HAL_CAN_MspInit+0xa4>)
 8000290:	f043 0302 	orr.w	r3, r3, #2
 8000294:	6313      	str	r3, [r2, #48]	; 0x30
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <HAL_CAN_MspInit+0xa4>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	f003 0302 	and.w	r3, r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80002a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80002a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002a8:	2302      	movs	r3, #2
 80002aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ac:	2300      	movs	r3, #0
 80002ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002b0:	2303      	movs	r3, #3
 80002b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80002b4:	2309      	movs	r3, #9
 80002b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	4619      	mov	r1, r3
 80002be:	4805      	ldr	r0, [pc, #20]	; (80002d4 <HAL_CAN_MspInit+0xa8>)
 80002c0:	f002 fba2 	bl	8002a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80002c4:	bf00      	nop
 80002c6:	3728      	adds	r7, #40	; 0x28
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40006800 	.word	0x40006800
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020400 	.word	0x40020400

080002d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002dc:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <__NVIC_GetPriorityGrouping+0x18>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	0a1b      	lsrs	r3, r3, #8
 80002e2:	f003 0307 	and.w	r3, r3, #7
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	2b00      	cmp	r3, #0
 8000304:	db0b      	blt.n	800031e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	f003 021f 	and.w	r2, r3, #31
 800030c:	4906      	ldr	r1, [pc, #24]	; (8000328 <__NVIC_EnableIRQ+0x34>)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	095b      	lsrs	r3, r3, #5
 8000314:	2001      	movs	r0, #1
 8000316:	fa00 f202 	lsl.w	r2, r0, r2
 800031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	e000e100 	.word	0xe000e100

0800032c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	6039      	str	r1, [r7, #0]
 8000336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033c:	2b00      	cmp	r3, #0
 800033e:	db0a      	blt.n	8000356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	b2da      	uxtb	r2, r3
 8000344:	490c      	ldr	r1, [pc, #48]	; (8000378 <__NVIC_SetPriority+0x4c>)
 8000346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034a:	0112      	lsls	r2, r2, #4
 800034c:	b2d2      	uxtb	r2, r2
 800034e:	440b      	add	r3, r1
 8000350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000354:	e00a      	b.n	800036c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	b2da      	uxtb	r2, r3
 800035a:	4908      	ldr	r1, [pc, #32]	; (800037c <__NVIC_SetPriority+0x50>)
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	f003 030f 	and.w	r3, r3, #15
 8000362:	3b04      	subs	r3, #4
 8000364:	0112      	lsls	r2, r2, #4
 8000366:	b2d2      	uxtb	r2, r2
 8000368:	440b      	add	r3, r1
 800036a:	761a      	strb	r2, [r3, #24]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	e000e100 	.word	0xe000e100
 800037c:	e000ed00 	.word	0xe000ed00

08000380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000380:	b480      	push	{r7}
 8000382:	b089      	sub	sp, #36	; 0x24
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f003 0307 	and.w	r3, r3, #7
 8000392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000394:	69fb      	ldr	r3, [r7, #28]
 8000396:	f1c3 0307 	rsb	r3, r3, #7
 800039a:	2b04      	cmp	r3, #4
 800039c:	bf28      	it	cs
 800039e:	2304      	movcs	r3, #4
 80003a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a2:	69fb      	ldr	r3, [r7, #28]
 80003a4:	3304      	adds	r3, #4
 80003a6:	2b06      	cmp	r3, #6
 80003a8:	d902      	bls.n	80003b0 <NVIC_EncodePriority+0x30>
 80003aa:	69fb      	ldr	r3, [r7, #28]
 80003ac:	3b03      	subs	r3, #3
 80003ae:	e000      	b.n	80003b2 <NVIC_EncodePriority+0x32>
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b4:	f04f 32ff 	mov.w	r2, #4294967295
 80003b8:	69bb      	ldr	r3, [r7, #24]
 80003ba:	fa02 f303 	lsl.w	r3, r2, r3
 80003be:	43da      	mvns	r2, r3
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	401a      	ands	r2, r3
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003c8:	f04f 31ff 	mov.w	r1, #4294967295
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	fa01 f303 	lsl.w	r3, r1, r3
 80003d2:	43d9      	mvns	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d8:	4313      	orrs	r3, r2
         );
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3724      	adds	r7, #36	; 0x24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003f0:	4907      	ldr	r1, [pc, #28]	; (8000410 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4013      	ands	r3, r2
 8000400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40023800 	.word	0x40023800

08000414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000418:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800041c:	f7ff ffe2 	bl	80003e4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000420:	f7ff ff5a 	bl	80002d8 <__NVIC_GetPriorityGrouping>
 8000424:	4603      	mov	r3, r0
 8000426:	2200      	movs	r2, #0
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ffa8 	bl	8000380 <NVIC_EncodePriority>
 8000430:	4603      	mov	r3, r0
 8000432:	4619      	mov	r1, r3
 8000434:	2011      	movs	r0, #17
 8000436:	f7ff ff79 	bl	800032c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800043a:	2011      	movs	r0, #17
 800043c:	f7ff ff5a 	bl	80002f4 <__NVIC_EnableIRQ>

}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800045a:	2300      	movs	r3, #0
 800045c:	613b      	str	r3, [r7, #16]
 800045e:	4b77      	ldr	r3, [pc, #476]	; (800063c <MX_GPIO_Init+0x1f8>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a76      	ldr	r2, [pc, #472]	; (800063c <MX_GPIO_Init+0x1f8>)
 8000464:	f043 0310 	orr.w	r3, r3, #16
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
 800046a:	4b74      	ldr	r3, [pc, #464]	; (800063c <MX_GPIO_Init+0x1f8>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	f003 0310 	and.w	r3, r3, #16
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	2300      	movs	r3, #0
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	4b70      	ldr	r3, [pc, #448]	; (800063c <MX_GPIO_Init+0x1f8>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	4a6f      	ldr	r2, [pc, #444]	; (800063c <MX_GPIO_Init+0x1f8>)
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	6313      	str	r3, [r2, #48]	; 0x30
 8000486:	4b6d      	ldr	r3, [pc, #436]	; (800063c <MX_GPIO_Init+0x1f8>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	f003 0304 	and.w	r3, r3, #4
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	4b69      	ldr	r3, [pc, #420]	; (800063c <MX_GPIO_Init+0x1f8>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a68      	ldr	r2, [pc, #416]	; (800063c <MX_GPIO_Init+0x1f8>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
 80004a2:	4b66      	ldr	r3, [pc, #408]	; (800063c <MX_GPIO_Init+0x1f8>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	4b62      	ldr	r3, [pc, #392]	; (800063c <MX_GPIO_Init+0x1f8>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a61      	ldr	r2, [pc, #388]	; (800063c <MX_GPIO_Init+0x1f8>)
 80004b8:	f043 0302 	orr.w	r3, r3, #2
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
 80004be:	4b5f      	ldr	r3, [pc, #380]	; (800063c <MX_GPIO_Init+0x1f8>)
 80004c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c2:	f003 0302 	and.w	r3, r3, #2
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	4b5b      	ldr	r3, [pc, #364]	; (800063c <MX_GPIO_Init+0x1f8>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a5a      	ldr	r2, [pc, #360]	; (800063c <MX_GPIO_Init+0x1f8>)
 80004d4:	f043 0308 	orr.w	r3, r3, #8
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
 80004da:	4b58      	ldr	r3, [pc, #352]	; (800063c <MX_GPIO_Init+0x1f8>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	f003 0308 	and.w	r3, r3, #8
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, test_led_Pin|down_shift_Pin|up_shift_Pin, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80004ec:	4854      	ldr	r0, [pc, #336]	; (8000640 <MX_GPIO_Init+0x1fc>)
 80004ee:	f002 fdad 	bl	800304c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED1_CS_Pin|OLED1_RST_Pin|OLED2_DC_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f248 0150 	movw	r1, #32848	; 0x8050
 80004f8:	4852      	ldr	r0, [pc, #328]	; (8000644 <MX_GPIO_Init+0x200>)
 80004fa:	f002 fda7 	bl	800304c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OLED1_DC_Pin|OLED2_RST_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8000504:	4850      	ldr	r0, [pc, #320]	; (8000648 <MX_GPIO_Init+0x204>)
 8000506:	f002 fda1 	bl	800304c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, E_Pin|D_Pin|C_Pin|DP_Pin
 800050a:	2200      	movs	r2, #0
 800050c:	f64f 7101 	movw	r1, #65281	; 0xff01
 8000510:	484e      	ldr	r0, [pc, #312]	; (800064c <MX_GPIO_Init+0x208>)
 8000512:	f002 fd9b 	bl	800304c <HAL_GPIO_WritePin>
                          |B_Pin|A_Pin|F_Pin|G_Pin
                          |OELD2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = test_led_Pin;
 8000516:	2304      	movs	r3, #4
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	2301      	movs	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(test_led_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	4844      	ldr	r0, [pc, #272]	; (8000640 <MX_GPIO_Init+0x1fc>)
 800052e:	f002 fa6b 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = down_shift_nc_Pin|up_shift_nc_Pin;
 8000532:	f242 0308 	movw	r3, #8200	; 0x2008
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4619      	mov	r1, r3
 8000546:	483e      	ldr	r0, [pc, #248]	; (8000640 <MX_GPIO_Init+0x1fc>)
 8000548:	f002 fa5e 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = down_shift_no_Pin|up_shift_no_Pin;
 800054c:	f241 0310 	movw	r3, #4112	; 0x1010
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000552:	4b3f      	ldr	r3, [pc, #252]	; (8000650 <MX_GPIO_Init+0x20c>)
 8000554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4619      	mov	r1, r3
 8000560:	4837      	ldr	r0, [pc, #220]	; (8000640 <MX_GPIO_Init+0x1fc>)
 8000562:	f002 fa51 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = neutral_sens_Pin;
 8000566:	2304      	movs	r3, #4
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800056e:	2301      	movs	r3, #1
 8000570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(neutral_sens_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	4833      	ldr	r0, [pc, #204]	; (8000648 <MX_GPIO_Init+0x204>)
 800057a:	f002 fa45 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OLED1_CS_Pin|OLED1_RST_Pin|OLED2_DC_Pin;
 800057e:	f248 0350 	movw	r3, #32848	; 0x8050
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4619      	mov	r1, r3
 8000596:	482b      	ldr	r0, [pc, #172]	; (8000644 <MX_GPIO_Init+0x200>)
 8000598:	f002 fa36 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OLED1_DC_Pin|OLED2_RST_Pin;
 800059c:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	4824      	ldr	r0, [pc, #144]	; (8000648 <MX_GPIO_Init+0x204>)
 80005b6:	f002 fa27 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = down_shift_Pin;
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(down_shift_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	481b      	ldr	r0, [pc, #108]	; (8000640 <MX_GPIO_Init+0x1fc>)
 80005d2:	f002 fa19 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = up_shift_Pin;
 80005d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(up_shift_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	4814      	ldr	r0, [pc, #80]	; (8000640 <MX_GPIO_Init+0x1fc>)
 80005f0:	f002 fa0a 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = E_Pin|D_Pin|C_Pin|DP_Pin
 80005f4:	f64f 7301 	movw	r3, #65281	; 0xff01
 80005f8:	617b      	str	r3, [r7, #20]
                          |B_Pin|A_Pin|F_Pin|G_Pin
                          |OELD2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	480f      	ldr	r0, [pc, #60]	; (800064c <MX_GPIO_Init+0x208>)
 800060e:	f002 f9fb 	bl	8002a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	200a      	movs	r0, #10
 8000618:	f002 f9a6 	bl	8002968 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800061c:	200a      	movs	r0, #10
 800061e:	f002 f9cf 	bl	80029c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2028      	movs	r0, #40	; 0x28
 8000628:	f002 f99e 	bl	8002968 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800062c:	2028      	movs	r0, #40	; 0x28
 800062e:	f002 f9c7 	bl	80029c0 <HAL_NVIC_EnableIRQ>

}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	; 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40021000 	.word	0x40021000
 8000644:	40020000 	.word	0x40020000
 8000648:	40020800 	.word	0x40020800
 800064c:	40020c00 	.word	0x40020c00
 8000650:	10110000 	.word	0x10110000

08000654 <__NVIC_GetPriorityGrouping>:
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4906      	ldr	r1, [pc, #24]	; (80006a4 <__NVIC_EnableIRQ+0x34>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800076a:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <LL_DMA_EnableStream+0x38>)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4907      	ldr	r1, [pc, #28]	; (8000798 <LL_DMA_EnableStream+0x38>)
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	440a      	add	r2, r1
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	4611      	mov	r1, r2
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	440a      	add	r2, r1
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6013      	str	r3, [r2, #0]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	080091ac 	.word	0x080091ac

0800079c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <LL_DMA_DisableStream+0x38>)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4413      	add	r3, r2
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4907      	ldr	r1, [pc, #28]	; (80007d4 <LL_DMA_DisableStream+0x38>)
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	440a      	add	r2, r1
 80007bc:	7812      	ldrb	r2, [r2, #0]
 80007be:	4611      	mov	r1, r2
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	440a      	add	r2, r1
 80007c4:	f023 0301 	bic.w	r3, r3, #1
 80007c8:	6013      	str	r3, [r2, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	080091ac 	.word	0x080091ac

080007d8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80007e4:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <LL_DMA_SetDataTransferDirection+0x40>)
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	4413      	add	r3, r2
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80007f8:	4907      	ldr	r1, [pc, #28]	; (8000818 <LL_DMA_SetDataTransferDirection+0x40>)
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	440b      	add	r3, r1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	440b      	add	r3, r1
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	600b      	str	r3, [r1, #0]
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	080091ac 	.word	0x080091ac

0800081c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <LL_DMA_SetMode+0x40>)
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4413      	add	r3, r2
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800083c:	4907      	ldr	r1, [pc, #28]	; (800085c <LL_DMA_SetMode+0x40>)
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	440b      	add	r3, r1
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	440b      	add	r3, r1
 800084a:	4619      	mov	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4313      	orrs	r3, r2
 8000850:	600b      	str	r3, [r1, #0]
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	080091ac 	.word	0x080091ac

08000860 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <LL_DMA_SetPeriphIncMode+0x40>)
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4413      	add	r3, r2
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000880:	4907      	ldr	r1, [pc, #28]	; (80008a0 <LL_DMA_SetPeriphIncMode+0x40>)
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	440b      	add	r3, r1
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	440b      	add	r3, r1
 800088e:	4619      	mov	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4313      	orrs	r3, r2
 8000894:	600b      	str	r3, [r1, #0]
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	080091ac 	.word	0x080091ac

080008a4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <LL_DMA_SetMemoryIncMode+0x40>)
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	4413      	add	r3, r2
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80008c4:	4907      	ldr	r1, [pc, #28]	; (80008e4 <LL_DMA_SetMemoryIncMode+0x40>)
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	440b      	add	r3, r1
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	440b      	add	r3, r1
 80008d2:	4619      	mov	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	600b      	str	r3, [r1, #0]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	080091ac 	.word	0x080091ac

080008e8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80008f4:	4a0c      	ldr	r2, [pc, #48]	; (8000928 <LL_DMA_SetPeriphSize+0x40>)
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4413      	add	r3, r2
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <LL_DMA_SetPeriphSize+0x40>)
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	440b      	add	r3, r1
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	440b      	add	r3, r1
 8000916:	4619      	mov	r1, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4313      	orrs	r3, r2
 800091c:	600b      	str	r3, [r1, #0]
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	080091ac 	.word	0x080091ac

0800092c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000938:	4a0c      	ldr	r2, [pc, #48]	; (800096c <LL_DMA_SetMemorySize+0x40>)
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	4413      	add	r3, r2
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4413      	add	r3, r2
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <LL_DMA_SetMemorySize+0x40>)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	440b      	add	r3, r1
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	440b      	add	r3, r1
 800095a:	4619      	mov	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4313      	orrs	r3, r2
 8000960:	600b      	str	r3, [r1, #0]
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	080091ac 	.word	0x080091ac

08000970 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800097c:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <LL_DMA_SetStreamPriorityLevel+0x40>)
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4413      	add	r3, r2
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000990:	4907      	ldr	r1, [pc, #28]	; (80009b0 <LL_DMA_SetStreamPriorityLevel+0x40>)
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	440b      	add	r3, r1
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	440b      	add	r3, r1
 800099e:	4619      	mov	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	600b      	str	r3, [r1, #0]
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	080091ac 	.word	0x080091ac

080009b4 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80009c0:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <LL_DMA_SetDataLength+0x40>)
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	4413      	add	r3, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	0c1b      	lsrs	r3, r3, #16
 80009d2:	041b      	lsls	r3, r3, #16
 80009d4:	4907      	ldr	r1, [pc, #28]	; (80009f4 <LL_DMA_SetDataLength+0x40>)
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	440a      	add	r2, r1
 80009da:	7812      	ldrb	r2, [r2, #0]
 80009dc:	4611      	mov	r1, r2
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	440a      	add	r2, r1
 80009e2:	4611      	mov	r1, r2
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	604b      	str	r3, [r1, #4]
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	080091ac 	.word	0x080091ac

080009f8 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000a04:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <LL_DMA_SetChannelSelection+0x40>)
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4413      	add	r3, r2
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000a18:	4907      	ldr	r1, [pc, #28]	; (8000a38 <LL_DMA_SetChannelSelection+0x40>)
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	440b      	add	r3, r1
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	440b      	add	r3, r1
 8000a26:	4619      	mov	r1, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	600b      	str	r3, [r1, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	080091ac 	.word	0x080091ac

08000a3c <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LL_DMA_DisableFifoMode+0x38>)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4413      	add	r3, r2
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4907      	ldr	r1, [pc, #28]	; (8000a74 <LL_DMA_DisableFifoMode+0x38>)
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	440a      	add	r2, r1
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	440a      	add	r2, r1
 8000a64:	f023 0304 	bic.w	r3, r3, #4
 8000a68:	6153      	str	r3, [r2, #20]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	080091ac 	.word	0x080091ac

08000a78 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <LL_DMA_SetMemoryAddress+0x2c>)
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4413      	add	r3, r2
 8000a92:	461a      	mov	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	080091ac 	.word	0x080091ac

08000aa8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <LL_DMA_SetPeriphAddress+0x2c>)
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	4413      	add	r3, r2
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6093      	str	r3, [r2, #8]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	080091ac 	.word	0x080091ac

08000ad8 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll HISR  HTIF6    LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF6)==(DMA_HISR_HTIF6));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000aec:	bf0c      	ite	eq
 8000aee:	2301      	moveq	r3, #1
 8000af0:	2300      	movne	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll HISR  TCIF6    LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b12:	bf0c      	ite	eq
 8000b14:	2301      	moveq	r3, #1
 8000b16:	2300      	movne	r3, #0
 8000b18:	b2db      	uxtb	r3, r3
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll HIFCR  CHTIF6    LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b32:	60da      	str	r2, [r3, #12]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b4c:	60da      	str	r2, [r3, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <LL_DMA_EnableIT_HT+0x38>)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4907      	ldr	r1, [pc, #28]	; (8000b90 <LL_DMA_EnableIT_HT+0x38>)
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	440a      	add	r2, r1
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	440a      	add	r2, r1
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6013      	str	r3, [r2, #0]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	080091ac 	.word	0x080091ac

08000b94 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <LL_DMA_EnableIT_TC+0x38>)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4907      	ldr	r1, [pc, #28]	; (8000bcc <LL_DMA_EnableIT_TC+0x38>)
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	440a      	add	r2, r1
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	440a      	add	r2, r1
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6013      	str	r3, [r2, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	080091ac 	.word	0x080091ac

08000bd0 <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LL_DMA_DisableIT_HT+0x38>)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4907      	ldr	r1, [pc, #28]	; (8000c08 <LL_DMA_DisableIT_HT+0x38>)
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	440a      	add	r2, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	440a      	add	r2, r1
 8000bf8:	f023 0308 	bic.w	r3, r3, #8
 8000bfc:	6013      	str	r3, [r2, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	080091ac 	.word	0x080091ac

08000c0c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <LL_RCC_HSI_Enable+0x18>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <LL_RCC_HSI_Enable+0x18>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40023800 	.word	0x40023800

08000c28 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <LL_RCC_HSI_IsReady+0x20>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	bf0c      	ite	eq
 8000c38:	2301      	moveq	r3, #1
 8000c3a:	2300      	movne	r3, #0
 8000c3c:	b2db      	uxtb	r3, r3
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	4903      	ldr	r1, [pc, #12]	; (8000c70 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000c62:	4313      	orrs	r3, r2
 8000c64:	600b      	str	r3, [r1, #0]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40023800 	.word	0x40023800

08000c74 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <LL_RCC_SetSysClkSource+0x24>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f023 0203 	bic.w	r2, r3, #3
 8000c84:	4904      	ldr	r1, [pc, #16]	; (8000c98 <LL_RCC_SetSysClkSource+0x24>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <LL_RCC_GetSysClkSource+0x14>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 030c 	and.w	r3, r3, #12
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cc4:	4904      	ldr	r1, [pc, #16]	; (8000cd8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	608b      	str	r3, [r1, #8]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	608b      	str	r3, [r1, #8]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d14:	4904      	ldr	r1, [pc, #16]	; (8000d28 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	608b      	str	r3, [r1, #8]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <LL_RCC_PLL_Enable+0x18>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <LL_RCC_PLL_Enable+0x18>)
 8000d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	40023800 	.word	0x40023800

08000d48 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <LL_RCC_PLL_IsReady+0x20>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000d58:	bf0c      	ite	eq
 8000d5a:	2301      	moveq	r3, #1
 8000d5c:	2300      	movne	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	40023800 	.word	0x40023800

08000d6c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	68f9      	ldr	r1, [r7, #12]
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	4311      	orrs	r1, r2
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	0192      	lsls	r2, r2, #6
 8000d8c:	4311      	orrs	r1, r2
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	4904      	ldr	r1, [pc, #16]	; (8000da4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLP);
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	ffbc8000 	.word	0xffbc8000

08000dac <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	68f9      	ldr	r1, [r7, #12]
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	4311      	orrs	r1, r2
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	0192      	lsls	r2, r2, #6
 8000dcc:	4311      	orrs	r1, r2
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	4904      	ldr	r1, [pc, #16]	; (8000de4 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800
 8000de8:	f0bf8000 	.word	0xf0bf8000

08000dec <LL_AHB1_GRP1_EnableClock>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df8:	4907      	ldr	r1, [pc, #28]	; (8000e18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4013      	ands	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4013      	ands	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <LL_FLASH_SetLatency+0x24>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f023 020f 	bic.w	r2, r3, #15
 8000e5c:	4904      	ldr	r1, [pc, #16]	; (8000e70 <LL_FLASH_SetLatency+0x24>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	600b      	str	r3, [r1, #0]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_5
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <LL_FLASH_GetLatency+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 030f 	and.w	r3, r3, #15
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40023c00 	.word	0x40023c00

08000e8c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f043 0201 	orr.w	r2, r3, #1
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <LL_TIM_GetAutoReload>:
  *       whether or not a timer instance supports a 32 bits counter.
  * @param  TIMx Timer instance
  * @retval Auto-reload value
  */
__STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a1a      	ldr	r2, [r3, #32]
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	621a      	str	r2, [r3, #32]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a1a      	ldr	r2, [r3, #32]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	621a      	str	r2, [r3, #32]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
	...

08000f04 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d01c      	beq.n	8000f4e <LL_TIM_OC_DisableFast+0x4a>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d017      	beq.n	8000f4a <LL_TIM_OC_DisableFast+0x46>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2b10      	cmp	r3, #16
 8000f1e:	d012      	beq.n	8000f46 <LL_TIM_OC_DisableFast+0x42>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b40      	cmp	r3, #64	; 0x40
 8000f24:	d00d      	beq.n	8000f42 <LL_TIM_OC_DisableFast+0x3e>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f2c:	d007      	beq.n	8000f3e <LL_TIM_OC_DisableFast+0x3a>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f34:	d101      	bne.n	8000f3a <LL_TIM_OC_DisableFast+0x36>
 8000f36:	2305      	movs	r3, #5
 8000f38:	e00a      	b.n	8000f50 <LL_TIM_OC_DisableFast+0x4c>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e008      	b.n	8000f50 <LL_TIM_OC_DisableFast+0x4c>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e006      	b.n	8000f50 <LL_TIM_OC_DisableFast+0x4c>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e004      	b.n	8000f50 <LL_TIM_OC_DisableFast+0x4c>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e002      	b.n	8000f50 <LL_TIM_OC_DisableFast+0x4c>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <LL_TIM_OC_DisableFast+0x4c>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3318      	adds	r3, #24
 8000f56:	4619      	mov	r1, r3
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <LL_TIM_OC_DisableFast+0x80>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	440b      	add	r3, r1
 8000f60:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <LL_TIM_OC_DisableFast+0x84>)
 8000f6a:	5ccb      	ldrb	r3, [r1, r3]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2304      	movs	r3, #4
 8000f70:	408b      	lsls	r3, r1
 8000f72:	43db      	mvns	r3, r3
 8000f74:	401a      	ands	r2, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	601a      	str	r2, [r3, #0]

}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	080091b4 	.word	0x080091b4
 8000f88:	080091bc 	.word	0x080091bc

08000f8c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d01c      	beq.n	8000fd6 <LL_TIM_OC_EnablePreload+0x4a>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d017      	beq.n	8000fd2 <LL_TIM_OC_EnablePreload+0x46>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b10      	cmp	r3, #16
 8000fa6:	d012      	beq.n	8000fce <LL_TIM_OC_EnablePreload+0x42>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b40      	cmp	r3, #64	; 0x40
 8000fac:	d00d      	beq.n	8000fca <LL_TIM_OC_EnablePreload+0x3e>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fb4:	d007      	beq.n	8000fc6 <LL_TIM_OC_EnablePreload+0x3a>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fbc:	d101      	bne.n	8000fc2 <LL_TIM_OC_EnablePreload+0x36>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e00a      	b.n	8000fd8 <LL_TIM_OC_EnablePreload+0x4c>
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	e008      	b.n	8000fd8 <LL_TIM_OC_EnablePreload+0x4c>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	e006      	b.n	8000fd8 <LL_TIM_OC_EnablePreload+0x4c>
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e004      	b.n	8000fd8 <LL_TIM_OC_EnablePreload+0x4c>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e002      	b.n	8000fd8 <LL_TIM_OC_EnablePreload+0x4c>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <LL_TIM_OC_EnablePreload+0x4c>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3318      	adds	r3, #24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <LL_TIM_OC_EnablePreload+0x80>)
 8000fe4:	5cd3      	ldrb	r3, [r2, r3]
 8000fe6:	440b      	add	r3, r1
 8000fe8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <LL_TIM_OC_EnablePreload+0x84>)
 8000ff2:	5ccb      	ldrb	r3, [r1, r3]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	408b      	lsls	r3, r1
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	080091b4 	.word	0x080091b4
 8001010:	080091bc 	.word	0x080091bc

08001014 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	605a      	str	r2, [r3, #4]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	609a      	str	r2, [r3, #8]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <LL_TIM_EnableDMAReq_CC2>:
  * @rmtoll DIER         CC2DE         LL_TIM_EnableDMAReq_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC2(TIM_TypeDef *TIMx)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2DE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	60da      	str	r2, [r3, #12]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f001 f8d0 	bl	8002238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f81c 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109c:	f7ff f9d2 	bl	8000444 <MX_GPIO_Init>
  MX_DMA_Init();
 80010a0:	f7ff f9b8 	bl	8000414 <MX_DMA_Init>
  MX_CAN2_Init();
 80010a4:	f7ff f88e 	bl	80001c4 <MX_CAN2_Init>
  MX_SPI1_Init();
 80010a8:	f000 fb4c 	bl	8001744 <MX_SPI1_Init>
  MX_SPI3_Init();
 80010ac:	f000 fb80 	bl	80017b0 <MX_SPI3_Init>
  MX_TIM2_Init();
 80010b0:	f000 ffa0 	bl	8001ff4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80010b4:	f007 f9be 	bl	8008434 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80010b8:	f001 f854 	bl	8002164 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  size_t i;
  volatile uint32_t timeout;

  led_init();
 80010bc:	f000 f85a 	bl	8001174 <led_init>
  led_set_color_all(255, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	20ff      	movs	r0, #255	; 0xff
 80010c6:	f000 f929 	bl	800131c <led_set_color_all>
  //led_set_color(7, 0xFF, 0x00, 0x00);
  led_update(1);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 f968 	bl	80013a0 <led_update>
  while(1){}
 80010d0:	e7fe      	b.n	80010d0 <main+0x42>
	...

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 80010d8:	2003      	movs	r0, #3
 80010da:	f7ff feb7 	bl	8000e4c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80010de:	bf00      	nop
 80010e0:	f7ff fec8 	bl	8000e74 <LL_FLASH_GetLatency>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d1fa      	bne.n	80010e0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80010ea:	f7ff fd8f 	bl	8000c0c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80010ee:	bf00      	nop
 80010f0:	f7ff fd9a 	bl	8000c28 <LL_RCC_HSI_IsReady>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d1fa      	bne.n	80010f0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80010fa:	2010      	movs	r0, #16
 80010fc:	f7ff fda6 	bl	8000c4c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 192, LL_RCC_PLLP_DIV_4);
 8001100:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001104:	22c0      	movs	r2, #192	; 0xc0
 8001106:	2108      	movs	r1, #8
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fe2f 	bl	8000d6c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 192, LL_RCC_PLLQ_DIV_8);
 800110e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001112:	22c0      	movs	r2, #192	; 0xc0
 8001114:	2108      	movs	r1, #8
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fe48 	bl	8000dac <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 800111c:	f7ff fe06 	bl	8000d2c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001120:	bf00      	nop
 8001122:	f7ff fe11 	bl	8000d48 <LL_RCC_PLL_IsReady>
 8001126:	4603      	mov	r3, r0
 8001128:	2b01      	cmp	r3, #1
 800112a:	d1fa      	bne.n	8001122 <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff fdc1 	bl	8000cb4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001132:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001136:	f7ff fdd1 	bl	8000cdc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800113a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800113e:	f7ff fde1 	bl	8000d04 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001142:	2002      	movs	r0, #2
 8001144:	f7ff fd96 	bl	8000c74 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001148:	bf00      	nop
 800114a:	f7ff fda7 	bl	8000c9c <LL_RCC_GetSysClkSource>
 800114e:	4603      	mov	r3, r0
 8001150:	2b08      	cmp	r3, #8
 8001152:	d1fa      	bne.n	800114a <SystemClock_Config+0x76>
  {

  }
  LL_SetSystemCoreClock(96000000);
 8001154:	4806      	ldr	r0, [pc, #24]	; (8001170 <SystemClock_Config+0x9c>)
 8001156:	f005 fdf5 	bl	8006d44 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800115a:	2000      	movs	r0, #0
 800115c:	f001 f88e 	bl	800227c <HAL_InitTick>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001166:	f000 fadf 	bl	8001728 <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	05b8d800 	.word	0x05b8d800

08001174 <led_init>:

/* USER CODE BEGIN 4 */
void led_init(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0
    LL_TIM_InitTypeDef TIM_InitStruct;
    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct;
    LL_GPIO_InitTypeDef GPIO_InitStruct;

    /* Peripheral clock enable */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff fe4e 	bl	8000e1c <LL_APB1_GRP1_EnableClock>
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001180:	2002      	movs	r0, #2
 8001182:	f7ff fe33 	bl	8000dec <LL_AHB1_GRP1_EnableClock>
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001186:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800118a:	f7ff fe2f 	bl	8000dec <LL_AHB1_GRP1_EnableClock>

    /* TIM2 DMA Init */

    /* TIM2_CH2 Init */
    LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_3);
 800118e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001192:	2106      	movs	r1, #6
 8001194:	485d      	ldr	r0, [pc, #372]	; (800130c <led_init+0x198>)
 8001196:	f7ff fc2f 	bl	80009f8 <LL_DMA_SetChannelSelection>
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800119a:	2240      	movs	r2, #64	; 0x40
 800119c:	2106      	movs	r1, #6
 800119e:	485b      	ldr	r0, [pc, #364]	; (800130c <led_init+0x198>)
 80011a0:	f7ff fb1a 	bl	80007d8 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2106      	movs	r1, #6
 80011a8:	4858      	ldr	r0, [pc, #352]	; (800130c <led_init+0x198>)
 80011aa:	f7ff fbe1 	bl	8000970 <LL_DMA_SetStreamPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_CIRCULAR);
 80011ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b2:	2106      	movs	r1, #6
 80011b4:	4855      	ldr	r0, [pc, #340]	; (800130c <led_init+0x198>)
 80011b6:	f7ff fb31 	bl	800081c <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2106      	movs	r1, #6
 80011be:	4853      	ldr	r0, [pc, #332]	; (800130c <led_init+0x198>)
 80011c0:	f7ff fb4e 	bl	8000860 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 80011c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c8:	2106      	movs	r1, #6
 80011ca:	4850      	ldr	r0, [pc, #320]	; (800130c <led_init+0x198>)
 80011cc:	f7ff fb6a 	bl	80008a4 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_WORD);
 80011d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d4:	2106      	movs	r1, #6
 80011d6:	484d      	ldr	r0, [pc, #308]	; (800130c <led_init+0x198>)
 80011d8:	f7ff fb86 	bl	80008e8 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_WORD);
 80011dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e0:	2106      	movs	r1, #6
 80011e2:	484a      	ldr	r0, [pc, #296]	; (800130c <led_init+0x198>)
 80011e4:	f7ff fba2 	bl	800092c <LL_DMA_SetMemorySize>
    LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 80011e8:	2106      	movs	r1, #6
 80011ea:	4848      	ldr	r0, [pc, #288]	; (800130c <led_init+0x198>)
 80011ec:	f7ff fc26 	bl	8000a3c <LL_DMA_DisableFifoMode>

    /* Added by user */
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_6, (uint32_t)&TIM2->CCR2);
 80011f0:	4a47      	ldr	r2, [pc, #284]	; (8001310 <led_init+0x19c>)
 80011f2:	2106      	movs	r1, #6
 80011f4:	4845      	ldr	r0, [pc, #276]	; (800130c <led_init+0x198>)
 80011f6:	f7ff fc57 	bl	8000aa8 <LL_DMA_SetPeriphAddress>
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_6);
 80011fa:	2106      	movs	r1, #6
 80011fc:	4843      	ldr	r0, [pc, #268]	; (800130c <led_init+0x198>)
 80011fe:	f7ff fcc9 	bl	8000b94 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(DMA1, LL_DMA_STREAM_6);
 8001202:	2106      	movs	r1, #6
 8001204:	4841      	ldr	r0, [pc, #260]	; (800130c <led_init+0x198>)
 8001206:	f7ff fca7 	bl	8000b58 <LL_DMA_EnableIT_HT>

    /* TIM2 interrupt Init */
    NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 800120a:	f7ff fa23 	bl	8000654 <__NVIC_GetPriorityGrouping>
 800120e:	4603      	mov	r3, r0
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fa71 	bl	80006fc <NVIC_EncodePriority>
 800121a:	4603      	mov	r3, r0
 800121c:	4619      	mov	r1, r3
 800121e:	201c      	movs	r0, #28
 8001220:	f7ff fa42 	bl	80006a8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8001224:	201c      	movs	r0, #28
 8001226:	f7ff fa23 	bl	8000670 <__NVIC_EnableIRQ>

    TIM_InitStruct.Prescaler = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800122e:	2300      	movs	r3, #0
 8001230:	643b      	str	r3, [r7, #64]	; 0x40
    TIM_InitStruct.Autoreload = 104;
 8001232:	2368      	movs	r3, #104	; 0x68
 8001234:	647b      	str	r3, [r7, #68]	; 0x44
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	64bb      	str	r3, [r7, #72]	; 0x48
    LL_TIM_Init(TIM2, &TIM_InitStruct);
 800123a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001244:	f003 fd04 	bl	8004c50 <LL_TIM_Init>
    LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001248:	2110      	movs	r1, #16
 800124a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800124e:	f7ff fe9d 	bl	8000f8c <LL_TIM_OC_EnablePreload>

    TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	; 0x60
 8001254:	61fb      	str	r3, [r7, #28]
    TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
    TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_OC_InitStruct.CompareValue = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	461a      	mov	r2, r3
 800126c:	2110      	movs	r1, #16
 800126e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001272:	f003 fdf5 	bl	8004e60 <LL_TIM_OC_Init>
    LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001276:	2110      	movs	r1, #16
 8001278:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800127c:	f7ff fe42 	bl	8000f04 <LL_TIM_OC_DisableFast>
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001280:	2100      	movs	r1, #0
 8001282:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001286:	f7ff fed2 	bl	800102e <LL_TIM_SetTriggerOutput>
    LL_TIM_DisableMasterSlaveMode(TIM2);
 800128a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800128e:	f7ff fee0 	bl	8001052 <LL_TIM_DisableMasterSlaveMode>

    /**
     * TIM2 GPIO Configuration
     * PB3     ------> TIM2_CH2
     */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001292:	2308      	movs	r3, #8
 8001294:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001296:	2302      	movs	r3, #2
 8001298:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	61bb      	str	r3, [r7, #24]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4819      	ldr	r0, [pc, #100]	; (8001314 <led_init+0x1a0>)
 80012b0:	f003 fb20 	bl	80048f4 <LL_GPIO_Init>

    LL_TIM_OC_SetCompareCH2(TIM2, LL_TIM_GetAutoReload(TIM2) / 20 - 1); /* Set channel 1 compare register */
 80012b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012b8:	f7ff fdf7 	bl	8000eaa <LL_TIM_GetAutoReload>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <led_init+0x1a4>)
 80012c0:	fba3 2302 	umull	r2, r3, r3, r2
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	3b01      	subs	r3, #1
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012ce:	f7ff fea1 	bl	8001014 <LL_TIM_OC_SetCompareCH2>
    LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);  /* Enable output on channel */
 80012d2:	2110      	movs	r1, #16
 80012d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012d8:	f7ff fdf2 	bl	8000ec0 <LL_TIM_CC_EnableChannel>
    LL_TIM_EnableDMAReq_CC2(TIM2);              /* Enable DMA requests on channel 1 */
 80012dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012e0:	f7ff fec6 	bl	8001070 <LL_TIM_EnableDMAReq_CC2>

    /* DMA interrupt init */
    /* DMA1_Stream6_IRQn interrupt configuration */
    NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 80012e4:	f7ff f9b6 	bl	8000654 <__NVIC_GetPriorityGrouping>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fa04 	bl	80006fc <NVIC_EncodePriority>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4619      	mov	r1, r3
 80012f8:	2011      	movs	r0, #17
 80012fa:	f7ff f9d5 	bl	80006a8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012fe:	2011      	movs	r0, #17
 8001300:	f7ff f9b6 	bl	8000670 <__NVIC_EnableIRQ>
}
 8001304:	bf00      	nop
 8001306:	3750      	adds	r7, #80	; 0x50
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40026000 	.word	0x40026000
 8001310:	40000038 	.word	0x40000038
 8001314:	40020400 	.word	0x40020400
 8001318:	cccccccd 	.word	0xcccccccd

0800131c <led_set_color_all>:
        return 1;
    }
    return 0;
}

uint8_t led_set_color_all(uint8_t r, uint8_t g, uint8_t b) {
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	460b      	mov	r3, r1
 8001328:	71bb      	strb	r3, [r7, #6]
 800132a:	4613      	mov	r3, r2
 800132c:	717b      	strb	r3, [r7, #5]
    size_t index;
    for (index = 0; index < LED_CFG_LEDS_CNT; index++) {
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	e019      	b.n	8001368 <led_set_color_all+0x4c>
        leds_colors[index * LED_CFG_BYTES_PER_LED + 0] = r;
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	490f      	ldr	r1, [pc, #60]	; (800137c <led_set_color_all+0x60>)
 800133e:	79fa      	ldrb	r2, [r7, #7]
 8001340:	54ca      	strb	r2, [r1, r3]
        leds_colors[index * LED_CFG_BYTES_PER_LED + 1] = g;
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	3301      	adds	r3, #1
 800134c:	490b      	ldr	r1, [pc, #44]	; (800137c <led_set_color_all+0x60>)
 800134e:	79ba      	ldrb	r2, [r7, #6]
 8001350:	54ca      	strb	r2, [r1, r3]
        leds_colors[index * LED_CFG_BYTES_PER_LED + 2] = b;
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	3302      	adds	r3, #2
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <led_set_color_all+0x60>)
 800135e:	797a      	ldrb	r2, [r7, #5]
 8001360:	54ca      	strb	r2, [r1, r3]
    for (index = 0; index < LED_CFG_LEDS_CNT; index++) {
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3301      	adds	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b07      	cmp	r3, #7
 800136c:	d9e2      	bls.n	8001334 <led_set_color_all+0x18>
    }
    return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200001fc 	.word	0x200001fc

08001380 <led_is_update_finished>:

/**
 * \brief           Check if update procedure is finished
 * \return          `1` if not updating, `0` if updating process is in progress
 */
uint8_t led_is_update_finished(void) {
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
    return !is_updating;                        /* Return updating flag status */
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <led_is_update_finished+0x1c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf0c      	ite	eq
 800138e:	2301      	moveq	r3, #1
 8001390:	2300      	movne	r3, #0
 8001392:	b2db      	uxtb	r3, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	200002d5 	.word	0x200002d5

080013a0 <led_update>:
/**
 * \brief           Start LEDs update procedure
 * \param[in]       block: Set to `1` to block for update process until finished
 * \return          `1` if update started, `0` otherwise
 */
uint8_t led_update(uint8_t block) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
    if (is_updating) {                          /* Check if update in progress already */
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <led_update+0x40>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <led_update+0x18>
        return 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e00f      	b.n	80013d8 <led_update+0x38>
    }
    is_updating = 1;                            /* We are now updating */
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <led_update+0x40>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]

    led_start_reset_pulse(1);                   /* Start reset pulse */
 80013be:	2001      	movs	r0, #1
 80013c0:	f000 f946 	bl	8001650 <led_start_reset_pulse>
    if (block) {
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <led_update+0x36>
        while (!led_is_update_finished());      /* Wait to finish */
 80013ca:	bf00      	nop
 80013cc:	f7ff ffd8 	bl	8001380 <led_is_update_finished>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0fa      	beq.n	80013cc <led_update+0x2c>
    }
    return 1;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200002d5 	.word	0x200002d5

080013e4 <led_fill_led_pwm_data>:
 * \brief           Prepares data from memory for PWM output for timer
 * \note            Memory is in format R,G,B, while PWM must be configured in G,R,B[,W]
 * \param[in]       ledx: LED index to set the color
 * \param[out]      ptr: Output array with at least LED_CFG_RAW_BYTES_PER_LED-words of memory
 */
static uint8_t led_fill_led_pwm_data(size_t ledx, uint32_t* ptr) {
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
    size_t i;

    if (ledx < LED_CFG_LEDS_CNT) {
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	d87d      	bhi.n	80014f0 <led_fill_led_pwm_data+0x10c>
        for (i = 0; i < 8; i++) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e075      	b.n	80014e6 <led_fill_led_pwm_data+0x102>
            ptr[i] =        (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 1] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	3301      	adds	r3, #1
 8001404:	4a3d      	ldr	r2, [pc, #244]	; (80014fc <led_fill_led_pwm_data+0x118>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	461a      	mov	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1c3 0307 	rsb	r3, r3, #7
 8001410:	fa42 f303 	asr.w	r3, r2, r3
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <led_fill_led_pwm_data+0x4a>
 800141c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4a36      	ldr	r2, [pc, #216]	; (8001500 <led_fill_led_pwm_data+0x11c>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	085b      	lsrs	r3, r3, #1
 800142c:	e006      	b.n	800143c <led_fill_led_pwm_data+0x58>
 800142e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	4a32      	ldr	r2, [pc, #200]	; (8001500 <led_fill_led_pwm_data+0x11c>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	440a      	add	r2, r1
 8001444:	6013      	str	r3, [r2, #0]
            ptr[8 + i] =    (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 0] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	4a2b      	ldr	r2, [pc, #172]	; (80014fc <led_fill_led_pwm_data+0x118>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	fa42 f303 	asr.w	r3, r2, r3
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d008      	beq.n	8001478 <led_fill_led_pwm_data+0x94>
 8001466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4a24      	ldr	r2, [pc, #144]	; (8001500 <led_fill_led_pwm_data+0x11c>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	e006      	b.n	8001486 <led_fill_led_pwm_data+0xa2>
 8001478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	4a20      	ldr	r2, [pc, #128]	; (8001500 <led_fill_led_pwm_data+0x11c>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	3208      	adds	r2, #8
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	6839      	ldr	r1, [r7, #0]
 800148e:	440a      	add	r2, r1
 8001490:	6013      	str	r3, [r2, #0]
            ptr[16 + i] =   (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 2] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	3302      	adds	r3, #2
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <led_fill_led_pwm_data+0x118>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	461a      	mov	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1c3 0307 	rsb	r3, r3, #7
 80014a8:	fa42 f303 	asr.w	r3, r2, r3
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <led_fill_led_pwm_data+0xe2>
 80014b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4a10      	ldr	r2, [pc, #64]	; (8001500 <led_fill_led_pwm_data+0x11c>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	e006      	b.n	80014d4 <led_fill_led_pwm_data+0xf0>
 80014c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <led_fill_led_pwm_data+0x11c>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	085b      	lsrs	r3, r3, #1
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	3210      	adds	r2, #16
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	6839      	ldr	r1, [r7, #0]
 80014dc:	440a      	add	r2, r1
 80014de:	6013      	str	r3, [r2, #0]
        for (i = 0; i < 8; i++) {
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	d986      	bls.n	80013fa <led_fill_led_pwm_data+0x16>
#if LED_CFG_USE_RGBW
            ptr[24 + i] =   (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 3] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
#endif /* LED_CFG_USE_RGBW */
        }
        return 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <led_fill_led_pwm_data+0x10e>
    }
    return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	200001fc 	.word	0x200001fc
 8001500:	aaaaaaab 	.word	0xaaaaaaab

08001504 <led_update_sequence>:
 *                      HT is called when first LED_CFG_RAW_BYTES_PER_LED elements are transfered,
 *                      TC is called when second LED_CFG_RAW_BYTES_PER_LED elements are transfered.
 *
 * \note            This function must be called from DMA interrupt
 */
static void led_update_sequence(uint8_t tc) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
    tc = !!tc;                                  /* Convert to 1 or 0 value only */
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	71fb      	strb	r3, [r7, #7]

    /* Check for reset pulse at the end of PWM stream */
    if (is_reset_pulse == 2) {                  /* Check for reset pulse at the end */
 800151c:	4b46      	ldr	r3, [pc, #280]	; (8001638 <led_update_sequence+0x134>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d10c      	bne.n	800153e <led_update_sequence+0x3a>
        LL_TIM_CC_DisableChannel(TIM2, LL_TIM_CHANNEL_CH2); /* Disable channel */
 8001524:	2110      	movs	r1, #16
 8001526:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800152a:	f7ff fcd9 	bl	8000ee0 <LL_TIM_CC_DisableChannel>
        LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);    /* Disable DMA stream */
 800152e:	2106      	movs	r1, #6
 8001530:	4842      	ldr	r0, [pc, #264]	; (800163c <led_update_sequence+0x138>)
 8001532:	f7ff f933 	bl	800079c <LL_DMA_DisableStream>

        is_updating = 0;                        /* We are not updating anymore */
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <led_update_sequence+0x13c>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
        return;
 800153c:	e078      	b.n	8001630 <led_update_sequence+0x12c>
    }

    /* Check for reset pulse on beginning of PWM stream */
    if (is_reset_pulse == 1) {                  /* Check if we finished with reset pulse */
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <led_update_sequence+0x134>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d112      	bne.n	800156c <led_update_sequence+0x68>
        /*
         * When reset pulse is active, we have to wait full DMA response,
         * before we can start modifying array which is shared with DMA and PWM
         */
        if (!tc) {                              /* We must wait for transfer complete */
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d070      	beq.n	800162e <led_update_sequence+0x12a>
            return;                             /* Return and wait to finish */
        }

        /* Disable timer output and disable DMA stream */
        LL_TIM_CC_DisableChannel(TIM2, LL_TIM_CHANNEL_CH2); /* Disable channel */
 800154c:	2110      	movs	r1, #16
 800154e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001552:	f7ff fcc5 	bl	8000ee0 <LL_TIM_CC_DisableChannel>
        LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8001556:	2106      	movs	r1, #6
 8001558:	4838      	ldr	r0, [pc, #224]	; (800163c <led_update_sequence+0x138>)
 800155a:	f7ff f91f 	bl	800079c <LL_DMA_DisableStream>

        is_reset_pulse = 0;                     /* Not in reset pulse anymore */
 800155e:	4b36      	ldr	r3, [pc, #216]	; (8001638 <led_update_sequence+0x134>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
        current_led = 0;                        /* Reset current led */
 8001564:	4b37      	ldr	r3, [pc, #220]	; (8001644 <led_update_sequence+0x140>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	e004      	b.n	8001576 <led_update_sequence+0x72>
    } else {
        /*
         * When we are not in reset mode,
         * go to next led and process data for it
         */
        current_led++;                          /* Go to next LED */
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <led_update_sequence+0x140>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	4a34      	ldr	r2, [pc, #208]	; (8001644 <led_update_sequence+0x140>)
 8001574:	6013      	str	r3, [r2, #0]

    /*
     * This part is used to prepare data for "next" led,
     * for which update will start once current transfer stops in circular mode
     */
    if (current_led < LED_CFG_LEDS_CNT) {
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <led_update_sequence+0x140>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b07      	cmp	r3, #7
 800157c:	d847      	bhi.n	800160e <led_update_sequence+0x10a>
         *  - Prepare first part of array, because either there is no transfer
         *      or second part (from HT to TC) is now in process for PWM transfer
         *
         * In other case (TC = 1)
         */
        if (current_led == 0 || !tc) {
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <led_update_sequence+0x140>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <led_update_sequence+0x88>
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d106      	bne.n	800159a <led_update_sequence+0x96>
            led_fill_led_pwm_data(current_led, &tmp_led_data[0]);
 800158c:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <led_update_sequence+0x140>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	492d      	ldr	r1, [pc, #180]	; (8001648 <led_update_sequence+0x144>)
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff26 	bl	80013e4 <led_fill_led_pwm_data>
 8001598:	e005      	b.n	80015a6 <led_update_sequence+0xa2>
        } else {
            led_fill_led_pwm_data(current_led, &tmp_led_data[LED_CFG_RAW_BYTES_PER_LED]);
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <led_update_sequence+0x140>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	492b      	ldr	r1, [pc, #172]	; (800164c <led_update_sequence+0x148>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff1f 	bl	80013e4 <led_fill_led_pwm_data>
         *
         *  - We setup first part of array for first led,
         *  - We have to prepare second part for second led to have one led prepared in advance
         *  - Set DMA to circular mode and start the transfer + PWM output
         */
        if (current_led == 0) {
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <led_update_sequence+0x140>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d140      	bne.n	8001630 <led_update_sequence+0x12c>
            current_led++;                      /* Go to next LED */
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <led_update_sequence+0x140>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	4a23      	ldr	r2, [pc, #140]	; (8001644 <led_update_sequence+0x140>)
 80015b6:	6013      	str	r3, [r2, #0]
            led_fill_led_pwm_data(current_led, &tmp_led_data[LED_CFG_RAW_BYTES_PER_LED]);   /* Prepare second LED too */
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <led_update_sequence+0x140>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4923      	ldr	r1, [pc, #140]	; (800164c <led_update_sequence+0x148>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff10 	bl	80013e4 <led_fill_led_pwm_data>

            /* Set DMA to circular mode and set length to 48 elements for 2 leds */
            LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_CIRCULAR);  /* Go to non-circular mode */
 80015c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c8:	2106      	movs	r1, #6
 80015ca:	481c      	ldr	r0, [pc, #112]	; (800163c <led_update_sequence+0x138>)
 80015cc:	f7ff f926 	bl	800081c <LL_DMA_SetMode>
            LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_6, (uint32_t)tmp_led_data);
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <led_update_sequence+0x144>)
 80015d2:	461a      	mov	r2, r3
 80015d4:	2106      	movs	r1, #6
 80015d6:	4819      	ldr	r0, [pc, #100]	; (800163c <led_update_sequence+0x138>)
 80015d8:	f7ff fa4e 	bl	8000a78 <LL_DMA_SetMemoryAddress>
            LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, 2 * LED_CFG_RAW_BYTES_PER_LED);
 80015dc:	2230      	movs	r2, #48	; 0x30
 80015de:	2106      	movs	r1, #6
 80015e0:	4816      	ldr	r0, [pc, #88]	; (800163c <led_update_sequence+0x138>)
 80015e2:	f7ff f9e7 	bl	80009b4 <LL_DMA_SetDataLength>

            /* Clear DMA flags */
            LL_DMA_ClearFlag_TC6(DMA1);
 80015e6:	4815      	ldr	r0, [pc, #84]	; (800163c <led_update_sequence+0x138>)
 80015e8:	f7ff faa9 	bl	8000b3e <LL_DMA_ClearFlag_TC6>
            LL_DMA_ClearFlag_HT6(DMA1);
 80015ec:	4813      	ldr	r0, [pc, #76]	; (800163c <led_update_sequence+0x138>)
 80015ee:	f7ff fa99 	bl	8000b24 <LL_DMA_ClearFlag_HT6>
            LL_DMA_EnableIT_HT(DMA1, LL_DMA_STREAM_6);
 80015f2:	2106      	movs	r1, #6
 80015f4:	4811      	ldr	r0, [pc, #68]	; (800163c <led_update_sequence+0x138>)
 80015f6:	f7ff faaf 	bl	8000b58 <LL_DMA_EnableIT_HT>
            LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 80015fa:	2106      	movs	r1, #6
 80015fc:	480f      	ldr	r0, [pc, #60]	; (800163c <led_update_sequence+0x138>)
 80015fe:	f7ff f8af 	bl	8000760 <LL_DMA_EnableStream>
            LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);  /* Enable channel */
 8001602:	2110      	movs	r1, #16
 8001604:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001608:	f7ff fc5a 	bl	8000ec0 <LL_TIM_CC_EnableChannel>
 800160c:	e010      	b.n	8001630 <led_update_sequence+0x12c>
     * When we reached all leds, we have to wait to transmit data for all leds before we can disable DMA and PWM:
     *
     *  - If TC event is enabled and we have EVEN number of LEDS (2, 4, 6, ...)
     *  - If HT event is enabled and we have ODD number of LEDS (1, 3, 5, ...)
     */
    } else if ((!tc && (LED_CFG_LEDS_CNT & 0x01)) || (tc && !(LED_CFG_LEDS_CNT & 0x01))) {
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00d      	beq.n	8001630 <led_update_sequence+0x12c>
        LL_TIM_CC_DisableChannel(TIM2, LL_TIM_CHANNEL_CH2); /* Disable channel */
 8001614:	2110      	movs	r1, #16
 8001616:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800161a:	f7ff fc61 	bl	8000ee0 <LL_TIM_CC_DisableChannel>
        LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 800161e:	2106      	movs	r1, #6
 8001620:	4806      	ldr	r0, [pc, #24]	; (800163c <led_update_sequence+0x138>)
 8001622:	f7ff f8bb 	bl	800079c <LL_DMA_DisableStream>

        /* It is time to send final reset pulse, 50us at least */
        led_start_reset_pulse(2);                /* Start reset pulse at the end */
 8001626:	2002      	movs	r0, #2
 8001628:	f000 f812 	bl	8001650 <led_start_reset_pulse>
 800162c:	e000      	b.n	8001630 <led_update_sequence+0x12c>
            return;                             /* Return and wait to finish */
 800162e:	bf00      	nop
    }
}
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002d4 	.word	0x200002d4
 800163c:	40026000 	.word	0x40026000
 8001640:	200002d5 	.word	0x200002d5
 8001644:	200002d8 	.word	0x200002d8
 8001648:	20000214 	.word	0x20000214
 800164c:	20000274 	.word	0x20000274

08001650 <led_start_reset_pulse>:

/**
 * \brief           Start reset pulse sequence
 * \param[in]       num: Number indicating pulse is for beginning (1) or end (2) of PWM data stream
 */
static uint8_t led_start_reset_pulse(uint8_t num) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
    is_reset_pulse = num;                       /* Set reset pulse flag */
 800165a:	4a20      	ldr	r2, [pc, #128]	; (80016dc <led_start_reset_pulse+0x8c>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	7013      	strb	r3, [r2, #0]

    memset(tmp_led_data, 0, sizeof(tmp_led_data));   /* Set all bytes to 0 to achieve 50us pulse */
 8001660:	22c0      	movs	r2, #192	; 0xc0
 8001662:	2100      	movs	r1, #0
 8001664:	481e      	ldr	r0, [pc, #120]	; (80016e0 <led_start_reset_pulse+0x90>)
 8001666:	f007 fbe9 	bl	8008e3c <memset>

    if (num == 1) {
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <led_start_reset_pulse+0x2c>
        tmp_led_data[0] = TIM2->ARR / 2;
 8001670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	085b      	lsrs	r3, r3, #1
 8001678:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <led_start_reset_pulse+0x90>)
 800167a:	6013      	str	r3, [r2, #0]
    }

    /* Set DMA to normal mode, set memory to beginning of data and length to 40 elements */
    /* 800kHz PWM x 40 samples = ~50us pulse low */
    LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);  /* Go to non-circular mode */
 800167c:	2200      	movs	r2, #0
 800167e:	2106      	movs	r1, #6
 8001680:	4818      	ldr	r0, [pc, #96]	; (80016e4 <led_start_reset_pulse+0x94>)
 8001682:	f7ff f8cb 	bl	800081c <LL_DMA_SetMode>
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_6, (uint32_t)tmp_led_data);
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <led_start_reset_pulse+0x90>)
 8001688:	461a      	mov	r2, r3
 800168a:	2106      	movs	r1, #6
 800168c:	4815      	ldr	r0, [pc, #84]	; (80016e4 <led_start_reset_pulse+0x94>)
 800168e:	f7ff f9f3 	bl	8000a78 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, 40);
 8001692:	2228      	movs	r2, #40	; 0x28
 8001694:	2106      	movs	r1, #6
 8001696:	4813      	ldr	r0, [pc, #76]	; (80016e4 <led_start_reset_pulse+0x94>)
 8001698:	f7ff f98c 	bl	80009b4 <LL_DMA_SetDataLength>

    /* Reset DMA configuration and enable stream */
    LL_DMA_ClearFlag_TC6(DMA1);
 800169c:	4811      	ldr	r0, [pc, #68]	; (80016e4 <led_start_reset_pulse+0x94>)
 800169e:	f7ff fa4e 	bl	8000b3e <LL_DMA_ClearFlag_TC6>
    LL_DMA_ClearFlag_HT6(DMA1);
 80016a2:	4810      	ldr	r0, [pc, #64]	; (80016e4 <led_start_reset_pulse+0x94>)
 80016a4:	f7ff fa3e 	bl	8000b24 <LL_DMA_ClearFlag_HT6>
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_6);
 80016a8:	2106      	movs	r1, #6
 80016aa:	480e      	ldr	r0, [pc, #56]	; (80016e4 <led_start_reset_pulse+0x94>)
 80016ac:	f7ff fa90 	bl	8000bd0 <LL_DMA_DisableIT_HT>
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_6);
 80016b0:	2106      	movs	r1, #6
 80016b2:	480c      	ldr	r0, [pc, #48]	; (80016e4 <led_start_reset_pulse+0x94>)
 80016b4:	f7ff fa6e 	bl	8000b94 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 80016b8:	2106      	movs	r1, #6
 80016ba:	480a      	ldr	r0, [pc, #40]	; (80016e4 <led_start_reset_pulse+0x94>)
 80016bc:	f7ff f850 	bl	8000760 <LL_DMA_EnableStream>

    LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);  /* Enable channel for timer */
 80016c0:	2110      	movs	r1, #16
 80016c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016c6:	f7ff fbfb 	bl	8000ec0 <LL_TIM_CC_EnableChannel>
    LL_TIM_EnableCounter(TIM2);                 /* Start timer counter */
 80016ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016ce:	f7ff fbdd 	bl	8000e8c <LL_TIM_EnableCounter>

    return 1;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200002d4 	.word	0x200002d4
 80016e0:	20000214 	.word	0x20000214
 80016e4:	40026000 	.word	0x40026000

080016e8 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
    if (LL_DMA_IsActiveFlag_HT6(DMA1)) {        /* Check for HT event */
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <DMA1_Stream6_IRQHandler+0x3c>)
 80016ee:	f7ff f9f3 	bl	8000ad8 <LL_DMA_IsActiveFlag_HT6>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <DMA1_Stream6_IRQHandler+0x1e>
        LL_DMA_ClearFlag_HT6(DMA1);
 80016f8:	480a      	ldr	r0, [pc, #40]	; (8001724 <DMA1_Stream6_IRQHandler+0x3c>)
 80016fa:	f7ff fa13 	bl	8000b24 <LL_DMA_ClearFlag_HT6>
        led_update_sequence(0);                 /* Call update sequence as HT event */
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff ff00 	bl	8001504 <led_update_sequence>
    } else if (LL_DMA_IsActiveFlag_TC6(DMA1)) { /* Check for TC event */
        LL_DMA_ClearFlag_TC6(DMA1);
        led_update_sequence(1);                 /* Call update sequence as TC event */
    }
}
 8001704:	e00b      	b.n	800171e <DMA1_Stream6_IRQHandler+0x36>
    } else if (LL_DMA_IsActiveFlag_TC6(DMA1)) { /* Check for TC event */
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <DMA1_Stream6_IRQHandler+0x3c>)
 8001708:	f7ff f9f9 	bl	8000afe <LL_DMA_IsActiveFlag_TC6>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <DMA1_Stream6_IRQHandler+0x36>
        LL_DMA_ClearFlag_TC6(DMA1);
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <DMA1_Stream6_IRQHandler+0x3c>)
 8001714:	f7ff fa13 	bl	8000b3e <LL_DMA_ClearFlag_TC6>
        led_update_sequence(1);                 /* Call update sequence as TC event */
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff fef3 	bl	8001504 <led_update_sequence>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40026000 	.word	0x40026000

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172e:	e7fe      	b.n	800172e <Error_Handler+0x6>

08001730 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_SPI1_Init+0x64>)
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <MX_SPI1_Init+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_SPI1_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_SPI1_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_SPI1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001790:	220a      	movs	r2, #10
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001796:	f002 fe1f 	bl	80043d8 <HAL_SPI_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017a0:	f7ff ffc2 	bl	8001728 <Error_Handler>
  }

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000036c 	.word	0x2000036c
 80017ac:	40013000 	.word	0x40013000

080017b0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_SPI3_Init+0x64>)
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <MX_SPI3_Init+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_SPI3_Init+0x64>)
 80017bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_SPI3_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_SPI3_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_SPI3_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_SPI3_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_SPI3_Init+0x64>)
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_SPI3_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_SPI3_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_SPI3_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_SPI3_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_SPI3_Init+0x64>)
 80017fc:	220a      	movs	r2, #10
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_SPI3_Init+0x64>)
 8001802:	f002 fde9 	bl	80043d8 <HAL_SPI_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800180c:	f7ff ff8c 	bl	8001728 <Error_Handler>
  }

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000314 	.word	0x20000314
 8001818:	40003c00 	.word	0x40003c00

0800181c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a32      	ldr	r2, [pc, #200]	; (8001904 <HAL_SPI_MspInit+0xe8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d12c      	bne.n	8001898 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_SPI_MspInit+0xec>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a30      	ldr	r2, [pc, #192]	; (8001908 <HAL_SPI_MspInit+0xec>)
 8001848:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <HAL_SPI_MspInit+0xec>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_SPI_MspInit+0xec>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a29      	ldr	r2, [pc, #164]	; (8001908 <HAL_SPI_MspInit+0xec>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_SPI_MspInit+0xec>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001876:	23a0      	movs	r3, #160	; 0xa0
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001886:	2305      	movs	r3, #5
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	481e      	ldr	r0, [pc, #120]	; (800190c <HAL_SPI_MspInit+0xf0>)
 8001892:	f001 f8b9 	bl	8002a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001896:	e031      	b.n	80018fc <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <HAL_SPI_MspInit+0xf4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d12c      	bne.n	80018fc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_SPI_MspInit+0xec>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a17      	ldr	r2, [pc, #92]	; (8001908 <HAL_SPI_MspInit+0xec>)
 80018ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_SPI_MspInit+0xec>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_SPI_MspInit+0xec>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_SPI_MspInit+0xec>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_SPI_MspInit+0xec>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80018da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ec:	2306      	movs	r3, #6
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4807      	ldr	r0, [pc, #28]	; (8001914 <HAL_SPI_MspInit+0xf8>)
 80018f8:	f001 f886 	bl	8002a08 <HAL_GPIO_Init>
}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	; 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40013000 	.word	0x40013000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000
 8001910:	40003c00 	.word	0x40003c00
 8001914:	40020800 	.word	0x40020800

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_MspInit+0x48>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_MspInit+0x48>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_MspInit+0x48>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_MspInit+0x48>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_MspInit+0x48>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_MspInit+0x48>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	40023800 	.word	0x40023800

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019aa:	f000 fc97 	bl	80022dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80019b6:	2010      	movs	r0, #16
 80019b8:	f001 fb7a 	bl	80030b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80019dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019e0:	f001 fb66 	bl	80030b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <OTG_FS_IRQHandler+0x10>)
 80019ee:	f001 fcd3 	bl	8003398 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000188c 	.word	0x2000188c

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f007 f9cc 	bl	8008dc8 <__errno>
 8001a30:	4602      	mov	r2, r0
 8001a32:	230c      	movs	r3, #12
 8001a34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20020000 	.word	0x20020000
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	200002dc 	.word	0x200002dc
 8001a64:	20001c90 	.word	0x20001c90

08001a68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <__NVIC_GetPriorityGrouping>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4906      	ldr	r1, [pc, #24]	; (8001ac4 <__NVIC_EnableIRQ+0x34>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <LL_DMA_SetDataTransferDirection>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001b8c:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <LL_DMA_SetDataTransferDirection+0x40>)
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ba0:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <LL_DMA_SetDataTransferDirection+0x40>)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	440b      	add	r3, r1
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	440b      	add	r3, r1
 8001bae:	4619      	mov	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	080091c4 	.word	0x080091c4

08001bc4 <LL_DMA_SetMode>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <LL_DMA_SetMode+0x40>)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001be4:	4907      	ldr	r1, [pc, #28]	; (8001c04 <LL_DMA_SetMode+0x40>)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	440b      	add	r3, r1
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	440b      	add	r3, r1
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	080091c4 	.word	0x080091c4

08001c08 <LL_DMA_SetPeriphIncMode>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <LL_DMA_SetPeriphIncMode+0x40>)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4413      	add	r3, r2
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001c28:	4907      	ldr	r1, [pc, #28]	; (8001c48 <LL_DMA_SetPeriphIncMode+0x40>)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	440b      	add	r3, r1
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	440b      	add	r3, r1
 8001c36:	4619      	mov	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	080091c4 	.word	0x080091c4

08001c4c <LL_DMA_SetMemoryIncMode>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <LL_DMA_SetMemoryIncMode+0x40>)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <LL_DMA_SetMemoryIncMode+0x40>)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	440b      	add	r3, r1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	440b      	add	r3, r1
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	080091c4 	.word	0x080091c4

08001c90 <LL_DMA_SetPeriphSize>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <LL_DMA_SetPeriphSize+0x40>)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4413      	add	r3, r2
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001cb0:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <LL_DMA_SetPeriphSize+0x40>)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	440b      	add	r3, r1
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	440b      	add	r3, r1
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	080091c4 	.word	0x080091c4

08001cd4 <LL_DMA_SetMemorySize>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <LL_DMA_SetMemorySize+0x40>)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001cf4:	4907      	ldr	r1, [pc, #28]	; (8001d14 <LL_DMA_SetMemorySize+0x40>)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	440b      	add	r3, r1
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	440b      	add	r3, r1
 8001d02:	4619      	mov	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	080091c4 	.word	0x080091c4

08001d18 <LL_DMA_SetStreamPriorityLevel>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <LL_DMA_SetStreamPriorityLevel+0x40>)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	4413      	add	r3, r2
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d38:	4907      	ldr	r1, [pc, #28]	; (8001d58 <LL_DMA_SetStreamPriorityLevel+0x40>)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	440b      	add	r3, r1
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	440b      	add	r3, r1
 8001d46:	4619      	mov	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	080091c4 	.word	0x080091c4

08001d5c <LL_DMA_SetChannelSelection>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <LL_DMA_SetChannelSelection+0x40>)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4413      	add	r3, r2
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001d7c:	4907      	ldr	r1, [pc, #28]	; (8001d9c <LL_DMA_SetChannelSelection+0x40>)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	440b      	add	r3, r1
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	440b      	add	r3, r1
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	080091c4 	.word	0x080091c4

08001da0 <LL_DMA_DisableFifoMode>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <LL_DMA_DisableFifoMode+0x38>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	4907      	ldr	r1, [pc, #28]	; (8001dd8 <LL_DMA_DisableFifoMode+0x38>)
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	440a      	add	r2, r1
 8001dc0:	7812      	ldrb	r2, [r2, #0]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	440a      	add	r2, r1
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6153      	str	r3, [r2, #20]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	080091c4 	.word	0x080091c4

08001ddc <LL_AHB1_GRP1_EnableClock>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001de8:	4907      	ldr	r1, [pc, #28]	; (8001e08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800

08001e0c <LL_APB1_GRP1_EnableClock>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e18:	4907      	ldr	r1, [pc, #28]	; (8001e38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4013      	ands	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <LL_TIM_EnableARRPreload>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <LL_TIM_DisableARRPreload>:
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	601a      	str	r2, [r3, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <LL_TIM_OC_DisableFast>:
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d01c      	beq.n	8001ec2 <LL_TIM_OC_DisableFast+0x4a>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d017      	beq.n	8001ebe <LL_TIM_OC_DisableFast+0x46>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	d012      	beq.n	8001eba <LL_TIM_OC_DisableFast+0x42>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b40      	cmp	r3, #64	; 0x40
 8001e98:	d00d      	beq.n	8001eb6 <LL_TIM_OC_DisableFast+0x3e>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea0:	d007      	beq.n	8001eb2 <LL_TIM_OC_DisableFast+0x3a>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea8:	d101      	bne.n	8001eae <LL_TIM_OC_DisableFast+0x36>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e00a      	b.n	8001ec4 <LL_TIM_OC_DisableFast+0x4c>
 8001eae:	2306      	movs	r3, #6
 8001eb0:	e008      	b.n	8001ec4 <LL_TIM_OC_DisableFast+0x4c>
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	e006      	b.n	8001ec4 <LL_TIM_OC_DisableFast+0x4c>
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e004      	b.n	8001ec4 <LL_TIM_OC_DisableFast+0x4c>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e002      	b.n	8001ec4 <LL_TIM_OC_DisableFast+0x4c>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <LL_TIM_OC_DisableFast+0x4c>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3318      	adds	r3, #24
 8001eca:	4619      	mov	r1, r3
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <LL_TIM_OC_DisableFast+0x80>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	440b      	add	r3, r1
 8001ed4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <LL_TIM_OC_DisableFast+0x84>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	408b      	lsls	r3, r1
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	401a      	ands	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	601a      	str	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	080091cc 	.word	0x080091cc
 8001efc:	080091d4 	.word	0x080091d4

08001f00 <LL_TIM_OC_EnablePreload>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d01c      	beq.n	8001f4a <LL_TIM_OC_EnablePreload+0x4a>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d017      	beq.n	8001f46 <LL_TIM_OC_EnablePreload+0x46>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d012      	beq.n	8001f42 <LL_TIM_OC_EnablePreload+0x42>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b40      	cmp	r3, #64	; 0x40
 8001f20:	d00d      	beq.n	8001f3e <LL_TIM_OC_EnablePreload+0x3e>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f28:	d007      	beq.n	8001f3a <LL_TIM_OC_EnablePreload+0x3a>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f30:	d101      	bne.n	8001f36 <LL_TIM_OC_EnablePreload+0x36>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e00a      	b.n	8001f4c <LL_TIM_OC_EnablePreload+0x4c>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e008      	b.n	8001f4c <LL_TIM_OC_EnablePreload+0x4c>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	e006      	b.n	8001f4c <LL_TIM_OC_EnablePreload+0x4c>
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e004      	b.n	8001f4c <LL_TIM_OC_EnablePreload+0x4c>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e002      	b.n	8001f4c <LL_TIM_OC_EnablePreload+0x4c>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <LL_TIM_OC_EnablePreload+0x4c>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3318      	adds	r3, #24
 8001f52:	4619      	mov	r1, r3
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <LL_TIM_OC_EnablePreload+0x80>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	440b      	add	r3, r1
 8001f5c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	4907      	ldr	r1, [pc, #28]	; (8001f84 <LL_TIM_OC_EnablePreload+0x84>)
 8001f66:	5ccb      	ldrb	r3, [r1, r3]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	408b      	lsls	r3, r1
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	601a      	str	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	080091cc 	.word	0x080091cc
 8001f84:	080091d4 	.word	0x080091d4

08001f88 <LL_TIM_SetClockSource>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f9a:	f023 0307 	bic.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <LL_TIM_SetTriggerOutput>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	605a      	str	r2, [r3, #4]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <LL_TIM_DisableMasterSlaveMode>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
	...

08001ff4 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b094      	sub	sp, #80	; 0x50
 8001ff8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001ffa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	2220      	movs	r2, #32
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f006 ff12 	bl	8008e3c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002028:	2001      	movs	r0, #1
 800202a:	f7ff feef 	bl	8001e0c <LL_APB1_GRP1_EnableClock>

  /* TIM2 DMA Init */

  /* TIM2_CH2_CH4 Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_3);
 800202e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002032:	2106      	movs	r1, #6
 8002034:	4849      	ldr	r0, [pc, #292]	; (800215c <MX_TIM2_Init+0x168>)
 8002036:	f7ff fe91 	bl	8001d5c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	2106      	movs	r1, #6
 800203e:	4847      	ldr	r0, [pc, #284]	; (800215c <MX_TIM2_Init+0x168>)
 8002040:	f7ff fd9e 	bl	8001b80 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_VERYHIGH);
 8002044:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002048:	2106      	movs	r1, #6
 800204a:	4844      	ldr	r0, [pc, #272]	; (800215c <MX_TIM2_Init+0x168>)
 800204c:	f7ff fe64 	bl	8001d18 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_CIRCULAR);
 8002050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002054:	2106      	movs	r1, #6
 8002056:	4841      	ldr	r0, [pc, #260]	; (800215c <MX_TIM2_Init+0x168>)
 8002058:	f7ff fdb4 	bl	8001bc4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 800205c:	2200      	movs	r2, #0
 800205e:	2106      	movs	r1, #6
 8002060:	483e      	ldr	r0, [pc, #248]	; (800215c <MX_TIM2_Init+0x168>)
 8002062:	f7ff fdd1 	bl	8001c08 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8002066:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206a:	2106      	movs	r1, #6
 800206c:	483b      	ldr	r0, [pc, #236]	; (800215c <MX_TIM2_Init+0x168>)
 800206e:	f7ff fded 	bl	8001c4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_WORD);
 8002072:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002076:	2106      	movs	r1, #6
 8002078:	4838      	ldr	r0, [pc, #224]	; (800215c <MX_TIM2_Init+0x168>)
 800207a:	f7ff fe09 	bl	8001c90 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_WORD);
 800207e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002082:	2106      	movs	r1, #6
 8002084:	4835      	ldr	r0, [pc, #212]	; (800215c <MX_TIM2_Init+0x168>)
 8002086:	f7ff fe25 	bl	8001cd4 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 800208a:	2106      	movs	r1, #6
 800208c:	4833      	ldr	r0, [pc, #204]	; (800215c <MX_TIM2_Init+0x168>)
 800208e:	f7ff fe87 	bl	8001da0 <LL_DMA_DisableFifoMode>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002092:	f7ff fcef 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8002096:	4603      	mov	r3, r0
 8002098:	2200      	movs	r2, #0
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fd3d 	bl	8001b1c <NVIC_EncodePriority>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4619      	mov	r1, r3
 80020a6:	201c      	movs	r0, #28
 80020a8:	f7ff fd0e 	bl	8001ac8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80020ac:	201c      	movs	r0, #28
 80020ae:	f7ff fcef 	bl	8001a90 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80020b6:	2300      	movs	r3, #0
 80020b8:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 59;
 80020ba:	233b      	movs	r3, #59	; 0x3b
 80020bc:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80020be:	2300      	movs	r3, #0
 80020c0:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80020c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020c6:	4619      	mov	r1, r3
 80020c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020cc:	f002 fdc0 	bl	8004c50 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 80020d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020d4:	f7ff feb2 	bl	8001e3c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80020d8:	2100      	movs	r1, #0
 80020da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020de:	f7ff ff53 	bl	8001f88 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80020e2:	2110      	movs	r1, #16
 80020e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020e8:	f7ff ff0a 	bl	8001f00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80020ec:	2360      	movs	r3, #96	; 0x60
 80020ee:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	461a      	mov	r2, r3
 8002106:	2110      	movs	r1, #16
 8002108:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800210c:	f002 fea8 	bl	8004e60 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8002110:	2110      	movs	r1, #16
 8002112:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002116:	f7ff feaf 	bl	8001e78 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800211a:	2100      	movs	r1, #0
 800211c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002120:	f7ff ff46 	bl	8001fb0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002124:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002128:	f7ff ff54 	bl	8001fd4 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800212c:	2001      	movs	r0, #1
 800212e:	f7ff fe55 	bl	8001ddc <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002132:	2302      	movs	r3, #2
 8002134:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002136:	2302      	movs	r3, #2
 8002138:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800213e:	2301      	movs	r3, #1
 8002140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	4619      	mov	r1, r3
 800214e:	4804      	ldr	r0, [pc, #16]	; (8002160 <MX_TIM2_Init+0x16c>)
 8002150:	f002 fbd0 	bl	80048f4 <LL_GPIO_Init>

}
 8002154:	bf00      	nop
 8002156:	3750      	adds	r7, #80	; 0x50
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40026000 	.word	0x40026000
 8002160:	40020000 	.word	0x40020000

08002164 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002178:	2002      	movs	r0, #2
 800217a:	f7ff fe47 	bl	8001e0c <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800217e:	f7ff fc79 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8002182:	4603      	mov	r3, r0
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fcc7 	bl	8001b1c <NVIC_EncodePriority>
 800218e:	4603      	mov	r3, r0
 8002190:	4619      	mov	r1, r3
 8002192:	201d      	movs	r0, #29
 8002194:	f7ff fc98 	bl	8001ac8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002198:	201d      	movs	r0, #29
 800219a:	f7ff fc79 	bl	8001a90 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 999;
 800219e:	f240 33e7 	movw	r3, #999	; 0x3e7
 80021a2:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 47999;
 80021a8:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 80021ac:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	480a      	ldr	r0, [pc, #40]	; (80021e0 <MX_TIM3_Init+0x7c>)
 80021b8:	f002 fd4a 	bl	8004c50 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80021bc:	4808      	ldr	r0, [pc, #32]	; (80021e0 <MX_TIM3_Init+0x7c>)
 80021be:	f7ff fe4c 	bl	8001e5a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80021c2:	2100      	movs	r1, #0
 80021c4:	4806      	ldr	r0, [pc, #24]	; (80021e0 <MX_TIM3_Init+0x7c>)
 80021c6:	f7ff fedf 	bl	8001f88 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80021ca:	2100      	movs	r1, #0
 80021cc:	4804      	ldr	r0, [pc, #16]	; (80021e0 <MX_TIM3_Init+0x7c>)
 80021ce:	f7ff feef 	bl	8001fb0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80021d2:	4803      	ldr	r0, [pc, #12]	; (80021e0 <MX_TIM3_Init+0x7c>)
 80021d4:	f7ff fefe 	bl	8001fd4 <LL_TIM_DisableMasterSlaveMode>

}
 80021d8:	bf00      	nop
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40000400 	.word	0x40000400

080021e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800221c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80021e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021ea:	e003      	b.n	80021f4 <LoopCopyDataInit>

080021ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021f2:	3104      	adds	r1, #4

080021f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021f4:	480b      	ldr	r0, [pc, #44]	; (8002224 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021fc:	d3f6      	bcc.n	80021ec <CopyDataInit>
  ldr  r2, =_sbss
 80021fe:	4a0b      	ldr	r2, [pc, #44]	; (800222c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002200:	e002      	b.n	8002208 <LoopFillZerobss>

08002202 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002202:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002204:	f842 3b04 	str.w	r3, [r2], #4

08002208 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800220a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800220c:	d3f9      	bcc.n	8002202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800220e:	f7ff fc2b 	bl	8001a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002212:	f006 fddf 	bl	8008dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002216:	f7fe ff3a 	bl	800108e <main>
  bx  lr    
 800221a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800221c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002220:	080091e4 	.word	0x080091e4
  ldr  r0, =_sdata
 8002224:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002228:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800222c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002230:	20001c90 	.word	0x20001c90

08002234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC_IRQHandler>
	...

08002238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HAL_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0d      	ldr	r2, [pc, #52]	; (8002278 <HAL_Init+0x40>)
 8002242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002246:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <HAL_Init+0x40>)
 800224e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002252:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a07      	ldr	r2, [pc, #28]	; (8002278 <HAL_Init+0x40>)
 800225a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f000 fb61 	bl	8002928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002266:	2000      	movs	r0, #0
 8002268:	f000 f808 	bl	800227c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800226c:	f7ff fb54 	bl	8001918 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023c00 	.word	0x40023c00

0800227c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x54>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_InitTick+0x58>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fba8 	bl	80029f0 <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00e      	b.n	80022c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d80a      	bhi.n	80022c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f000 fb56 	bl	8002968 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <HAL_InitTick+0x5c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000008 	.word	0x20000008
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_IncTick+0x1c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_IncTick+0x20>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a03      	ldr	r2, [pc, #12]	; (80022fc <HAL_IncTick+0x20>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	20000008 	.word	0x20000008
 80022fc:	200003c4 	.word	0x200003c4

08002300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b02      	ldr	r3, [pc, #8]	; (8002310 <HAL_GetTick+0x10>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	200003c4 	.word	0x200003c4

08002314 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff fff0 	bl	8002300 <HAL_GetTick>
 8002320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d005      	beq.n	800233a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_Delay+0x40>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800233a:	bf00      	nop
 800233c:	f7ff ffe0 	bl	8002300 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8f7      	bhi.n	800233c <HAL_Delay+0x28>
  {
  }
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000008 	.word	0x20000008

08002358 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e20e      	b.n	8002788 <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4aa0      	ldr	r2, [pc, #640]	; (80025f0 <HAL_CAN_Init+0x298>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d009      	beq.n	8002388 <HAL_CAN_Init+0x30>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a9e      	ldr	r2, [pc, #632]	; (80025f4 <HAL_CAN_Init+0x29c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_CAN_Init+0x30>
 800237e:	f240 111d 	movw	r1, #285	; 0x11d
 8002382:	489d      	ldr	r0, [pc, #628]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 8002384:	f7ff f9d4 	bl	8001730 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7e1b      	ldrb	r3, [r3, #24]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_CAN_Init+0x4a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7e1b      	ldrb	r3, [r3, #24]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d004      	beq.n	80023a2 <HAL_CAN_Init+0x4a>
 8002398:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800239c:	4896      	ldr	r0, [pc, #600]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 800239e:	f7ff f9c7 	bl	8001730 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7e5b      	ldrb	r3, [r3, #25]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <HAL_CAN_Init+0x64>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7e5b      	ldrb	r3, [r3, #25]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d004      	beq.n	80023bc <HAL_CAN_Init+0x64>
 80023b2:	f240 111f 	movw	r1, #287	; 0x11f
 80023b6:	4890      	ldr	r0, [pc, #576]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 80023b8:	f7ff f9ba 	bl	8001730 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	7e9b      	ldrb	r3, [r3, #26]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_CAN_Init+0x7e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7e9b      	ldrb	r3, [r3, #26]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d004      	beq.n	80023d6 <HAL_CAN_Init+0x7e>
 80023cc:	f44f 7190 	mov.w	r1, #288	; 0x120
 80023d0:	4889      	ldr	r0, [pc, #548]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 80023d2:	f7ff f9ad 	bl	8001730 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7edb      	ldrb	r3, [r3, #27]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_CAN_Init+0x98>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7edb      	ldrb	r3, [r3, #27]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d004      	beq.n	80023f0 <HAL_CAN_Init+0x98>
 80023e6:	f240 1121 	movw	r1, #289	; 0x121
 80023ea:	4883      	ldr	r0, [pc, #524]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 80023ec:	f7ff f9a0 	bl	8001730 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7f1b      	ldrb	r3, [r3, #28]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_CAN_Init+0xb2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7f1b      	ldrb	r3, [r3, #28]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d004      	beq.n	800240a <HAL_CAN_Init+0xb2>
 8002400:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002404:	487c      	ldr	r0, [pc, #496]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 8002406:	f7ff f993 	bl	8001730 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7f5b      	ldrb	r3, [r3, #29]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_CAN_Init+0xcc>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7f5b      	ldrb	r3, [r3, #29]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d004      	beq.n	8002424 <HAL_CAN_Init+0xcc>
 800241a:	f240 1123 	movw	r1, #291	; 0x123
 800241e:	4876      	ldr	r0, [pc, #472]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 8002420:	f7ff f986 	bl	8001730 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_CAN_Init+0xfc>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002434:	d00e      	beq.n	8002454 <HAL_CAN_Init+0xfc>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800243e:	d009      	beq.n	8002454 <HAL_CAN_Init+0xfc>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002448:	d004      	beq.n	8002454 <HAL_CAN_Init+0xfc>
 800244a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800244e:	486a      	ldr	r0, [pc, #424]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 8002450:	f7ff f96e 	bl	8001730 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_CAN_Init+0x12c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002464:	d00e      	beq.n	8002484 <HAL_CAN_Init+0x12c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800246e:	d009      	beq.n	8002484 <HAL_CAN_Init+0x12c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002478:	d004      	beq.n	8002484 <HAL_CAN_Init+0x12c>
 800247a:	f240 1125 	movw	r1, #293	; 0x125
 800247e:	485e      	ldr	r0, [pc, #376]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 8002480:	f7ff f956 	bl	8001730 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d04f      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d04a      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800249e:	d045      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024a8:	d040      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024b2:	d03b      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024bc:	d036      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80024c6:	d031      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80024d0:	d02c      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024da:	d027      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80024e4:	d022      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80024ee:	d01d      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80024f8:	d018      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002502:	d013      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 800250c:	d00e      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002516:	d009      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8002520:	d004      	beq.n	800252c <HAL_CAN_Init+0x1d4>
 8002522:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002526:	4834      	ldr	r0, [pc, #208]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 8002528:	f7ff f902 	bl	8001730 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d027      	beq.n	8002584 <HAL_CAN_Init+0x22c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800253c:	d022      	beq.n	8002584 <HAL_CAN_Init+0x22c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002546:	d01d      	beq.n	8002584 <HAL_CAN_Init+0x22c>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002550:	d018      	beq.n	8002584 <HAL_CAN_Init+0x22c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800255a:	d013      	beq.n	8002584 <HAL_CAN_Init+0x22c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8002564:	d00e      	beq.n	8002584 <HAL_CAN_Init+0x22c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800256e:	d009      	beq.n	8002584 <HAL_CAN_Init+0x22c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8002578:	d004      	beq.n	8002584 <HAL_CAN_Init+0x22c>
 800257a:	f240 1127 	movw	r1, #295	; 0x127
 800257e:	481e      	ldr	r0, [pc, #120]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 8002580:	f7ff f8d6 	bl	8001730 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <HAL_CAN_Init+0x23e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002594:	d904      	bls.n	80025a0 <HAL_CAN_Init+0x248>
 8002596:	f44f 7194 	mov.w	r1, #296	; 0x128
 800259a:	4817      	ldr	r0, [pc, #92]	; (80025f8 <HAL_CAN_Init+0x2a0>)
 800259c:	f7ff f8c8 	bl	8001730 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7fd fe3d 	bl	800022c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0202 	bic.w	r2, r2, #2
 80025c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c2:	f7ff fe9d 	bl	8002300 <HAL_GetTick>
 80025c6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025c8:	e018      	b.n	80025fc <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025ca:	f7ff fe99 	bl	8002300 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b0a      	cmp	r3, #10
 80025d6:	d911      	bls.n	80025fc <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2205      	movs	r2, #5
 80025e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0cb      	b.n	8002788 <HAL_CAN_Init+0x430>
 80025f0:	40006400 	.word	0x40006400
 80025f4:	40006800 	.word	0x40006800
 80025f8:	08008fd4 	.word	0x08008fd4
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1df      	bne.n	80025ca <HAL_CAN_Init+0x272>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800261a:	f7ff fe71 	bl	8002300 <HAL_GetTick>
 800261e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002620:	e012      	b.n	8002648 <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002622:	f7ff fe6d 	bl	8002300 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b0a      	cmp	r3, #10
 800262e:	d90b      	bls.n	8002648 <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2205      	movs	r2, #5
 8002640:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e09f      	b.n	8002788 <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0e5      	beq.n	8002622 <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	7e1b      	ldrb	r3, [r3, #24]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e007      	b.n	8002680 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800267e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7e5b      	ldrb	r3, [r3, #25]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d108      	bne.n	800269a <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e007      	b.n	80026aa <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7e9b      	ldrb	r3, [r3, #26]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d108      	bne.n	80026c4 <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0220 	orr.w	r2, r2, #32
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e007      	b.n	80026d4 <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0220 	bic.w	r2, r2, #32
 80026d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7edb      	ldrb	r3, [r3, #27]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d108      	bne.n	80026ee <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0210 	bic.w	r2, r2, #16
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e007      	b.n	80026fe <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0210 	orr.w	r2, r2, #16
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	7f1b      	ldrb	r3, [r3, #28]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d108      	bne.n	8002718 <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0208 	orr.w	r2, r2, #8
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e007      	b.n	8002728 <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0208 	bic.w	r2, r2, #8
 8002726:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7f5b      	ldrb	r3, [r3, #29]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d108      	bne.n	8002742 <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0204 	orr.w	r2, r2, #4
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e007      	b.n	8002752 <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0204 	bic.w	r2, r2, #4
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	ea42 0103 	orr.w	r1, r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	1e5a      	subs	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <__NVIC_SetPriorityGrouping>:
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c2:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60d3      	str	r3, [r2, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_GetPriorityGrouping>:
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <__NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 0307 	and.w	r3, r3, #7
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_EnableIRQ>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db0b      	blt.n	800281e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4906      	ldr	r1, [pc, #24]	; (8002828 <__NVIC_EnableIRQ+0x34>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2001      	movs	r0, #1
 8002816:	fa00 f202 	lsl.w	r2, r0, r2
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f4:	d301      	bcc.n	80028fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00f      	b.n	800291a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <SysTick_Config+0x40>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002902:	210f      	movs	r1, #15
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	f7ff ff90 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <SysTick_Config+0x40>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <SysTick_Config+0x40>)
 8002914:	2207      	movs	r2, #7
 8002916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	e000e010 	.word	0xe000e010

08002928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b07      	cmp	r3, #7
 8002934:	d00f      	beq.n	8002956 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b06      	cmp	r3, #6
 800293a:	d00c      	beq.n	8002956 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b05      	cmp	r3, #5
 8002940:	d009      	beq.n	8002956 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b04      	cmp	r3, #4
 8002946:	d006      	beq.n	8002956 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d003      	beq.n	8002956 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800294e:	2192      	movs	r1, #146	; 0x92
 8002950:	4804      	ldr	r0, [pc, #16]	; (8002964 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002952:	f7fe feed 	bl	8001730 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ff1a 	bl	8002790 <__NVIC_SetPriorityGrouping>
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	0800900c 	.word	0x0800900c

08002968 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b0f      	cmp	r3, #15
 800297e:	d903      	bls.n	8002988 <HAL_NVIC_SetPriority+0x20>
 8002980:	21aa      	movs	r1, #170	; 0xaa
 8002982:	480e      	ldr	r0, [pc, #56]	; (80029bc <HAL_NVIC_SetPriority+0x54>)
 8002984:	f7fe fed4 	bl	8001730 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d903      	bls.n	8002996 <HAL_NVIC_SetPriority+0x2e>
 800298e:	21ab      	movs	r1, #171	; 0xab
 8002990:	480a      	ldr	r0, [pc, #40]	; (80029bc <HAL_NVIC_SetPriority+0x54>)
 8002992:	f7fe fecd 	bl	8001730 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002996:	f7ff ff1f 	bl	80027d8 <__NVIC_GetPriorityGrouping>
 800299a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	6978      	ldr	r0, [r7, #20]
 80029a2:	f7ff ff6d 	bl	8002880 <NVIC_EncodePriority>
 80029a6:	4602      	mov	r2, r0
 80029a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff3c 	bl	800282c <__NVIC_SetPriority>
}
 80029b4:	bf00      	nop
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	0800900c 	.word	0x0800900c

080029c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	da03      	bge.n	80029da <HAL_NVIC_EnableIRQ+0x1a>
 80029d2:	21be      	movs	r1, #190	; 0xbe
 80029d4:	4805      	ldr	r0, [pc, #20]	; (80029ec <HAL_NVIC_EnableIRQ+0x2c>)
 80029d6:	f7fe feab 	bl	8001730 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ff08 	bl	80027f4 <__NVIC_EnableIRQ>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	0800900c 	.word	0x0800900c

080029f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff73 	bl	80028e4 <SysTick_Config>
 80029fe:	4603      	mov	r3, r0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a41      	ldr	r2, [pc, #260]	; (8002b20 <HAL_GPIO_Init+0x118>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d023      	beq.n	8002a66 <HAL_GPIO_Init+0x5e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a40      	ldr	r2, [pc, #256]	; (8002b24 <HAL_GPIO_Init+0x11c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01f      	beq.n	8002a66 <HAL_GPIO_Init+0x5e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a3f      	ldr	r2, [pc, #252]	; (8002b28 <HAL_GPIO_Init+0x120>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01b      	beq.n	8002a66 <HAL_GPIO_Init+0x5e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a3e      	ldr	r2, [pc, #248]	; (8002b2c <HAL_GPIO_Init+0x124>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d017      	beq.n	8002a66 <HAL_GPIO_Init+0x5e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a3d      	ldr	r2, [pc, #244]	; (8002b30 <HAL_GPIO_Init+0x128>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <HAL_GPIO_Init+0x5e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a3c      	ldr	r2, [pc, #240]	; (8002b34 <HAL_GPIO_Init+0x12c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00f      	beq.n	8002a66 <HAL_GPIO_Init+0x5e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a3b      	ldr	r2, [pc, #236]	; (8002b38 <HAL_GPIO_Init+0x130>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <HAL_GPIO_Init+0x5e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a3a      	ldr	r2, [pc, #232]	; (8002b3c <HAL_GPIO_Init+0x134>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d007      	beq.n	8002a66 <HAL_GPIO_Init+0x5e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a39      	ldr	r2, [pc, #228]	; (8002b40 <HAL_GPIO_Init+0x138>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x5e>
 8002a5e:	21b8      	movs	r1, #184	; 0xb8
 8002a60:	4838      	ldr	r0, [pc, #224]	; (8002b44 <HAL_GPIO_Init+0x13c>)
 8002a62:	f7fe fe65 	bl	8001730 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_GPIO_Init+0x74>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x7c>
 8002a7c:	21b9      	movs	r1, #185	; 0xb9
 8002a7e:	4831      	ldr	r0, [pc, #196]	; (8002b44 <HAL_GPIO_Init+0x13c>)
 8002a80:	f7fe fe56 	bl	8001730 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d035      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d031      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b11      	cmp	r3, #17
 8002a9a:	d02d      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d029      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b12      	cmp	r3, #18
 8002aaa:	d025      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <HAL_GPIO_Init+0x140>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d020      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a24      	ldr	r2, [pc, #144]	; (8002b4c <HAL_GPIO_Init+0x144>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d01b      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <HAL_GPIO_Init+0x148>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d016      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <HAL_GPIO_Init+0x14c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d011      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a1f      	ldr	r2, [pc, #124]	; (8002b58 <HAL_GPIO_Init+0x150>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00c      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <HAL_GPIO_Init+0x154>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d007      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
 8002af0:	21ba      	movs	r1, #186	; 0xba
 8002af2:	4814      	ldr	r0, [pc, #80]	; (8002b44 <HAL_GPIO_Init+0x13c>)
 8002af4:	f7fe fe1c 	bl	8001730 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8280 	beq.w	8003002 <HAL_GPIO_Init+0x5fa>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	f000 827b 	beq.w	8003002 <HAL_GPIO_Init+0x5fa>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f000 8276 	beq.w	8003002 <HAL_GPIO_Init+0x5fa>
 8002b16:	21bb      	movs	r1, #187	; 0xbb
 8002b18:	480a      	ldr	r0, [pc, #40]	; (8002b44 <HAL_GPIO_Init+0x13c>)
 8002b1a:	f7fe fe09 	bl	8001730 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1e:	e270      	b.n	8003002 <HAL_GPIO_Init+0x5fa>
 8002b20:	40020000 	.word	0x40020000
 8002b24:	40020400 	.word	0x40020400
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	40020c00 	.word	0x40020c00
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40021400 	.word	0x40021400
 8002b38:	40021800 	.word	0x40021800
 8002b3c:	40021c00 	.word	0x40021c00
 8002b40:	40022000 	.word	0x40022000
 8002b44:	08009048 	.word	0x08009048
 8002b48:	10110000 	.word	0x10110000
 8002b4c:	10210000 	.word	0x10210000
 8002b50:	10310000 	.word	0x10310000
 8002b54:	10120000 	.word	0x10120000
 8002b58:	10220000 	.word	0x10220000
 8002b5c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8242 	beq.w	8002ffc <HAL_GPIO_Init+0x5f4>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d00b      	beq.n	8002b98 <HAL_GPIO_Init+0x190>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d007      	beq.n	8002b98 <HAL_GPIO_Init+0x190>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b8c:	2b11      	cmp	r3, #17
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x190>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b12      	cmp	r3, #18
 8002b96:	d144      	bne.n	8002c22 <HAL_GPIO_Init+0x21a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00f      	beq.n	8002bc0 <HAL_GPIO_Init+0x1b8>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_GPIO_Init+0x1b8>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d007      	beq.n	8002bc0 <HAL_GPIO_Init+0x1b8>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x1b8>
 8002bb8:	21ca      	movs	r1, #202	; 0xca
 8002bba:	4898      	ldr	r0, [pc, #608]	; (8002e1c <HAL_GPIO_Init+0x414>)
 8002bbc:	f7fe fdb8 	bl	8001730 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 0201 	and.w	r2, r3, #1
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d004      	beq.n	8002c64 <HAL_GPIO_Init+0x25c>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b12      	cmp	r3, #18
 8002c60:	f040 80f0 	bne.w	8002e44 <HAL_GPIO_Init+0x43c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <HAL_GPIO_Init+0x418>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d023      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a6d      	ldr	r2, [pc, #436]	; (8002e24 <HAL_GPIO_Init+0x41c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d01f      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a6c      	ldr	r2, [pc, #432]	; (8002e28 <HAL_GPIO_Init+0x420>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d01b      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a6b      	ldr	r2, [pc, #428]	; (8002e2c <HAL_GPIO_Init+0x424>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d017      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a6a      	ldr	r2, [pc, #424]	; (8002e30 <HAL_GPIO_Init+0x428>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a69      	ldr	r2, [pc, #420]	; (8002e34 <HAL_GPIO_Init+0x42c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00f      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a68      	ldr	r2, [pc, #416]	; (8002e38 <HAL_GPIO_Init+0x430>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a67      	ldr	r2, [pc, #412]	; (8002e3c <HAL_GPIO_Init+0x434>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d007      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a66      	ldr	r2, [pc, #408]	; (8002e40 <HAL_GPIO_Init+0x438>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
 8002cac:	21e3      	movs	r1, #227	; 0xe3
 8002cae:	485b      	ldr	r0, [pc, #364]	; (8002e1c <HAL_GPIO_Init+0x414>)
 8002cb0:	f7fe fd3e 	bl	8001730 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8089 	beq.w	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b09      	cmp	r3, #9
 8002cc4:	f000 8084 	beq.w	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d07f      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d07b      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d077      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d073      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d06f      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d06b      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d067      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d063      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d05f      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d05b      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d057      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d053      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d04f      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b05      	cmp	r3, #5
 8002d36:	d04b      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d047      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d043      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b06      	cmp	r3, #6
 8002d4e:	d03f      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b09      	cmp	r3, #9
 8002d56:	d03b      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b07      	cmp	r3, #7
 8002d5e:	d037      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b07      	cmp	r3, #7
 8002d66:	d033      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b07      	cmp	r3, #7
 8002d6e:	d02f      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d02b      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d027      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d023      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b09      	cmp	r3, #9
 8002d8e:	d01f      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b09      	cmp	r3, #9
 8002d96:	d01b      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b0a      	cmp	r3, #10
 8002d9e:	d017      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b0a      	cmp	r3, #10
 8002da6:	d013      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d00f      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d00b      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d007      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c8>
 8002dc8:	21e4      	movs	r1, #228	; 0xe4
 8002dca:	4814      	ldr	r0, [pc, #80]	; (8002e1c <HAL_GPIO_Init+0x414>)
 8002dcc:	f7fe fcb0 	bl	8001730 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	6939      	ldr	r1, [r7, #16]
 8002e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002e18:	e014      	b.n	8002e44 <HAL_GPIO_Init+0x43c>
 8002e1a:	bf00      	nop
 8002e1c:	08009048 	.word	0x08009048
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400
 8002e28:	40020800 	.word	0x40020800
 8002e2c:	40020c00 	.word	0x40020c00
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40021400 	.word	0x40021400
 8002e38:	40021800 	.word	0x40021800
 8002e3c:	40021c00 	.word	0x40021c00
 8002e40:	40022000 	.word	0x40022000
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	2203      	movs	r2, #3
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0203 	and.w	r2, r3, #3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80bb 	beq.w	8002ffc <HAL_GPIO_Init+0x5f4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b64      	ldr	r3, [pc, #400]	; (800301c <HAL_GPIO_Init+0x614>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	4a63      	ldr	r2, [pc, #396]	; (800301c <HAL_GPIO_Init+0x614>)
 8002e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e94:	6453      	str	r3, [r2, #68]	; 0x44
 8002e96:	4b61      	ldr	r3, [pc, #388]	; (800301c <HAL_GPIO_Init+0x614>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ea2:	4a5f      	ldr	r2, [pc, #380]	; (8003020 <HAL_GPIO_Init+0x618>)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	220f      	movs	r2, #15
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a56      	ldr	r2, [pc, #344]	; (8003024 <HAL_GPIO_Init+0x61c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d031      	beq.n	8002f32 <HAL_GPIO_Init+0x52a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a55      	ldr	r2, [pc, #340]	; (8003028 <HAL_GPIO_Init+0x620>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d02b      	beq.n	8002f2e <HAL_GPIO_Init+0x526>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a54      	ldr	r2, [pc, #336]	; (800302c <HAL_GPIO_Init+0x624>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d025      	beq.n	8002f2a <HAL_GPIO_Init+0x522>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a53      	ldr	r2, [pc, #332]	; (8003030 <HAL_GPIO_Init+0x628>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01f      	beq.n	8002f26 <HAL_GPIO_Init+0x51e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a52      	ldr	r2, [pc, #328]	; (8003034 <HAL_GPIO_Init+0x62c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d019      	beq.n	8002f22 <HAL_GPIO_Init+0x51a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a51      	ldr	r2, [pc, #324]	; (8003038 <HAL_GPIO_Init+0x630>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_GPIO_Init+0x516>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a50      	ldr	r2, [pc, #320]	; (800303c <HAL_GPIO_Init+0x634>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00d      	beq.n	8002f1a <HAL_GPIO_Init+0x512>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4f      	ldr	r2, [pc, #316]	; (8003040 <HAL_GPIO_Init+0x638>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <HAL_GPIO_Init+0x50e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4e      	ldr	r2, [pc, #312]	; (8003044 <HAL_GPIO_Init+0x63c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_GPIO_Init+0x50a>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	e010      	b.n	8002f34 <HAL_GPIO_Init+0x52c>
 8002f12:	2309      	movs	r3, #9
 8002f14:	e00e      	b.n	8002f34 <HAL_GPIO_Init+0x52c>
 8002f16:	2307      	movs	r3, #7
 8002f18:	e00c      	b.n	8002f34 <HAL_GPIO_Init+0x52c>
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	e00a      	b.n	8002f34 <HAL_GPIO_Init+0x52c>
 8002f1e:	2305      	movs	r3, #5
 8002f20:	e008      	b.n	8002f34 <HAL_GPIO_Init+0x52c>
 8002f22:	2304      	movs	r3, #4
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x52c>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x52c>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x52c>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x52c>
 8002f32:	2300      	movs	r3, #0
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	f002 0203 	and.w	r2, r2, #3
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	461a      	mov	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f46:	4936      	ldr	r1, [pc, #216]	; (8003020 <HAL_GPIO_Init+0x618>)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f54:	4b3c      	ldr	r3, [pc, #240]	; (8003048 <HAL_GPIO_Init+0x640>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x570>
        {
          temp |= iocurrent;
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f78:	4a33      	ldr	r2, [pc, #204]	; (8003048 <HAL_GPIO_Init+0x640>)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f7e:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_GPIO_Init+0x640>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x59a>
        {
          temp |= iocurrent;
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fa2:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_GPIO_Init+0x640>)
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <HAL_GPIO_Init+0x640>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x5c4>
        {
          temp |= iocurrent;
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fcc:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <HAL_GPIO_Init+0x640>)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_GPIO_Init+0x640>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x5ee>
        {
          temp |= iocurrent;
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ff6:	4a14      	ldr	r2, [pc, #80]	; (8003048 <HAL_GPIO_Init+0x640>)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3301      	adds	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	f47f ada7 	bne.w	8002b60 <HAL_GPIO_Init+0x158>
  }
}
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	40013800 	.word	0x40013800
 8003024:	40020000 	.word	0x40020000
 8003028:	40020400 	.word	0x40020400
 800302c:	40020800 	.word	0x40020800
 8003030:	40020c00 	.word	0x40020c00
 8003034:	40021000 	.word	0x40021000
 8003038:	40021400 	.word	0x40021400
 800303c:	40021800 	.word	0x40021800
 8003040:	40021c00 	.word	0x40021c00
 8003044:	40022000 	.word	0x40022000
 8003048:	40013c00 	.word	0x40013c00

0800304c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
 8003058:	4613      	mov	r3, r2
 800305a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_GPIO_WritePin+0x20>
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	041b      	lsls	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	d004      	beq.n	8003076 <HAL_GPIO_WritePin+0x2a>
 800306c:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003070:	480e      	ldr	r0, [pc, #56]	; (80030ac <HAL_GPIO_WritePin+0x60>)
 8003072:	f7fe fb5d 	bl	8001730 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003076:	787b      	ldrb	r3, [r7, #1]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_GPIO_WritePin+0x40>
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d004      	beq.n	800308c <HAL_GPIO_WritePin+0x40>
 8003082:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8003086:	4809      	ldr	r0, [pc, #36]	; (80030ac <HAL_GPIO_WritePin+0x60>)
 8003088:	f7fe fb52 	bl	8001730 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003098:	e003      	b.n	80030a2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	619a      	str	r2, [r3, #24]
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	08009048 	.word	0x08009048

080030b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d006      	beq.n	80030d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030c6:	4a05      	ldr	r2, [pc, #20]	; (80030dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f806 	bl	80030e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40013c00 	.word	0x40013c00

080030e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f6:	b08f      	sub	sp, #60	; 0x3c
 80030f8:	af0a      	add	r7, sp, #40	; 0x28
 80030fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e11d      	b.n	8003342 <HAL_PCD_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800310e:	d008      	beq.n	8003122 <HAL_PCD_Init+0x2e>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a8d      	ldr	r2, [pc, #564]	; (800334c <HAL_PCD_Init+0x258>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <HAL_PCD_Init+0x2e>
 800311a:	2187      	movs	r1, #135	; 0x87
 800311c:	488c      	ldr	r0, [pc, #560]	; (8003350 <HAL_PCD_Init+0x25c>)
 800311e:	f7fe fb07 	bl	8001730 <assert_failed>

  USBx = hpcd->Instance;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f005 fb45 	bl	80087cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2203      	movs	r2, #3
 8003146:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d102      	bne.n	800315c <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f002 fbfb 	bl	800595c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	687e      	ldr	r6, [r7, #4]
 800316e:	466d      	mov	r5, sp
 8003170:	f106 0410 	add.w	r4, r6, #16
 8003174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800317a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003180:	e885 0003 	stmia.w	r5, {r0, r1}
 8003184:	1d33      	adds	r3, r6, #4
 8003186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003188:	6838      	ldr	r0, [r7, #0]
 800318a:	f002 fadd 	bl	8005748 <USB_CoreInit>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0d0      	b.n	8003342 <HAL_PCD_Init+0x24e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 fbe8 	bl	800597c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]
 80031b0:	e04a      	b.n	8003248 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031b2:	7bfa      	ldrb	r2, [r7, #15]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	333d      	adds	r3, #61	; 0x3d
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	333c      	adds	r3, #60	; 0x3c
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	b298      	uxth	r0, r3
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	3342      	adds	r3, #66	; 0x42
 80031ee:	4602      	mov	r2, r0
 80031f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	333f      	adds	r3, #63	; 0x3f
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3344      	adds	r3, #68	; 0x44
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	3348      	adds	r3, #72	; 0x48
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3350      	adds	r3, #80	; 0x50
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	3301      	adds	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	429a      	cmp	r2, r3
 8003250:	d3af      	bcc.n	80031b2 <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	e044      	b.n	80032e2 <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	3301      	adds	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d3b5      	bcc.n	8003258 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	687e      	ldr	r6, [r7, #4]
 80032f4:	466d      	mov	r5, sp
 80032f6:	f106 0410 	add.w	r4, r6, #16
 80032fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003302:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003306:	e885 0003 	stmia.w	r5, {r0, r1}
 800330a:	1d33      	adds	r3, r6, #4
 800330c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800330e:	6838      	ldr	r0, [r7, #0]
 8003310:	f002 fb5e 	bl	80059d0 <USB_DevInit>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e00d      	b.n	8003342 <HAL_PCD_Init+0x24e>
  }

  hpcd->USB_Address = 0U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f003 fb97 	bl	8006a6e <USB_DevDisconnect>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800334a:	bf00      	nop
 800334c:	40040000 	.word	0x40040000
 8003350:	08009084 	.word	0x08009084

08003354 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_PCD_Start+0x16>
 8003366:	2302      	movs	r3, #2
 8003368:	e012      	b.n	8003390 <HAL_PCD_Start+0x3c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f002 fae0 	bl	800593c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f003 fb54 	bl	8006a2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b08d      	sub	sp, #52	; 0x34
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 fc0b 	bl	8006bca <USB_GetMode>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 838f 	bne.w	8003ada <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f003 fb74 	bl	8006aae <USB_ReadInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8385 	beq.w	8003ad8 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 fb6b 	bl	8006aae <USB_ReadInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d107      	bne.n	80033f2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f002 0202 	and.w	r2, r2, #2
 80033f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 fb59 	bl	8006aae <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b10      	cmp	r3, #16
 8003404:	d161      	bne.n	80034ca <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699a      	ldr	r2, [r3, #24]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0210 	bic.w	r2, r2, #16
 8003414:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f003 020f 	and.w	r2, r3, #15
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	3304      	adds	r3, #4
 8003434:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	0c5b      	lsrs	r3, r3, #17
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	2b02      	cmp	r3, #2
 8003440:	d124      	bne.n	800348c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d035      	beq.n	80034ba <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800345c:	b29b      	uxth	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	6a38      	ldr	r0, [r7, #32]
 8003462:	f003 f9c5 	bl	80067f0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003472:	441a      	add	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003484:	441a      	add	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	619a      	str	r2, [r3, #24]
 800348a:	e016      	b.n	80034ba <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	0c5b      	lsrs	r3, r3, #17
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	2b06      	cmp	r3, #6
 8003496:	d110      	bne.n	80034ba <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800349e:	2208      	movs	r2, #8
 80034a0:	4619      	mov	r1, r3
 80034a2:	6a38      	ldr	r0, [r7, #32]
 80034a4:	f003 f9a4 	bl	80067f0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	699a      	ldr	r2, [r3, #24]
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034b4:	441a      	add	r2, r3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0210 	orr.w	r2, r2, #16
 80034c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f003 faed 	bl	8006aae <USB_ReadInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034de:	d16e      	bne.n	80035be <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f003 faf2 	bl	8006ad2 <USB_ReadDevAllOutEpInterrupt>
 80034ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80034f0:	e062      	b.n	80035b8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d057      	beq.n	80035ac <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f003 fb15 	bl	8006b36 <USB_ReadDevOutEPInterrupt>
 800350c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00c      	beq.n	8003532 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	2301      	movs	r3, #1
 8003528:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800352a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fda1 	bl	8004074 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00c      	beq.n	8003556 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003548:	461a      	mov	r2, r3
 800354a:	2308      	movs	r3, #8
 800354c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800354e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fe9b 	bl	800428c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356c:	461a      	mov	r2, r3
 800356e:	2310      	movs	r3, #16
 8003570:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	461a      	mov	r2, r3
 800358a:	2320      	movs	r3, #32
 800358c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a4:	461a      	mov	r2, r3
 80035a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	3301      	adds	r3, #1
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d199      	bne.n	80034f2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 fa73 	bl	8006aae <USB_ReadInterrupts>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035d2:	f040 80c0 	bne.w	8003756 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f003 fa92 	bl	8006b04 <USB_ReadDevAllInEpInterrupt>
 80035e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035e6:	e0b2      	b.n	800374e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80a7 	beq.w	8003742 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f003 fab6 	bl	8006b70 <USB_ReadDevInEPInterrupt>
 8003604:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d057      	beq.n	80036c0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	2201      	movs	r2, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	43db      	mvns	r3, r3
 800362a:	69f9      	ldr	r1, [r7, #28]
 800362c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003630:	4013      	ands	r3, r2
 8003632:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003640:	461a      	mov	r2, r3
 8003642:	2301      	movs	r3, #1
 8003644:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d132      	bne.n	80036b4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3348      	adds	r3, #72	; 0x48
 800365e:	6819      	ldr	r1, [r3, #0]
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4403      	add	r3, r0
 800366e:	3344      	adds	r3, #68	; 0x44
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4419      	add	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4403      	add	r3, r0
 8003682:	3348      	adds	r3, #72	; 0x48
 8003684:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	2b00      	cmp	r3, #0
 800368a:	d113      	bne.n	80036b4 <HAL_PCD_IRQHandler+0x31c>
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	3350      	adds	r3, #80	; 0x50
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036ac:	461a      	mov	r2, r3
 80036ae:	2101      	movs	r1, #1
 80036b0:	f003 faba 	bl	8006c28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	4619      	mov	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f005 f907 	bl	80088ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d6:	461a      	mov	r2, r3
 80036d8:	2308      	movs	r3, #8
 80036da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f2:	461a      	mov	r2, r3
 80036f4:	2310      	movs	r3, #16
 80036f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370e:	461a      	mov	r2, r3
 8003710:	2340      	movs	r3, #64	; 0x40
 8003712:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d008      	beq.n	8003730 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372a:	461a      	mov	r2, r3
 800372c:	2302      	movs	r3, #2
 800372e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800373a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fc0c 	bl	8003f5a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	3301      	adds	r3, #1
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f af49 	bne.w	80035e8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f003 f9a7 	bl	8006aae <USB_ReadInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800376a:	d114      	bne.n	8003796 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f005 f91b 	bl	80089bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f003 f987 	bl	8006aae <USB_ReadInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037aa:	d112      	bne.n	80037d2 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d102      	bne.n	80037c2 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f005 f8d7 	bl	8008970 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695a      	ldr	r2, [r3, #20]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037d0:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f003 f969 	bl	8006aae <USB_ReadInterrupts>
 80037dc:	4603      	mov	r3, r0
 80037de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e6:	f040 80c7 	bne.w	8003978 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2110      	movs	r1, #16
 8003804:	4618      	mov	r0, r3
 8003806:	f002 fa47 	bl	8005c98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800380a:	2300      	movs	r3, #0
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380e:	e056      	b.n	80038be <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381c:	461a      	mov	r2, r3
 800381e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003822:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003834:	0151      	lsls	r1, r2, #5
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	440a      	add	r2, r1
 800383a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003842:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003854:	0151      	lsls	r1, r2, #5
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	440a      	add	r2, r1
 800385a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800385e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003862:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003870:	461a      	mov	r2, r3
 8003872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003876:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003888:	0151      	lsls	r1, r2, #5
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	440a      	add	r2, r1
 800388e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003892:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003896:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ba:	3301      	adds	r3, #1
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d3a3      	bcc.n	8003810 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d016      	beq.n	8003912 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f4:	f043 030b 	orr.w	r3, r3, #11
 80038f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390a:	f043 030b 	orr.w	r3, r3, #11
 800390e:	6453      	str	r3, [r2, #68]	; 0x44
 8003910:	e015      	b.n	800393e <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003924:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003928:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003938:	f043 030b 	orr.w	r3, r3, #11
 800393c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800394c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003950:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003962:	461a      	mov	r2, r3
 8003964:	f003 f960 	bl	8006c28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f003 f896 	bl	8006aae <USB_ReadInterrupts>
 8003982:	4603      	mov	r3, r0
 8003984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398c:	d124      	bne.n	80039d8 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f003 f926 	bl	8006be4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f002 f9d7 	bl	8005d50 <USB_GetDevSpeed>
 80039a2:	4603      	mov	r3, r0
 80039a4:	461a      	mov	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681c      	ldr	r4, [r3, #0]
 80039ae:	f000 fd09 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80039b2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	4620      	mov	r0, r4
 80039be:	f001 ff1b 	bl	80057f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f004 ffab 	bl	800891e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f003 f866 	bl	8006aae <USB_ReadInterrupts>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d10a      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f004 ff88 	bl	8008902 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f002 0208 	and.w	r2, r2, #8
 8003a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f003 f851 	bl	8006aae <USB_ReadInterrupts>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a16:	d10f      	bne.n	8003a38 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	4619      	mov	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f004 ffea 	bl	80089fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f003 f836 	bl	8006aae <USB_ReadInterrupts>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a4c:	d10f      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	4619      	mov	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f004 ffbd 	bl	80089d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f003 f81b 	bl	8006aae <USB_ReadInterrupts>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a82:	d10a      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f004 ffcb 	bl	8008a20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f003 f805 	bl	8006aae <USB_ReadInterrupts>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d115      	bne.n	8003ada <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f004 ffbb 	bl	8008a3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	e000      	b.n	8003ada <HAL_PCD_IRQHandler+0x742>
      return;
 8003ad8:	bf00      	nop
    }
  }
}
 8003ada:	3734      	adds	r7, #52	; 0x34
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd90      	pop	{r4, r7, pc}

08003ae0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_PCD_SetAddress+0x1a>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e013      	b.n	8003b22 <HAL_PCD_SetAddress+0x42>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f002 ff66 	bl	80069e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	4608      	mov	r0, r1
 8003b34:	4611      	mov	r1, r2
 8003b36:	461a      	mov	r2, r3
 8003b38:	4603      	mov	r3, r0
 8003b3a:	70fb      	strb	r3, [r7, #3]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	803b      	strh	r3, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	da0f      	bge.n	8003b70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	f003 020f 	and.w	r2, r3, #15
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	3338      	adds	r3, #56	; 0x38
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	4413      	add	r3, r2
 8003b64:	3304      	adds	r3, #4
 8003b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	705a      	strb	r2, [r3, #1]
 8003b6e:	e00f      	b.n	8003b90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 020f 	and.w	r2, r3, #15
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	3304      	adds	r3, #4
 8003b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b9c:	883a      	ldrh	r2, [r7, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	78ba      	ldrb	r2, [r7, #2]
 8003ba6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	785b      	ldrb	r3, [r3, #1]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d004      	beq.n	8003bba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bba:	78bb      	ldrb	r3, [r7, #2]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d102      	bne.n	8003bc6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_PCD_EP_Open+0xaa>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e00e      	b.n	8003bf2 <HAL_PCD_EP_Open+0xc8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68f9      	ldr	r1, [r7, #12]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f002 f8d8 	bl	8005d98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003bf0:	7afb      	ldrb	r3, [r7, #11]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	da0f      	bge.n	8003c2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	f003 020f 	and.w	r2, r3, #15
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	3338      	adds	r3, #56	; 0x38
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	3304      	adds	r3, #4
 8003c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	705a      	strb	r2, [r3, #1]
 8003c2c:	e00f      	b.n	8003c4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4413      	add	r3, r2
 8003c44:	3304      	adds	r3, #4
 8003c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_PCD_EP_Close+0x6e>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e00e      	b.n	8003c86 <HAL_PCD_EP_Close+0x8c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68f9      	ldr	r1, [r7, #12]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f002 f914 	bl	8005ea4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c9e:	7afb      	ldrb	r3, [r7, #11]
 8003ca0:	f003 020f 	and.w	r2, r3, #15
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd0:	7afb      	ldrb	r3, [r7, #11]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d102      	bne.n	8003cea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cea:	7afb      	ldrb	r3, [r7, #11]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	6979      	ldr	r1, [r7, #20]
 8003d02:	f002 fbef 	bl	80064e4 <USB_EP0StartXfer>
 8003d06:	e008      	b.n	8003d1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	6979      	ldr	r1, [r7, #20]
 8003d16:	f002 f9a1 	bl	800605c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	f003 020f 	and.w	r2, r3, #15
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d62:	7afb      	ldrb	r3, [r7, #11]
 8003d64:	f003 020f 	and.w	r2, r3, #15
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	3338      	adds	r3, #56	; 0x38
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4413      	add	r3, r2
 8003d76:	3304      	adds	r3, #4
 8003d78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d92:	7afb      	ldrb	r3, [r7, #11]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d102      	bne.n	8003dac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dac:	7afb      	ldrb	r3, [r7, #11]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6979      	ldr	r1, [r7, #20]
 8003dc4:	f002 fb8e 	bl	80064e4 <USB_EP0StartXfer>
 8003dc8:	e008      	b.n	8003ddc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6979      	ldr	r1, [r7, #20]
 8003dd8:	f002 f940 	bl	800605c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d901      	bls.n	8003e04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e050      	b.n	8003ea6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	da0f      	bge.n	8003e2c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	3338      	adds	r3, #56	; 0x38
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	4413      	add	r3, r2
 8003e20:	3304      	adds	r3, #4
 8003e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	705a      	strb	r2, [r3, #1]
 8003e2a:	e00d      	b.n	8003e48 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3304      	adds	r3, #4
 8003e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_PCD_EP_SetStall+0x82>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e01e      	b.n	8003ea6 <HAL_PCD_EP_SetStall+0xc0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68f9      	ldr	r1, [r7, #12]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 fce2 	bl	8006840 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	b2d9      	uxtb	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e96:	461a      	mov	r2, r3
 8003e98:	f002 fec6 	bl	8006c28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d901      	bls.n	8003ecc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e042      	b.n	8003f52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da0f      	bge.n	8003ef4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	f003 020f 	and.w	r2, r3, #15
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	3338      	adds	r3, #56	; 0x38
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3304      	adds	r3, #4
 8003eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	705a      	strb	r2, [r3, #1]
 8003ef2:	e00f      	b.n	8003f14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 020f 	and.w	r2, r3, #15
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f1a:	78fb      	ldrb	r3, [r7, #3]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_PCD_EP_ClrStall+0x86>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e00e      	b.n	8003f52 <HAL_PCD_EP_ClrStall+0xa4>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68f9      	ldr	r1, [r7, #12]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f002 fce9 	bl	800691a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b08a      	sub	sp, #40	; 0x28
 8003f5e:	af02      	add	r7, sp, #8
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	3338      	adds	r3, #56	; 0x38
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3304      	adds	r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d901      	bls.n	8003f92 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06c      	b.n	800406c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d902      	bls.n	8003fae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3303      	adds	r3, #3
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fb6:	e02b      	b.n	8004010 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d902      	bls.n	8003fd4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	3303      	adds	r3, #3
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68d9      	ldr	r1, [r3, #12]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	6978      	ldr	r0, [r7, #20]
 8003ff4:	f002 fbc8 	bl	8006788 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	441a      	add	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	441a      	add	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	b29b      	uxth	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	429a      	cmp	r2, r3
 8004024:	d809      	bhi.n	800403a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800402e:	429a      	cmp	r2, r3
 8004030:	d203      	bcs.n	800403a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1be      	bne.n	8003fb8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	429a      	cmp	r2, r3
 8004044:	d811      	bhi.n	800406a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	2201      	movs	r2, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	43db      	mvns	r3, r3
 8004060:	6939      	ldr	r1, [r7, #16]
 8004062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004066:	4013      	ands	r3, r2
 8004068:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	333c      	adds	r3, #60	; 0x3c
 800408c:	3304      	adds	r3, #4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	f040 80a0 	bne.w	80041ec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d015      	beq.n	80040e2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a72      	ldr	r2, [pc, #456]	; (8004284 <PCD_EP_OutXfrComplete_int+0x210>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	f240 80dd 	bls.w	800427a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80d7 	beq.w	800427a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d8:	461a      	mov	r2, r3
 80040da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040de:	6093      	str	r3, [r2, #8]
 80040e0:	e0cb      	b.n	800427a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f8:	461a      	mov	r2, r3
 80040fa:	2320      	movs	r3, #32
 80040fc:	6093      	str	r3, [r2, #8]
 80040fe:	e0bc      	b.n	800427a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004106:	2b00      	cmp	r3, #0
 8004108:	f040 80b7 	bne.w	800427a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a5d      	ldr	r2, [pc, #372]	; (8004284 <PCD_EP_OutXfrComplete_int+0x210>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d90f      	bls.n	8004134 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412a:	461a      	mov	r2, r3
 800412c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004130:	6093      	str	r3, [r2, #8]
 8004132:	e0a2      	b.n	800427a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004146:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	0159      	lsls	r1, r3, #5
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	440b      	add	r3, r1
 8004150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800415a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4403      	add	r3, r0
 800416a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800416e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4403      	add	r3, r0
 8004192:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4419      	add	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4403      	add	r3, r0
 80041a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041ac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d114      	bne.n	80041de <PCD_EP_OutXfrComplete_int+0x16a>
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d108      	bne.n	80041de <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041d6:	461a      	mov	r2, r3
 80041d8:	2101      	movs	r1, #1
 80041da:	f002 fd25 	bl	8006c28 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f004 fb57 	bl	8008898 <HAL_PCD_DataOutStageCallback>
 80041ea:	e046      	b.n	800427a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a26      	ldr	r2, [pc, #152]	; (8004288 <PCD_EP_OutXfrComplete_int+0x214>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d124      	bne.n	800423e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	461a      	mov	r2, r3
 800420c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004210:	6093      	str	r3, [r2, #8]
 8004212:	e032      	b.n	800427a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422a:	461a      	mov	r2, r3
 800422c:	2320      	movs	r3, #32
 800422e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	4619      	mov	r1, r3
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f004 fb2e 	bl	8008898 <HAL_PCD_DataOutStageCallback>
 800423c:	e01d      	b.n	800427a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d114      	bne.n	800426e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d108      	bne.n	800426e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004266:	461a      	mov	r2, r3
 8004268:	2100      	movs	r1, #0
 800426a:	f002 fcdd 	bl	8006c28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	4619      	mov	r1, r3
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f004 fb0f 	bl	8008898 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	4f54300a 	.word	0x4f54300a
 8004288:	4f54310a 	.word	0x4f54310a

0800428c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	333c      	adds	r3, #60	; 0x3c
 80042a4:	3304      	adds	r3, #4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <PCD_EP_OutSetupPacket_int+0x88>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d90e      	bls.n	80042e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d8:	461a      	mov	r2, r3
 80042da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f004 fac7 	bl	8008874 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d90c      	bls.n	8004308 <PCD_EP_OutSetupPacket_int+0x7c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d108      	bne.n	8004308 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004300:	461a      	mov	r2, r3
 8004302:	2101      	movs	r1, #1
 8004304:	f002 fc90 	bl	8006c28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	4f54300a 	.word	0x4f54300a

08004318 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
 8004324:	4613      	mov	r3, r2
 8004326:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d107      	bne.n	8004346 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004336:	883b      	ldrh	r3, [r7, #0]
 8004338:	0419      	lsls	r1, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	430a      	orrs	r2, r1
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
 8004344:	e028      	b.n	8004398 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	4413      	add	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]
 8004358:	e00d      	b.n	8004376 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	3340      	adds	r3, #64	; 0x40
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	3301      	adds	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
 8004376:	7bfa      	ldrb	r2, [r7, #15]
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	3b01      	subs	r3, #1
 800437c:	429a      	cmp	r2, r3
 800437e:	d3ec      	bcc.n	800435a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004380:	883b      	ldrh	r3, [r7, #0]
 8004382:	0418      	lsls	r0, r3, #16
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6819      	ldr	r1, [r3, #0]
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	3b01      	subs	r3, #1
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	4302      	orrs	r2, r0
 8004390:	3340      	adds	r3, #64	; 0x40
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	887a      	ldrh	r2, [r7, #2]
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	20000000 	.word	0x20000000

080043d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e17e      	b.n	80046e8 <HAL_SPI_Init+0x310>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a70      	ldr	r2, [pc, #448]	; (80045b0 <HAL_SPI_Init+0x1d8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_SPI_Init+0x3a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6e      	ldr	r2, [pc, #440]	; (80045b4 <HAL_SPI_Init+0x1dc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_SPI_Init+0x3a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a6d      	ldr	r2, [pc, #436]	; (80045b8 <HAL_SPI_Init+0x1e0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_SPI_Init+0x3a>
 8004408:	f240 1141 	movw	r1, #321	; 0x141
 800440c:	486b      	ldr	r0, [pc, #428]	; (80045bc <HAL_SPI_Init+0x1e4>)
 800440e:	f7fd f98f 	bl	8001730 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_SPI_Init+0x56>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004422:	d004      	beq.n	800442e <HAL_SPI_Init+0x56>
 8004424:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004428:	4864      	ldr	r0, [pc, #400]	; (80045bc <HAL_SPI_Init+0x1e4>)
 800442a:	f7fd f981 	bl	8001730 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00e      	beq.n	8004454 <HAL_SPI_Init+0x7c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443e:	d009      	beq.n	8004454 <HAL_SPI_Init+0x7c>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004448:	d004      	beq.n	8004454 <HAL_SPI_Init+0x7c>
 800444a:	f240 1143 	movw	r1, #323	; 0x143
 800444e:	485b      	ldr	r0, [pc, #364]	; (80045bc <HAL_SPI_Init+0x1e4>)
 8004450:	f7fd f96e 	bl	8001730 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445c:	d008      	beq.n	8004470 <HAL_SPI_Init+0x98>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d004      	beq.n	8004470 <HAL_SPI_Init+0x98>
 8004466:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800446a:	4854      	ldr	r0, [pc, #336]	; (80045bc <HAL_SPI_Init+0x1e4>)
 800446c:	f7fd f960 	bl	8001730 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004478:	d00d      	beq.n	8004496 <HAL_SPI_Init+0xbe>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <HAL_SPI_Init+0xbe>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800448a:	d004      	beq.n	8004496 <HAL_SPI_Init+0xbe>
 800448c:	f240 1145 	movw	r1, #325	; 0x145
 8004490:	484a      	ldr	r0, [pc, #296]	; (80045bc <HAL_SPI_Init+0x1e4>)
 8004492:	f7fd f94d 	bl	8001730 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d020      	beq.n	80044e0 <HAL_SPI_Init+0x108>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d01c      	beq.n	80044e0 <HAL_SPI_Init+0x108>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d018      	beq.n	80044e0 <HAL_SPI_Init+0x108>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	2b18      	cmp	r3, #24
 80044b4:	d014      	beq.n	80044e0 <HAL_SPI_Init+0x108>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d010      	beq.n	80044e0 <HAL_SPI_Init+0x108>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	2b28      	cmp	r3, #40	; 0x28
 80044c4:	d00c      	beq.n	80044e0 <HAL_SPI_Init+0x108>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	2b30      	cmp	r3, #48	; 0x30
 80044cc:	d008      	beq.n	80044e0 <HAL_SPI_Init+0x108>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	2b38      	cmp	r3, #56	; 0x38
 80044d4:	d004      	beq.n	80044e0 <HAL_SPI_Init+0x108>
 80044d6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80044da:	4838      	ldr	r0, [pc, #224]	; (80045bc <HAL_SPI_Init+0x1e4>)
 80044dc:	f7fd f928 	bl	8001730 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_SPI_Init+0x122>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	2b80      	cmp	r3, #128	; 0x80
 80044ee:	d004      	beq.n	80044fa <HAL_SPI_Init+0x122>
 80044f0:	f240 1147 	movw	r1, #327	; 0x147
 80044f4:	4831      	ldr	r0, [pc, #196]	; (80045bc <HAL_SPI_Init+0x1e4>)
 80044f6:	f7fd f91b 	bl	8001730 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <HAL_SPI_Init+0x13c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2b10      	cmp	r3, #16
 8004508:	d004      	beq.n	8004514 <HAL_SPI_Init+0x13c>
 800450a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800450e:	482b      	ldr	r0, [pc, #172]	; (80045bc <HAL_SPI_Init+0x1e4>)
 8004510:	f7fd f90e 	bl	8001730 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d151      	bne.n	80045c0 <HAL_SPI_Init+0x1e8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_SPI_Init+0x15e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d004      	beq.n	8004536 <HAL_SPI_Init+0x15e>
 800452c:	f240 114b 	movw	r1, #331	; 0x14b
 8004530:	4822      	ldr	r0, [pc, #136]	; (80045bc <HAL_SPI_Init+0x1e4>)
 8004532:	f7fd f8fd 	bl	8001730 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <HAL_SPI_Init+0x178>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d004      	beq.n	8004550 <HAL_SPI_Init+0x178>
 8004546:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800454a:	481c      	ldr	r0, [pc, #112]	; (80045bc <HAL_SPI_Init+0x1e4>)
 800454c:	f7fd f8f0 	bl	8001730 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004558:	d125      	bne.n	80045a6 <HAL_SPI_Init+0x1ce>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d059      	beq.n	8004616 <HAL_SPI_Init+0x23e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	2b08      	cmp	r3, #8
 8004568:	d055      	beq.n	8004616 <HAL_SPI_Init+0x23e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	2b10      	cmp	r3, #16
 8004570:	d051      	beq.n	8004616 <HAL_SPI_Init+0x23e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	2b18      	cmp	r3, #24
 8004578:	d04d      	beq.n	8004616 <HAL_SPI_Init+0x23e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	2b20      	cmp	r3, #32
 8004580:	d049      	beq.n	8004616 <HAL_SPI_Init+0x23e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	2b28      	cmp	r3, #40	; 0x28
 8004588:	d045      	beq.n	8004616 <HAL_SPI_Init+0x23e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	2b30      	cmp	r3, #48	; 0x30
 8004590:	d041      	beq.n	8004616 <HAL_SPI_Init+0x23e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	2b38      	cmp	r3, #56	; 0x38
 8004598:	d03d      	beq.n	8004616 <HAL_SPI_Init+0x23e>
 800459a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800459e:	4807      	ldr	r0, [pc, #28]	; (80045bc <HAL_SPI_Init+0x1e4>)
 80045a0:	f7fd f8c6 	bl	8001730 <assert_failed>
 80045a4:	e037      	b.n	8004616 <HAL_SPI_Init+0x23e>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	61da      	str	r2, [r3, #28]
 80045ac:	e033      	b.n	8004616 <HAL_SPI_Init+0x23e>
 80045ae:	bf00      	nop
 80045b0:	40013000 	.word	0x40013000
 80045b4:	40003800 	.word	0x40003800
 80045b8:	40003c00 	.word	0x40003c00
 80045bc:	080090bc 	.word	0x080090bc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d020      	beq.n	800460a <HAL_SPI_Init+0x232>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d01c      	beq.n	800460a <HAL_SPI_Init+0x232>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d018      	beq.n	800460a <HAL_SPI_Init+0x232>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2b18      	cmp	r3, #24
 80045de:	d014      	beq.n	800460a <HAL_SPI_Init+0x232>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d010      	beq.n	800460a <HAL_SPI_Init+0x232>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	2b28      	cmp	r3, #40	; 0x28
 80045ee:	d00c      	beq.n	800460a <HAL_SPI_Init+0x232>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	2b30      	cmp	r3, #48	; 0x30
 80045f6:	d008      	beq.n	800460a <HAL_SPI_Init+0x232>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b38      	cmp	r3, #56	; 0x38
 80045fe:	d004      	beq.n	800460a <HAL_SPI_Init+0x232>
 8004600:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004604:	483a      	ldr	r0, [pc, #232]	; (80046f0 <HAL_SPI_Init+0x318>)
 8004606:	f7fd f893 	bl	8001730 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <HAL_SPI_Init+0x25e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fd f8f3 	bl	800181c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800464c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469a:	ea42 0103 	orr.w	r1, r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	0c1b      	lsrs	r3, r3, #16
 80046b4:	f003 0104 	and.w	r1, r3, #4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	f003 0210 	and.w	r2, r3, #16
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	080090bc 	.word	0x080090bc

080046f4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	2103      	movs	r1, #3
 800471c:	fa01 f303 	lsl.w	r3, r1, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	401a      	ands	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	fa93 f3a3 	rbit	r3, r3
 800472e:	61bb      	str	r3, [r7, #24]
  return result;
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	fa01 f303 	lsl.w	r3, r1, r3
 8004740:	431a      	orrs	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	601a      	str	r2, [r3, #0]
}
 8004746:	bf00      	nop
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	43db      	mvns	r3, r3
 8004764:	401a      	ands	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	431a      	orrs	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	605a      	str	r2, [r3, #4]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800477e:	b480      	push	{r7}
 8004780:	b089      	sub	sp, #36	; 0x24
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	fa93 f3a3 	rbit	r3, r3
 8004798:	613b      	str	r3, [r7, #16]
  return result;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	fab3 f383 	clz	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	2103      	movs	r1, #3
 80047a6:	fa01 f303 	lsl.w	r3, r1, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	401a      	ands	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	fa93 f3a3 	rbit	r3, r3
 80047b8:	61bb      	str	r3, [r7, #24]
  return result;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	fab3 f383 	clz	r3, r3
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80047d0:	bf00      	nop
 80047d2:	3724      	adds	r7, #36	; 0x24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80047da:	b480      	push	{r7}
 80047dc:	b089      	sub	sp, #36	; 0x24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	613b      	str	r3, [r7, #16]
  return result;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	2103      	movs	r1, #3
 8004802:	fa01 f303 	lsl.w	r3, r1, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	401a      	ands	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	fa93 f3a3 	rbit	r3, r3
 8004814:	61bb      	str	r3, [r7, #24]
  return result;
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	fab3 f383 	clz	r3, r3
 800481c:	b2db      	uxtb	r3, r3
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	fa01 f303 	lsl.w	r3, r1, r3
 8004826:	431a      	orrs	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	60da      	str	r2, [r3, #12]
}
 800482c:	bf00      	nop
 800482e:	3724      	adds	r7, #36	; 0x24
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004836:	b480      	push	{r7}
 8004838:	b089      	sub	sp, #36	; 0x24
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a1a      	ldr	r2, [r3, #32]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	fa93 f3a3 	rbit	r3, r3
 8004850:	613b      	str	r3, [r7, #16]
  return result;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	fab3 f383 	clz	r3, r3
 8004858:	b2db      	uxtb	r3, r3
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	210f      	movs	r1, #15
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	401a      	ands	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	fa93 f3a3 	rbit	r3, r3
 8004870:	61bb      	str	r3, [r7, #24]
  return result;
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	fab3 f383 	clz	r3, r3
 8004878:	b2db      	uxtb	r3, r3
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	fa01 f303 	lsl.w	r3, r1, r3
 8004882:	431a      	orrs	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004888:	bf00      	nop
 800488a:	3724      	adds	r7, #36	; 0x24
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr

08004892 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004892:	b480      	push	{r7}
 8004894:	b089      	sub	sp, #36	; 0x24
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	0a1b      	lsrs	r3, r3, #8
 80048a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	613b      	str	r3, [r7, #16]
  return result;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	210f      	movs	r1, #15
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	43db      	mvns	r3, r3
 80048c2:	401a      	ands	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	fa93 f3a3 	rbit	r3, r3
 80048d0:	61bb      	str	r3, [r7, #24]
  return result;
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	fab3 f383 	clz	r3, r3
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	fa01 f303 	lsl.w	r3, r1, r3
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80048e8:	bf00      	nop
 80048ea:	3724      	adds	r7, #36	; 0x24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
	...

080048f4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a94      	ldr	r2, [pc, #592]	; (8004b54 <LL_GPIO_Init+0x260>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d023      	beq.n	800494e <LL_GPIO_Init+0x5a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a93      	ldr	r2, [pc, #588]	; (8004b58 <LL_GPIO_Init+0x264>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <LL_GPIO_Init+0x5a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a92      	ldr	r2, [pc, #584]	; (8004b5c <LL_GPIO_Init+0x268>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01b      	beq.n	800494e <LL_GPIO_Init+0x5a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a91      	ldr	r2, [pc, #580]	; (8004b60 <LL_GPIO_Init+0x26c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d017      	beq.n	800494e <LL_GPIO_Init+0x5a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a90      	ldr	r2, [pc, #576]	; (8004b64 <LL_GPIO_Init+0x270>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <LL_GPIO_Init+0x5a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a8f      	ldr	r2, [pc, #572]	; (8004b68 <LL_GPIO_Init+0x274>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00f      	beq.n	800494e <LL_GPIO_Init+0x5a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a8e      	ldr	r2, [pc, #568]	; (8004b6c <LL_GPIO_Init+0x278>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00b      	beq.n	800494e <LL_GPIO_Init+0x5a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a8d      	ldr	r2, [pc, #564]	; (8004b70 <LL_GPIO_Init+0x27c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <LL_GPIO_Init+0x5a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a8c      	ldr	r2, [pc, #560]	; (8004b74 <LL_GPIO_Init+0x280>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <LL_GPIO_Init+0x5a>
 8004946:	21d1      	movs	r1, #209	; 0xd1
 8004948:	488b      	ldr	r0, [pc, #556]	; (8004b78 <LL_GPIO_Init+0x284>)
 800494a:	f7fc fef1 	bl	8001730 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d004      	beq.n	8004960 <LL_GPIO_Init+0x6c>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495e:	d303      	bcc.n	8004968 <LL_GPIO_Init+0x74>
 8004960:	21d2      	movs	r1, #210	; 0xd2
 8004962:	4885      	ldr	r0, [pc, #532]	; (8004b78 <LL_GPIO_Init+0x284>)
 8004964:	f7fc fee4 	bl	8001730 <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00f      	beq.n	8004990 <LL_GPIO_Init+0x9c>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d00b      	beq.n	8004990 <LL_GPIO_Init+0x9c>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d007      	beq.n	8004990 <LL_GPIO_Init+0x9c>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b03      	cmp	r3, #3
 8004986:	d003      	beq.n	8004990 <LL_GPIO_Init+0x9c>
 8004988:	21d3      	movs	r1, #211	; 0xd3
 800498a:	487b      	ldr	r0, [pc, #492]	; (8004b78 <LL_GPIO_Init+0x284>)
 800498c:	f7fc fed0 	bl	8001730 <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00b      	beq.n	80049b0 <LL_GPIO_Init+0xbc>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d007      	beq.n	80049b0 <LL_GPIO_Init+0xbc>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d003      	beq.n	80049b0 <LL_GPIO_Init+0xbc>
 80049a8:	21d4      	movs	r1, #212	; 0xd4
 80049aa:	4873      	ldr	r0, [pc, #460]	; (8004b78 <LL_GPIO_Init+0x284>)
 80049ac:	f7fc fec0 	bl	8001730 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	613b      	str	r3, [r7, #16]
  return result;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80049c8:	e0b6      	b.n	8004b38 <LL_GPIO_Init+0x244>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	fa01 f303 	lsl.w	r3, r1, r3
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a8 	beq.w	8004b32 <LL_GPIO_Init+0x23e>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d003      	beq.n	80049f2 <LL_GPIO_Init+0xfe>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d12e      	bne.n	8004a50 <LL_GPIO_Init+0x15c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00f      	beq.n	8004a1a <LL_GPIO_Init+0x126>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d00b      	beq.n	8004a1a <LL_GPIO_Init+0x126>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d007      	beq.n	8004a1a <LL_GPIO_Init+0x126>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d003      	beq.n	8004a1a <LL_GPIO_Init+0x126>
 8004a12:	21e5      	movs	r1, #229	; 0xe5
 8004a14:	4858      	ldr	r0, [pc, #352]	; (8004b78 <LL_GPIO_Init+0x284>)
 8004a16:	f7fc fe8b 	bl	8001730 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff feab 	bl	800477e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <LL_GPIO_Init+0x14c>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d003      	beq.n	8004a40 <LL_GPIO_Init+0x14c>
 8004a38:	21eb      	movs	r1, #235	; 0xeb
 8004a3a:	484f      	ldr	r0, [pc, #316]	; (8004b78 <LL_GPIO_Init+0x284>)
 8004a3c:	f7fc fe78 	bl	8001730 <assert_failed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff fe80 	bl	8004750 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	461a      	mov	r2, r3
 8004a56:	69b9      	ldr	r1, [r7, #24]
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff febe 	bl	80047da <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d15e      	bne.n	8004b24 <LL_GPIO_Init+0x230>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d03f      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d03b      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d037      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d033      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d02f      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	2b05      	cmp	r3, #5
 8004a94:	d02b      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d027      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	2b07      	cmp	r3, #7
 8004aa4:	d023      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d01f      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	2b09      	cmp	r3, #9
 8004ab4:	d01b      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	2b0a      	cmp	r3, #10
 8004abc:	d017      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	2b0b      	cmp	r3, #11
 8004ac4:	d013      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	2b0c      	cmp	r3, #12
 8004acc:	d00f      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	2b0d      	cmp	r3, #13
 8004ad4:	d00b      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	2b0e      	cmp	r3, #14
 8004adc:	d007      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	2b0f      	cmp	r3, #15
 8004ae4:	d003      	beq.n	8004aee <LL_GPIO_Init+0x1fa>
 8004ae6:	21f7      	movs	r1, #247	; 0xf7
 8004ae8:	4823      	ldr	r0, [pc, #140]	; (8004b78 <LL_GPIO_Init+0x284>)
 8004aea:	f7fc fe21 	bl	8001730 <assert_failed>
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	fa93 f3a3 	rbit	r3, r3
 8004af8:	60bb      	str	r3, [r7, #8]
  return result;
 8004afa:	68bb      	ldr	r3, [r7, #8]

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004afc:	fab3 f383 	clz	r3, r3
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b07      	cmp	r3, #7
 8004b04:	d807      	bhi.n	8004b16 <LL_GPIO_Init+0x222>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	69b9      	ldr	r1, [r7, #24]
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff fe91 	bl	8004836 <LL_GPIO_SetAFPin_0_7>
 8004b14:	e006      	b.n	8004b24 <LL_GPIO_Init+0x230>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	69b9      	ldr	r1, [r7, #24]
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff feb7 	bl	8004892 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	69b9      	ldr	r1, [r7, #24]
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff fde1 	bl	80046f4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3301      	adds	r3, #1
 8004b36:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f47f af41 	bne.w	80049ca <LL_GPIO_Init+0xd6>
  }
  return (SUCCESS);
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3720      	adds	r7, #32
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40020000 	.word	0x40020000
 8004b58:	40020400 	.word	0x40020400
 8004b5c:	40020800 	.word	0x40020800
 8004b60:	40020c00 	.word	0x40020c00
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40021400 	.word	0x40021400
 8004b6c:	40021800 	.word	0x40021800
 8004b70:	40021c00 	.word	0x40021c00
 8004b74:	40022000 	.word	0x40022000
 8004b78:	080090f4 	.word	0x080090f4

08004b7c <LL_TIM_SetPrescaler>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <LL_TIM_SetAutoReload>:
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr

08004bb0 <LL_TIM_SetRepetitionCounter>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr

08004bca <LL_TIM_OC_SetCompareCH1>:
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <LL_TIM_OC_SetCompareCH2>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <LL_TIM_OC_SetCompareCH3>:
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <LL_TIM_OC_SetCompareCH4>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr

08004c32 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f043 0201 	orr.w	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	615a      	str	r2, [r3, #20]
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr

08004c50 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a72      	ldr	r2, [pc, #456]	; (8004e28 <LL_TIM_Init+0x1d8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d038      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c68:	d034      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a6f      	ldr	r2, [pc, #444]	; (8004e2c <LL_TIM_Init+0x1dc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d030      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a6e      	ldr	r2, [pc, #440]	; (8004e30 <LL_TIM_Init+0x1e0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d02c      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a6d      	ldr	r2, [pc, #436]	; (8004e34 <LL_TIM_Init+0x1e4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d028      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a6c      	ldr	r2, [pc, #432]	; (8004e38 <LL_TIM_Init+0x1e8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d024      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a6b      	ldr	r2, [pc, #428]	; (8004e3c <LL_TIM_Init+0x1ec>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d020      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a6a      	ldr	r2, [pc, #424]	; (8004e40 <LL_TIM_Init+0x1f0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01c      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a69      	ldr	r2, [pc, #420]	; (8004e44 <LL_TIM_Init+0x1f4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d018      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a68      	ldr	r2, [pc, #416]	; (8004e48 <LL_TIM_Init+0x1f8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d014      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a67      	ldr	r2, [pc, #412]	; (8004e4c <LL_TIM_Init+0x1fc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d010      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a66      	ldr	r2, [pc, #408]	; (8004e50 <LL_TIM_Init+0x200>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00c      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a65      	ldr	r2, [pc, #404]	; (8004e54 <LL_TIM_Init+0x204>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d008      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a64      	ldr	r2, [pc, #400]	; (8004e58 <LL_TIM_Init+0x208>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d004      	beq.n	8004cd4 <LL_TIM_Init+0x84>
 8004cca:	f240 1135 	movw	r1, #309	; 0x135
 8004cce:	4863      	ldr	r0, [pc, #396]	; (8004e5c <LL_TIM_Init+0x20c>)
 8004cd0:	f7fc fd2e 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d014      	beq.n	8004d06 <LL_TIM_Init+0xb6>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d010      	beq.n	8004d06 <LL_TIM_Init+0xb6>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d00c      	beq.n	8004d06 <LL_TIM_Init+0xb6>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d008      	beq.n	8004d06 <LL_TIM_Init+0xb6>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b60      	cmp	r3, #96	; 0x60
 8004cfa:	d004      	beq.n	8004d06 <LL_TIM_Init+0xb6>
 8004cfc:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004d00:	4856      	ldr	r0, [pc, #344]	; (8004e5c <LL_TIM_Init+0x20c>)
 8004d02:	f7fc fd15 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00e      	beq.n	8004d2c <LL_TIM_Init+0xdc>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d16:	d009      	beq.n	8004d2c <LL_TIM_Init+0xdc>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d20:	d004      	beq.n	8004d2c <LL_TIM_Init+0xdc>
 8004d22:	f240 1137 	movw	r1, #311	; 0x137
 8004d26:	484d      	ldr	r0, [pc, #308]	; (8004e5c <LL_TIM_Init+0x20c>)
 8004d28:	f7fc fd02 	bl	8001730 <assert_failed>

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a3c      	ldr	r2, [pc, #240]	; (8004e28 <LL_TIM_Init+0x1d8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <LL_TIM_Init+0x112>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d40:	d00f      	beq.n	8004d62 <LL_TIM_Init+0x112>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a39      	ldr	r2, [pc, #228]	; (8004e2c <LL_TIM_Init+0x1dc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <LL_TIM_Init+0x112>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a38      	ldr	r2, [pc, #224]	; (8004e30 <LL_TIM_Init+0x1e0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <LL_TIM_Init+0x112>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a37      	ldr	r2, [pc, #220]	; (8004e34 <LL_TIM_Init+0x1e4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <LL_TIM_Init+0x112>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a38      	ldr	r2, [pc, #224]	; (8004e40 <LL_TIM_Init+0x1f0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d106      	bne.n	8004d70 <LL_TIM_Init+0x120>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a2d      	ldr	r2, [pc, #180]	; (8004e28 <LL_TIM_Init+0x1d8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d02b      	beq.n	8004dd0 <LL_TIM_Init+0x180>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d027      	beq.n	8004dd0 <LL_TIM_Init+0x180>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a2a      	ldr	r2, [pc, #168]	; (8004e2c <LL_TIM_Init+0x1dc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d023      	beq.n	8004dd0 <LL_TIM_Init+0x180>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a29      	ldr	r2, [pc, #164]	; (8004e30 <LL_TIM_Init+0x1e0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d01f      	beq.n	8004dd0 <LL_TIM_Init+0x180>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a28      	ldr	r2, [pc, #160]	; (8004e34 <LL_TIM_Init+0x1e4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d01b      	beq.n	8004dd0 <LL_TIM_Init+0x180>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <LL_TIM_Init+0x1f0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d017      	beq.n	8004dd0 <LL_TIM_Init+0x180>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a28      	ldr	r2, [pc, #160]	; (8004e44 <LL_TIM_Init+0x1f4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d013      	beq.n	8004dd0 <LL_TIM_Init+0x180>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a27      	ldr	r2, [pc, #156]	; (8004e48 <LL_TIM_Init+0x1f8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00f      	beq.n	8004dd0 <LL_TIM_Init+0x180>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a26      	ldr	r2, [pc, #152]	; (8004e4c <LL_TIM_Init+0x1fc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00b      	beq.n	8004dd0 <LL_TIM_Init+0x180>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a25      	ldr	r2, [pc, #148]	; (8004e50 <LL_TIM_Init+0x200>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d007      	beq.n	8004dd0 <LL_TIM_Init+0x180>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a24      	ldr	r2, [pc, #144]	; (8004e54 <LL_TIM_Init+0x204>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <LL_TIM_Init+0x180>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a23      	ldr	r2, [pc, #140]	; (8004e58 <LL_TIM_Init+0x208>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d106      	bne.n	8004dde <LL_TIM_Init+0x18e>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff fed3 	bl	8004b96 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fec0 	bl	8004b7c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <LL_TIM_Init+0x1d8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <LL_TIM_Init+0x1bc>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a0e      	ldr	r2, [pc, #56]	; (8004e40 <LL_TIM_Init+0x1f0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d105      	bne.n	8004e18 <LL_TIM_Init+0x1c8>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff fecc 	bl	8004bb0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff ff0a 	bl	8004c32 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	40001000 	.word	0x40001000
 8004e3c:	40001400 	.word	0x40001400
 8004e40:	40010400 	.word	0x40010400
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40014400 	.word	0x40014400
 8004e4c:	40014800 	.word	0x40014800
 8004e50:	40001800 	.word	0x40001800
 8004e54:	40001c00 	.word	0x40001c00
 8004e58:	40002000 	.word	0x40002000
 8004e5c:	0800912c 	.word	0x0800912c

08004e60 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b10      	cmp	r3, #16
 8004e74:	d012      	beq.n	8004e9c <LL_TIM_OC_Init+0x3c>
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d802      	bhi.n	8004e80 <LL_TIM_OC_Init+0x20>
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d007      	beq.n	8004e8e <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004e7e:	e022      	b.n	8004ec6 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8004e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e84:	d011      	beq.n	8004eaa <LL_TIM_OC_Init+0x4a>
 8004e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8a:	d015      	beq.n	8004eb8 <LL_TIM_OC_Init+0x58>
      break;
 8004e8c:	e01b      	b.n	8004ec6 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f81d 	bl	8004ed0 <OC1Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9a:	e014      	b.n	8004ec6 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f940 	bl	8005124 <OC2Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea8:	e00d      	b.n	8004ec6 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fa4f 	bl	8005350 <OC3Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb6:	e006      	b.n	8004ec6 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fb52 	bl	8005564 <OC4Config>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec4:	bf00      	nop
  }

  return result;
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a85      	ldr	r2, [pc, #532]	; (80050f4 <OC1Config+0x224>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d030      	beq.n	8004f44 <OC1Config+0x74>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee8:	d02c      	beq.n	8004f44 <OC1Config+0x74>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a82      	ldr	r2, [pc, #520]	; (80050f8 <OC1Config+0x228>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d028      	beq.n	8004f44 <OC1Config+0x74>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a81      	ldr	r2, [pc, #516]	; (80050fc <OC1Config+0x22c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d024      	beq.n	8004f44 <OC1Config+0x74>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a80      	ldr	r2, [pc, #512]	; (8005100 <OC1Config+0x230>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d020      	beq.n	8004f44 <OC1Config+0x74>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a7f      	ldr	r2, [pc, #508]	; (8005104 <OC1Config+0x234>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01c      	beq.n	8004f44 <OC1Config+0x74>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a7e      	ldr	r2, [pc, #504]	; (8005108 <OC1Config+0x238>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d018      	beq.n	8004f44 <OC1Config+0x74>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a7d      	ldr	r2, [pc, #500]	; (800510c <OC1Config+0x23c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d014      	beq.n	8004f44 <OC1Config+0x74>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a7c      	ldr	r2, [pc, #496]	; (8005110 <OC1Config+0x240>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d010      	beq.n	8004f44 <OC1Config+0x74>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a7b      	ldr	r2, [pc, #492]	; (8005114 <OC1Config+0x244>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00c      	beq.n	8004f44 <OC1Config+0x74>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a7a      	ldr	r2, [pc, #488]	; (8005118 <OC1Config+0x248>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d008      	beq.n	8004f44 <OC1Config+0x74>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a79      	ldr	r2, [pc, #484]	; (800511c <OC1Config+0x24c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <OC1Config+0x74>
 8004f3a:	f240 21e2 	movw	r1, #738	; 0x2e2
 8004f3e:	4878      	ldr	r0, [pc, #480]	; (8005120 <OC1Config+0x250>)
 8004f40:	f7fc fbf6 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <OC1Config+0xbe>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d01c      	beq.n	8004f8e <OC1Config+0xbe>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d018      	beq.n	8004f8e <OC1Config+0xbe>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b30      	cmp	r3, #48	; 0x30
 8004f62:	d014      	beq.n	8004f8e <OC1Config+0xbe>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b40      	cmp	r3, #64	; 0x40
 8004f6a:	d010      	beq.n	8004f8e <OC1Config+0xbe>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b50      	cmp	r3, #80	; 0x50
 8004f72:	d00c      	beq.n	8004f8e <OC1Config+0xbe>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b60      	cmp	r3, #96	; 0x60
 8004f7a:	d008      	beq.n	8004f8e <OC1Config+0xbe>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b70      	cmp	r3, #112	; 0x70
 8004f82:	d004      	beq.n	8004f8e <OC1Config+0xbe>
 8004f84:	f240 21e3 	movw	r1, #739	; 0x2e3
 8004f88:	4865      	ldr	r0, [pc, #404]	; (8005120 <OC1Config+0x250>)
 8004f8a:	f7fc fbd1 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <OC1Config+0xd8>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d004      	beq.n	8004fa8 <OC1Config+0xd8>
 8004f9e:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 8004fa2:	485f      	ldr	r0, [pc, #380]	; (8005120 <OC1Config+0x250>)
 8004fa4:	f7fc fbc4 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <OC1Config+0xf2>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d004      	beq.n	8004fc2 <OC1Config+0xf2>
 8004fb8:	f240 21e5 	movw	r1, #741	; 0x2e5
 8004fbc:	4858      	ldr	r0, [pc, #352]	; (8005120 <OC1Config+0x250>)
 8004fbe:	f7fc fbb7 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d008      	beq.n	8004fdc <OC1Config+0x10c>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d004      	beq.n	8004fdc <OC1Config+0x10c>
 8004fd2:	f240 21e6 	movw	r1, #742	; 0x2e6
 8004fd6:	4852      	ldr	r0, [pc, #328]	; (8005120 <OC1Config+0x250>)
 8004fd8:	f7fc fbaa 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <OC1Config+0x126>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d004      	beq.n	8004ff6 <OC1Config+0x126>
 8004fec:	f240 21e7 	movw	r1, #743	; 0x2e7
 8004ff0:	484b      	ldr	r0, [pc, #300]	; (8005120 <OC1Config+0x250>)
 8004ff2:	f7fc fb9d 	bl	8001730 <assert_failed>

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f023 0201 	bic.w	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0303 	bic.w	r3, r3, #3
 800501a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 0202 	bic.w	r2, r3, #2
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0201 	bic.w	r2, r3, #1
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2a      	ldr	r2, [pc, #168]	; (80050f4 <OC1Config+0x224>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <OC1Config+0x186>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a2c      	ldr	r2, [pc, #176]	; (8005104 <OC1Config+0x234>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d13a      	bne.n	80050cc <OC1Config+0x1fc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <OC1Config+0x1a2>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005066:	d004      	beq.n	8005072 <OC1Config+0x1a2>
 8005068:	f240 3103 	movw	r1, #771	; 0x303
 800506c:	482c      	ldr	r0, [pc, #176]	; (8005120 <OC1Config+0x250>)
 800506e:	f7fc fb5f 	bl	8001730 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <OC1Config+0x1be>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005082:	d004      	beq.n	800508e <OC1Config+0x1be>
 8005084:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005088:	4825      	ldr	r0, [pc, #148]	; (8005120 <OC1Config+0x250>)
 800508a:	f7fc fb51 	bl	8001730 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 0208 	bic.w	r2, r3, #8
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f023 0204 	bic.w	r2, r3, #4
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4619      	mov	r1, r3
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff fd73 	bl	8004bca <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40000c00 	.word	0x40000c00
 8005104:	40010400 	.word	0x40010400
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800
 8005114:	40001800 	.word	0x40001800
 8005118:	40001c00 	.word	0x40001c00
 800511c:	40002000 	.word	0x40002000
 8005120:	0800912c 	.word	0x0800912c

08005124 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(TIMx));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a7f      	ldr	r2, [pc, #508]	; (8005330 <OC2Config+0x20c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d020      	beq.n	8005178 <OC2Config+0x54>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513c:	d01c      	beq.n	8005178 <OC2Config+0x54>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a7c      	ldr	r2, [pc, #496]	; (8005334 <OC2Config+0x210>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d018      	beq.n	8005178 <OC2Config+0x54>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a7b      	ldr	r2, [pc, #492]	; (8005338 <OC2Config+0x214>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d014      	beq.n	8005178 <OC2Config+0x54>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a7a      	ldr	r2, [pc, #488]	; (800533c <OC2Config+0x218>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d010      	beq.n	8005178 <OC2Config+0x54>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a79      	ldr	r2, [pc, #484]	; (8005340 <OC2Config+0x21c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00c      	beq.n	8005178 <OC2Config+0x54>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a78      	ldr	r2, [pc, #480]	; (8005344 <OC2Config+0x220>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d008      	beq.n	8005178 <OC2Config+0x54>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a77      	ldr	r2, [pc, #476]	; (8005348 <OC2Config+0x224>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <OC2Config+0x54>
 800516e:	f240 3131 	movw	r1, #817	; 0x331
 8005172:	4876      	ldr	r0, [pc, #472]	; (800534c <OC2Config+0x228>)
 8005174:	f7fc fadc 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <OC2Config+0x9e>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b10      	cmp	r3, #16
 8005186:	d01c      	beq.n	80051c2 <OC2Config+0x9e>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b20      	cmp	r3, #32
 800518e:	d018      	beq.n	80051c2 <OC2Config+0x9e>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b30      	cmp	r3, #48	; 0x30
 8005196:	d014      	beq.n	80051c2 <OC2Config+0x9e>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	d010      	beq.n	80051c2 <OC2Config+0x9e>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b50      	cmp	r3, #80	; 0x50
 80051a6:	d00c      	beq.n	80051c2 <OC2Config+0x9e>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b60      	cmp	r3, #96	; 0x60
 80051ae:	d008      	beq.n	80051c2 <OC2Config+0x9e>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b70      	cmp	r3, #112	; 0x70
 80051b6:	d004      	beq.n	80051c2 <OC2Config+0x9e>
 80051b8:	f240 3132 	movw	r1, #818	; 0x332
 80051bc:	4863      	ldr	r0, [pc, #396]	; (800534c <OC2Config+0x228>)
 80051be:	f7fc fab7 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <OC2Config+0xb8>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d004      	beq.n	80051dc <OC2Config+0xb8>
 80051d2:	f240 3133 	movw	r1, #819	; 0x333
 80051d6:	485d      	ldr	r0, [pc, #372]	; (800534c <OC2Config+0x228>)
 80051d8:	f7fc faaa 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <OC2Config+0xd2>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d004      	beq.n	80051f6 <OC2Config+0xd2>
 80051ec:	f44f 714d 	mov.w	r1, #820	; 0x334
 80051f0:	4856      	ldr	r0, [pc, #344]	; (800534c <OC2Config+0x228>)
 80051f2:	f7fc fa9d 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <OC2Config+0xec>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d004      	beq.n	8005210 <OC2Config+0xec>
 8005206:	f240 3135 	movw	r1, #821	; 0x335
 800520a:	4850      	ldr	r0, [pc, #320]	; (800534c <OC2Config+0x228>)
 800520c:	f7fc fa90 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d008      	beq.n	800522a <OC2Config+0x106>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d004      	beq.n	800522a <OC2Config+0x106>
 8005220:	f240 3136 	movw	r1, #822	; 0x336
 8005224:	4849      	ldr	r0, [pc, #292]	; (800534c <OC2Config+0x228>)
 8005226:	f7fc fa83 	bl	8001730 <assert_failed>

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f023 0210 	bic.w	r2, r3, #16
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f023 0220 	bic.w	r2, r3, #32
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0210 	bic.w	r2, r3, #16
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a2b      	ldr	r2, [pc, #172]	; (8005330 <OC2Config+0x20c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <OC2Config+0x16c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a2d      	ldr	r2, [pc, #180]	; (8005340 <OC2Config+0x21c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d13b      	bne.n	8005308 <OC2Config+0x1e4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d009      	beq.n	80052ac <OC2Config+0x188>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a0:	d004      	beq.n	80052ac <OC2Config+0x188>
 80052a2:	f240 3152 	movw	r1, #850	; 0x352
 80052a6:	4829      	ldr	r0, [pc, #164]	; (800534c <OC2Config+0x228>)
 80052a8:	f7fc fa42 	bl	8001730 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <OC2Config+0x1a4>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052bc:	d004      	beq.n	80052c8 <OC2Config+0x1a4>
 80052be:	f240 3153 	movw	r1, #851	; 0x353
 80052c2:	4822      	ldr	r0, [pc, #136]	; (800534c <OC2Config+0x228>)
 80052c4:	f7fc fa34 	bl	8001730 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	019b      	lsls	r3, r3, #6
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	019b      	lsls	r3, r3, #6
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fc62 	bl	8004be4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40010000 	.word	0x40010000
 8005334:	40000400 	.word	0x40000400
 8005338:	40000800 	.word	0x40000800
 800533c:	40000c00 	.word	0x40000c00
 8005340:	40010400 	.word	0x40010400
 8005344:	40014000 	.word	0x40014000
 8005348:	40001800 	.word	0x40001800
 800534c:	0800912c 	.word	0x0800912c

08005350 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC3_INSTANCE(TIMx));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a7b      	ldr	r2, [pc, #492]	; (800554c <OC3Config+0x1fc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d018      	beq.n	8005394 <OC3Config+0x44>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005368:	d014      	beq.n	8005394 <OC3Config+0x44>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a78      	ldr	r2, [pc, #480]	; (8005550 <OC3Config+0x200>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d010      	beq.n	8005394 <OC3Config+0x44>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a77      	ldr	r2, [pc, #476]	; (8005554 <OC3Config+0x204>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00c      	beq.n	8005394 <OC3Config+0x44>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a76      	ldr	r2, [pc, #472]	; (8005558 <OC3Config+0x208>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d008      	beq.n	8005394 <OC3Config+0x44>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a75      	ldr	r2, [pc, #468]	; (800555c <OC3Config+0x20c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <OC3Config+0x44>
 800538a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800538e:	4874      	ldr	r0, [pc, #464]	; (8005560 <OC3Config+0x210>)
 8005390:	f7fc f9ce 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d020      	beq.n	80053de <OC3Config+0x8e>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d01c      	beq.n	80053de <OC3Config+0x8e>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d018      	beq.n	80053de <OC3Config+0x8e>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b30      	cmp	r3, #48	; 0x30
 80053b2:	d014      	beq.n	80053de <OC3Config+0x8e>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	d010      	beq.n	80053de <OC3Config+0x8e>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b50      	cmp	r3, #80	; 0x50
 80053c2:	d00c      	beq.n	80053de <OC3Config+0x8e>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b60      	cmp	r3, #96	; 0x60
 80053ca:	d008      	beq.n	80053de <OC3Config+0x8e>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b70      	cmp	r3, #112	; 0x70
 80053d2:	d004      	beq.n	80053de <OC3Config+0x8e>
 80053d4:	f240 3181 	movw	r1, #897	; 0x381
 80053d8:	4861      	ldr	r0, [pc, #388]	; (8005560 <OC3Config+0x210>)
 80053da:	f7fc f9a9 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <OC3Config+0xa8>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d004      	beq.n	80053f8 <OC3Config+0xa8>
 80053ee:	f240 3182 	movw	r1, #898	; 0x382
 80053f2:	485b      	ldr	r0, [pc, #364]	; (8005560 <OC3Config+0x210>)
 80053f4:	f7fc f99c 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <OC3Config+0xc2>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d004      	beq.n	8005412 <OC3Config+0xc2>
 8005408:	f240 3183 	movw	r1, #899	; 0x383
 800540c:	4854      	ldr	r0, [pc, #336]	; (8005560 <OC3Config+0x210>)
 800540e:	f7fc f98f 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d008      	beq.n	800542c <OC3Config+0xdc>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d004      	beq.n	800542c <OC3Config+0xdc>
 8005422:	f44f 7161 	mov.w	r1, #900	; 0x384
 8005426:	484e      	ldr	r0, [pc, #312]	; (8005560 <OC3Config+0x210>)
 8005428:	f7fc f982 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <OC3Config+0xf6>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d004      	beq.n	8005446 <OC3Config+0xf6>
 800543c:	f240 3185 	movw	r1, #901	; 0x385
 8005440:	4847      	ldr	r0, [pc, #284]	; (8005560 <OC3Config+0x210>)
 8005442:	f7fc f975 	bl	8001730 <assert_failed>

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0303 	bic.w	r3, r3, #3
 800546a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2b      	ldr	r2, [pc, #172]	; (800554c <OC3Config+0x1fc>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <OC3Config+0x15a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2d      	ldr	r2, [pc, #180]	; (800555c <OC3Config+0x20c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d13b      	bne.n	8005522 <OC3Config+0x1d2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <OC3Config+0x176>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ba:	d004      	beq.n	80054c6 <OC3Config+0x176>
 80054bc:	f240 31a1 	movw	r1, #929	; 0x3a1
 80054c0:	4827      	ldr	r0, [pc, #156]	; (8005560 <OC3Config+0x210>)
 80054c2:	f7fc f935 	bl	8001730 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <OC3Config+0x192>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d6:	d004      	beq.n	80054e2 <OC3Config+0x192>
 80054d8:	f240 31a2 	movw	r1, #930	; 0x3a2
 80054dc:	4820      	ldr	r0, [pc, #128]	; (8005560 <OC3Config+0x210>)
 80054de:	f7fc f927 	bl	8001730 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	029b      	lsls	r3, r3, #10
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	015b      	lsls	r3, r3, #5
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff fb62 	bl	8004bfe <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40010400 	.word	0x40010400
 8005560:	0800912c 	.word	0x0800912c

08005564 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a6f      	ldr	r2, [pc, #444]	; (8005730 <OC4Config+0x1cc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d018      	beq.n	80055a8 <OC4Config+0x44>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557c:	d014      	beq.n	80055a8 <OC4Config+0x44>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a6c      	ldr	r2, [pc, #432]	; (8005734 <OC4Config+0x1d0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d010      	beq.n	80055a8 <OC4Config+0x44>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a6b      	ldr	r2, [pc, #428]	; (8005738 <OC4Config+0x1d4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00c      	beq.n	80055a8 <OC4Config+0x44>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a6a      	ldr	r2, [pc, #424]	; (800573c <OC4Config+0x1d8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d008      	beq.n	80055a8 <OC4Config+0x44>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a69      	ldr	r2, [pc, #420]	; (8005740 <OC4Config+0x1dc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d004      	beq.n	80055a8 <OC4Config+0x44>
 800559e:	f240 31cf 	movw	r1, #975	; 0x3cf
 80055a2:	4868      	ldr	r0, [pc, #416]	; (8005744 <OC4Config+0x1e0>)
 80055a4:	f7fc f8c4 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d020      	beq.n	80055f2 <OC4Config+0x8e>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b10      	cmp	r3, #16
 80055b6:	d01c      	beq.n	80055f2 <OC4Config+0x8e>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d018      	beq.n	80055f2 <OC4Config+0x8e>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b30      	cmp	r3, #48	; 0x30
 80055c6:	d014      	beq.n	80055f2 <OC4Config+0x8e>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b40      	cmp	r3, #64	; 0x40
 80055ce:	d010      	beq.n	80055f2 <OC4Config+0x8e>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b50      	cmp	r3, #80	; 0x50
 80055d6:	d00c      	beq.n	80055f2 <OC4Config+0x8e>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b60      	cmp	r3, #96	; 0x60
 80055de:	d008      	beq.n	80055f2 <OC4Config+0x8e>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b70      	cmp	r3, #112	; 0x70
 80055e6:	d004      	beq.n	80055f2 <OC4Config+0x8e>
 80055e8:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 80055ec:	4855      	ldr	r0, [pc, #340]	; (8005744 <OC4Config+0x1e0>)
 80055ee:	f7fc f89f 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <OC4Config+0xa8>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d004      	beq.n	800560c <OC4Config+0xa8>
 8005602:	f240 31d1 	movw	r1, #977	; 0x3d1
 8005606:	484f      	ldr	r0, [pc, #316]	; (8005744 <OC4Config+0x1e0>)
 8005608:	f7fc f892 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <OC4Config+0xc2>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d004      	beq.n	8005626 <OC4Config+0xc2>
 800561c:	f240 31d2 	movw	r1, #978	; 0x3d2
 8005620:	4848      	ldr	r0, [pc, #288]	; (8005744 <OC4Config+0x1e0>)
 8005622:	f7fc f885 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <OC4Config+0xdc>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d004      	beq.n	8005640 <OC4Config+0xdc>
 8005636:	f240 31d3 	movw	r1, #979	; 0x3d3
 800563a:	4842      	ldr	r0, [pc, #264]	; (8005744 <OC4Config+0x1e0>)
 800563c:	f7fc f878 	bl	8001730 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <OC4Config+0xf6>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d004      	beq.n	800565a <OC4Config+0xf6>
 8005650:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 8005654:	483b      	ldr	r0, [pc, #236]	; (8005744 <OC4Config+0x1e0>)
 8005656:	f7fc f86b 	bl	8001730 <assert_failed>

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	031b      	lsls	r3, r3, #12
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	031b      	lsls	r3, r3, #12
 80056ac:	4313      	orrs	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a1f      	ldr	r2, [pc, #124]	; (8005730 <OC4Config+0x1cc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <OC4Config+0x15c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a21      	ldr	r2, [pc, #132]	; (8005740 <OC4Config+0x1dc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d123      	bne.n	8005708 <OC4Config+0x1a4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d009      	beq.n	80056dc <OC4Config+0x178>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d0:	d004      	beq.n	80056dc <OC4Config+0x178>
 80056d2:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80056d6:	481b      	ldr	r0, [pc, #108]	; (8005744 <OC4Config+0x1e0>)
 80056d8:	f7fc f82a 	bl	8001730 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <OC4Config+0x194>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ec:	d004      	beq.n	80056f8 <OC4Config+0x194>
 80056ee:	f240 31f1 	movw	r1, #1009	; 0x3f1
 80056f2:	4814      	ldr	r0, [pc, #80]	; (8005744 <OC4Config+0x1e0>)
 80056f4:	f7fc f81c 	bl	8001730 <assert_failed>

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	019b      	lsls	r3, r3, #6
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff fa7c 	bl	8004c18 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40010000 	.word	0x40010000
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40010400 	.word	0x40010400
 8005744:	0800912c 	.word	0x0800912c

08005748 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005748:	b084      	sub	sp, #16
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	f107 001c 	add.w	r0, r7, #28
 8005756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	2b01      	cmp	r3, #1
 800575e:	d122      	bne.n	80057a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578a:	2b01      	cmp	r3, #1
 800578c:	d105      	bne.n	800579a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 faa0 	bl	8006ce0 <USB_CoreReset>
 80057a0:	4603      	mov	r3, r0
 80057a2:	73fb      	strb	r3, [r7, #15]
 80057a4:	e010      	b.n	80057c8 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f001 fa94 	bl	8006ce0 <USB_CoreReset>
 80057b8:	4603      	mov	r3, r0
 80057ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d10b      	bne.n	80057e6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f043 0206 	orr.w	r2, r3, #6
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f043 0220 	orr.w	r2, r3, #32
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057f2:	b004      	add	sp, #16
 80057f4:	4770      	bx	lr
	...

080057f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d165      	bne.n	80058d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4a41      	ldr	r2, [pc, #260]	; (8005914 <USB_SetTurnaroundTime+0x11c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d906      	bls.n	8005822 <USB_SetTurnaroundTime+0x2a>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4a40      	ldr	r2, [pc, #256]	; (8005918 <USB_SetTurnaroundTime+0x120>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d802      	bhi.n	8005822 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800581c:	230f      	movs	r3, #15
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e062      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4a3c      	ldr	r2, [pc, #240]	; (8005918 <USB_SetTurnaroundTime+0x120>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d906      	bls.n	8005838 <USB_SetTurnaroundTime+0x40>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4a3b      	ldr	r2, [pc, #236]	; (800591c <USB_SetTurnaroundTime+0x124>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d802      	bhi.n	8005838 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005832:	230e      	movs	r3, #14
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	e057      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4a38      	ldr	r2, [pc, #224]	; (800591c <USB_SetTurnaroundTime+0x124>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d906      	bls.n	800584e <USB_SetTurnaroundTime+0x56>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4a37      	ldr	r2, [pc, #220]	; (8005920 <USB_SetTurnaroundTime+0x128>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d802      	bhi.n	800584e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005848:	230d      	movs	r3, #13
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e04c      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4a33      	ldr	r2, [pc, #204]	; (8005920 <USB_SetTurnaroundTime+0x128>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d906      	bls.n	8005864 <USB_SetTurnaroundTime+0x6c>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4a32      	ldr	r2, [pc, #200]	; (8005924 <USB_SetTurnaroundTime+0x12c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d802      	bhi.n	8005864 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800585e:	230c      	movs	r3, #12
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	e041      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4a2f      	ldr	r2, [pc, #188]	; (8005924 <USB_SetTurnaroundTime+0x12c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d906      	bls.n	800587a <USB_SetTurnaroundTime+0x82>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4a2e      	ldr	r2, [pc, #184]	; (8005928 <USB_SetTurnaroundTime+0x130>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d802      	bhi.n	800587a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005874:	230b      	movs	r3, #11
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e036      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4a2a      	ldr	r2, [pc, #168]	; (8005928 <USB_SetTurnaroundTime+0x130>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d906      	bls.n	8005890 <USB_SetTurnaroundTime+0x98>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4a29      	ldr	r2, [pc, #164]	; (800592c <USB_SetTurnaroundTime+0x134>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d802      	bhi.n	8005890 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800588a:	230a      	movs	r3, #10
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e02b      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4a26      	ldr	r2, [pc, #152]	; (800592c <USB_SetTurnaroundTime+0x134>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d906      	bls.n	80058a6 <USB_SetTurnaroundTime+0xae>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a25      	ldr	r2, [pc, #148]	; (8005930 <USB_SetTurnaroundTime+0x138>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d802      	bhi.n	80058a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80058a0:	2309      	movs	r3, #9
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e020      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4a21      	ldr	r2, [pc, #132]	; (8005930 <USB_SetTurnaroundTime+0x138>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d906      	bls.n	80058bc <USB_SetTurnaroundTime+0xc4>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4a20      	ldr	r2, [pc, #128]	; (8005934 <USB_SetTurnaroundTime+0x13c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d802      	bhi.n	80058bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80058b6:	2308      	movs	r3, #8
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	e015      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <USB_SetTurnaroundTime+0x13c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d906      	bls.n	80058d2 <USB_SetTurnaroundTime+0xda>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <USB_SetTurnaroundTime+0x140>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d802      	bhi.n	80058d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058cc:	2307      	movs	r3, #7
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	e00a      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80058d2:	2306      	movs	r3, #6
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	e007      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058de:	2309      	movs	r3, #9
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	e001      	b.n	80058e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058e4:	2309      	movs	r3, #9
 80058e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	029b      	lsls	r3, r3, #10
 80058fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005900:	431a      	orrs	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	00d8acbf 	.word	0x00d8acbf
 8005918:	00e4e1bf 	.word	0x00e4e1bf
 800591c:	00f423ff 	.word	0x00f423ff
 8005920:	0106737f 	.word	0x0106737f
 8005924:	011a499f 	.word	0x011a499f
 8005928:	01312cff 	.word	0x01312cff
 800592c:	014ca43f 	.word	0x014ca43f
 8005930:	016e35ff 	.word	0x016e35ff
 8005934:	01a6ab1f 	.word	0x01a6ab1f
 8005938:	01e847ff 	.word	0x01e847ff

0800593c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f043 0201 	orr.w	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr

0800595c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f023 0201 	bic.w	r2, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d106      	bne.n	80059a8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60da      	str	r2, [r3, #12]
 80059a6:	e00b      	b.n	80059c0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60da      	str	r2, [r3, #12]
 80059ba:	e001      	b.n	80059c0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e003      	b.n	80059c8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80059c0:	2032      	movs	r0, #50	; 0x32
 80059c2:	f7fc fca7 	bl	8002314 <HAL_Delay>

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059d0:	b084      	sub	sp, #16
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	e009      	b.n	8005a04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	3340      	adds	r3, #64	; 0x40
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	2200      	movs	r2, #0
 80059fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3301      	adds	r3, #1
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b0e      	cmp	r3, #14
 8005a08:	d9f2      	bls.n	80059f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d11c      	bne.n	8005a4a <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a1e:	f043 0302 	orr.w	r3, r3, #2
 8005a22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	639a      	str	r2, [r3, #56]	; 0x38
 8005a48:	e00b      	b.n	8005a62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a68:	461a      	mov	r2, r3
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a74:	4619      	mov	r1, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	680b      	ldr	r3, [r1, #0]
 8005a80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d10c      	bne.n	8005aa2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a8e:	2100      	movs	r1, #0
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f945 	bl	8005d20 <USB_SetDevSpeed>
 8005a96:	e008      	b.n	8005aaa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a98:	2101      	movs	r1, #1
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f940 	bl	8005d20 <USB_SetDevSpeed>
 8005aa0:	e003      	b.n	8005aaa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005aa2:	2103      	movs	r1, #3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f93b 	bl	8005d20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aaa:	2110      	movs	r1, #16
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f8f3 	bl	8005c98 <USB_FlushTxFifo>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f90f 	bl	8005ce0 <USB_FlushRxFifo>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aea:	461a      	mov	r2, r3
 8005aec:	2300      	movs	r3, #0
 8005aee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	e043      	b.n	8005b7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b0c:	d118      	bne.n	8005b40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	461a      	mov	r2, r3
 8005b22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e013      	b.n	8005b52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b36:	461a      	mov	r2, r3
 8005b38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e008      	b.n	8005b52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	461a      	mov	r2, r3
 8005b60:	2300      	movs	r3, #0
 8005b62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	461a      	mov	r2, r3
 8005b72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d3b7      	bcc.n	8005af6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b86:	2300      	movs	r3, #0
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	e043      	b.n	8005c14 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba2:	d118      	bne.n	8005bd6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e013      	b.n	8005be8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	e008      	b.n	8005be8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be2:	461a      	mov	r2, r3
 8005be4:	2300      	movs	r3, #0
 8005be6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c06:	461a      	mov	r2, r3
 8005c08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	3301      	adds	r3, #1
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d3b7      	bcc.n	8005b8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d105      	bne.n	8005c50 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f043 0210 	orr.w	r2, r3, #16
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699a      	ldr	r2, [r3, #24]
 8005c54:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <USB_DevInit+0x2c4>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f043 0208 	orr.w	r2, r3, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d107      	bne.n	8005c84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c7c:	f043 0304 	orr.w	r3, r3, #4
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c90:	b004      	add	sp, #16
 8005c92:	4770      	bx	lr
 8005c94:	803c3800 	.word	0x803c3800

08005c98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	019b      	lsls	r3, r3, #6
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a08      	ldr	r2, [pc, #32]	; (8005cdc <USB_FlushTxFifo+0x44>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d901      	bls.n	8005cc4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e006      	b.n	8005cd2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d0f0      	beq.n	8005cb2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr
 8005cdc:	00030d40 	.word	0x00030d40

08005ce0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2210      	movs	r2, #16
 8005cf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4a08      	ldr	r2, [pc, #32]	; (8005d1c <USB_FlushRxFifo+0x3c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d901      	bls.n	8005d04 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e006      	b.n	8005d12 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b10      	cmp	r3, #16
 8005d0e:	d0f0      	beq.n	8005cf2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr
 8005d1c:	00030d40 	.word	0x00030d40

08005d20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	68f9      	ldr	r1, [r7, #12]
 8005d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d40:	4313      	orrs	r3, r2
 8005d42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr

08005d50 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0306 	and.w	r3, r3, #6
 8005d68:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d70:	2300      	movs	r3, #0
 8005d72:	75fb      	strb	r3, [r7, #23]
 8005d74:	e00a      	b.n	8005d8c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d002      	beq.n	8005d82 <USB_GetDevSpeed+0x32>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b06      	cmp	r3, #6
 8005d80:	d102      	bne.n	8005d88 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d82:	2302      	movs	r3, #2
 8005d84:	75fb      	strb	r3, [r7, #23]
 8005d86:	e001      	b.n	8005d8c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d88:	230f      	movs	r3, #15
 8005d8a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d13a      	bne.n	8005e2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	f003 030f 	and.w	r3, r3, #15
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	68f9      	ldr	r1, [r7, #12]
 8005dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d155      	bne.n	8005e98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	78db      	ldrb	r3, [r3, #3]
 8005e06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	059b      	lsls	r3, r3, #22
 8005e0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e10:	4313      	orrs	r3, r2
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	e036      	b.n	8005e98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e30:	69da      	ldr	r2, [r3, #28]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d11a      	bne.n	8005e98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	78db      	ldrb	r3, [r3, #3]
 8005e7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	4313      	orrs	r3, r2
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr

08005ea4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d161      	bne.n	8005f84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ed6:	d11f      	bne.n	8005f18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ef6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	2101      	movs	r1, #1
 8005f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	43db      	mvns	r3, r3
 8005f32:	68f9      	ldr	r1, [r7, #12]
 8005f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f38:	4013      	ands	r3, r2
 8005f3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	43db      	mvns	r3, r3
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	0159      	lsls	r1, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	440b      	add	r3, r1
 8005f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4b35      	ldr	r3, [pc, #212]	; (8006054 <USB_DeactivateEndpoint+0x1b0>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	600b      	str	r3, [r1, #0]
 8005f82:	e060      	b.n	8006046 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f9a:	d11f      	bne.n	8005fdc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	2101      	movs	r1, #1
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	041b      	lsls	r3, r3, #16
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	68f9      	ldr	r1, [r7, #12]
 8005ff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	2101      	movs	r1, #1
 8006012:	fa01 f303 	lsl.w	r3, r1, r3
 8006016:	041b      	lsls	r3, r3, #16
 8006018:	43db      	mvns	r3, r3
 800601a:	68f9      	ldr	r1, [r7, #12]
 800601c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006020:	4013      	ands	r3, r2
 8006022:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	0159      	lsls	r1, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	440b      	add	r3, r1
 800603a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603e:	4619      	mov	r1, r3
 8006040:	4b05      	ldr	r3, [pc, #20]	; (8006058 <USB_DeactivateEndpoint+0x1b4>)
 8006042:	4013      	ands	r3, r2
 8006044:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	bc80      	pop	{r7}
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	ec337800 	.word	0xec337800
 8006058:	eff37800 	.word	0xeff37800

0800605c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b01      	cmp	r3, #1
 800607a:	f040 815c 	bne.w	8006336 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d132      	bne.n	80060ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	0151      	lsls	r1, r2, #5
 8006098:	69fa      	ldr	r2, [r7, #28]
 800609a:	440a      	add	r2, r1
 800609c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e4:	0cdb      	lsrs	r3, r3, #19
 80060e6:	04db      	lsls	r3, r3, #19
 80060e8:	6113      	str	r3, [r2, #16]
 80060ea:	e074      	b.n	80061d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006106:	0cdb      	lsrs	r3, r3, #19
 8006108:	04db      	lsls	r3, r3, #19
 800610a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006126:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800612a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800612e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	691a      	ldr	r2, [r3, #16]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6959      	ldr	r1, [r3, #20]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	440b      	add	r3, r1
 8006148:	1e59      	subs	r1, r3, #1
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006152:	04d9      	lsls	r1, r3, #19
 8006154:	4b9d      	ldr	r3, [pc, #628]	; (80063cc <USB_EPStartXfer+0x370>)
 8006156:	400b      	ands	r3, r1
 8006158:	69b9      	ldr	r1, [r7, #24]
 800615a:	0148      	lsls	r0, r1, #5
 800615c:	69f9      	ldr	r1, [r7, #28]
 800615e:	4401      	add	r1, r0
 8006160:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006164:	4313      	orrs	r3, r2
 8006166:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800617e:	69b9      	ldr	r1, [r7, #24]
 8006180:	0148      	lsls	r0, r1, #5
 8006182:	69f9      	ldr	r1, [r7, #28]
 8006184:	4401      	add	r1, r0
 8006186:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800618a:	4313      	orrs	r3, r2
 800618c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	78db      	ldrb	r3, [r3, #3]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d11f      	bne.n	80061d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	69fa      	ldr	r2, [r7, #28]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80061b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d14b      	bne.n	8006274 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d009      	beq.n	80061f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f0:	461a      	mov	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	78db      	ldrb	r3, [r3, #3]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d128      	bne.n	8006252 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620c:	2b00      	cmp	r3, #0
 800620e:	d110      	bne.n	8006232 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	440a      	add	r2, r1
 8006226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800622a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	e00f      	b.n	8006252 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	0151      	lsls	r1, r2, #5
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	440a      	add	r2, r1
 8006248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006250:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	440a      	add	r2, r1
 8006268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e12f      	b.n	80064d4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006292:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	78db      	ldrb	r3, [r3, #3]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d015      	beq.n	80062c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8117 	beq.w	80064d4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	2101      	movs	r1, #1
 80062b8:	fa01 f303 	lsl.w	r3, r1, r3
 80062bc:	69f9      	ldr	r1, [r7, #28]
 80062be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062c2:	4313      	orrs	r3, r2
 80062c4:	634b      	str	r3, [r1, #52]	; 0x34
 80062c6:	e105      	b.n	80064d4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d110      	bne.n	80062fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	e00f      	b.n	800631a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	440a      	add	r2, r1
 8006310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006318:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	68d9      	ldr	r1, [r3, #12]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	781a      	ldrb	r2, [r3, #0]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	b298      	uxth	r0, r3
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	4603      	mov	r3, r0
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fa2a 	bl	8006788 <USB_WritePacket>
 8006334:	e0ce      	b.n	80064d4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	440a      	add	r2, r1
 800634c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006350:	0cdb      	lsrs	r3, r3, #19
 8006352:	04db      	lsls	r3, r3, #19
 8006354:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	0151      	lsls	r1, r2, #5
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	440a      	add	r2, r1
 800636c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006370:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006374:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006378:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d126      	bne.n	80063d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006398:	69b9      	ldr	r1, [r7, #24]
 800639a:	0148      	lsls	r0, r1, #5
 800639c:	69f9      	ldr	r1, [r7, #28]
 800639e:	4401      	add	r1, r0
 80063a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063a4:	4313      	orrs	r3, r2
 80063a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063c6:	6113      	str	r3, [r2, #16]
 80063c8:	e036      	b.n	8006438 <USB_EPStartXfer+0x3dc>
 80063ca:	bf00      	nop
 80063cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	695a      	ldr	r2, [r3, #20]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	4413      	add	r3, r2
 80063da:	1e5a      	subs	r2, r3, #1
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	8afb      	ldrh	r3, [r7, #22]
 80063f6:	04d9      	lsls	r1, r3, #19
 80063f8:	4b39      	ldr	r3, [pc, #228]	; (80064e0 <USB_EPStartXfer+0x484>)
 80063fa:	400b      	ands	r3, r1
 80063fc:	69b9      	ldr	r1, [r7, #24]
 80063fe:	0148      	lsls	r0, r1, #5
 8006400:	69f9      	ldr	r1, [r7, #28]
 8006402:	4401      	add	r1, r0
 8006404:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006408:	4313      	orrs	r3, r2
 800640a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	8af9      	ldrh	r1, [r7, #22]
 8006420:	fb01 f303 	mul.w	r3, r1, r3
 8006424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006428:	69b9      	ldr	r1, [r7, #24]
 800642a:	0148      	lsls	r0, r1, #5
 800642c:	69f9      	ldr	r1, [r7, #28]
 800642e:	4401      	add	r1, r0
 8006430:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006434:	4313      	orrs	r3, r2
 8006436:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d10d      	bne.n	800645a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	68d9      	ldr	r1, [r3, #12]
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006456:	460a      	mov	r2, r1
 8006458:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	78db      	ldrb	r3, [r3, #3]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d128      	bne.n	80064b4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646e:	2b00      	cmp	r3, #0
 8006470:	d110      	bne.n	8006494 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	440a      	add	r2, r1
 8006488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	e00f      	b.n	80064b4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	1ff80000 	.word	0x1ff80000

080064e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b01      	cmp	r3, #1
 8006502:	f040 80cd 	bne.w	80066a0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d132      	bne.n	8006574 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	440a      	add	r2, r1
 8006524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006528:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800652c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006530:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006550:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	440a      	add	r2, r1
 8006568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656c:	0cdb      	lsrs	r3, r3, #19
 800656e:	04db      	lsls	r3, r3, #19
 8006570:	6113      	str	r3, [r2, #16]
 8006572:	e04e      	b.n	8006612 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658e:	0cdb      	lsrs	r3, r3, #19
 8006590:	04db      	lsls	r3, r3, #19
 8006592:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d903      	bls.n	80065cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f8:	691a      	ldr	r2, [r3, #16]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006602:	6939      	ldr	r1, [r7, #16]
 8006604:	0148      	lsls	r0, r1, #5
 8006606:	6979      	ldr	r1, [r7, #20]
 8006608:	4401      	add	r1, r0
 800660a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800660e:	4313      	orrs	r3, r2
 8006610:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006612:	79fb      	ldrb	r3, [r7, #7]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d11e      	bne.n	8006656 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d009      	beq.n	8006634 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	461a      	mov	r2, r3
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	440a      	add	r2, r1
 800664a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800664e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	e092      	b.n	800677c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	440a      	add	r2, r1
 800666c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006670:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006674:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d07e      	beq.n	800677c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	2101      	movs	r1, #1
 8006690:	fa01 f303 	lsl.w	r3, r1, r3
 8006694:	6979      	ldr	r1, [r7, #20]
 8006696:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800669a:	4313      	orrs	r3, r2
 800669c:	634b      	str	r3, [r1, #52]	; 0x34
 800669e:	e06d      	b.n	800677c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ba:	0cdb      	lsrs	r3, r3, #19
 80066bc:	04db      	lsls	r3, r3, #19
 80066be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	0151      	lsls	r1, r2, #5
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	440a      	add	r2, r1
 80066d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066e2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	0151      	lsls	r1, r2, #5
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	440a      	add	r2, r1
 800670a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800670e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006712:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672a:	6939      	ldr	r1, [r7, #16]
 800672c:	0148      	lsls	r0, r1, #5
 800672e:	6979      	ldr	r1, [r7, #20]
 8006730:	4401      	add	r1, r0
 8006732:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006736:	4313      	orrs	r3, r2
 8006738:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d10d      	bne.n	800675c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d009      	beq.n	800675c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	68d9      	ldr	r1, [r3, #12]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006758:	460a      	mov	r2, r1
 800675a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	0151      	lsls	r1, r2, #5
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	440a      	add	r2, r1
 8006772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006776:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800677a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006788:	b480      	push	{r7}
 800678a:	b089      	sub	sp, #36	; 0x24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4611      	mov	r1, r2
 8006794:	461a      	mov	r2, r3
 8006796:	460b      	mov	r3, r1
 8006798:	71fb      	strb	r3, [r7, #7]
 800679a:	4613      	mov	r3, r2
 800679c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80067a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d11a      	bne.n	80067e4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067ae:	88bb      	ldrh	r3, [r7, #4]
 80067b0:	3303      	adds	r3, #3
 80067b2:	089b      	lsrs	r3, r3, #2
 80067b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067b6:	2300      	movs	r3, #0
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	e00f      	b.n	80067dc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	031a      	lsls	r2, r3, #12
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c8:	461a      	mov	r2, r3
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	3304      	adds	r3, #4
 80067d4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	3301      	adds	r3, #1
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d3eb      	bcc.n	80067bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3724      	adds	r7, #36	; 0x24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr

080067f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b089      	sub	sp, #36	; 0x24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	3303      	adds	r3, #3
 800680a:	089b      	lsrs	r3, r3, #2
 800680c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800680e:	2300      	movs	r3, #0
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	e00b      	b.n	800682c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	3304      	adds	r3, #4
 8006824:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	3301      	adds	r3, #1
 800682a:	61bb      	str	r3, [r7, #24]
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	429a      	cmp	r2, r3
 8006832:	d3ef      	bcc.n	8006814 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006834:	69fb      	ldr	r3, [r7, #28]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3724      	adds	r7, #36	; 0x24
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr

08006840 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d12c      	bne.n	80068b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	db12      	blt.n	8006894 <USB_EPSetStall+0x54>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00f      	beq.n	8006894 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006892:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	e02b      	b.n	800690e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	db12      	blt.n	80068ee <USB_EPSetStall+0xae>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00f      	beq.n	80068ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800690c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	bc80      	pop	{r7}
 8006918:	4770      	bx	lr

0800691a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800691a:	b480      	push	{r7}
 800691c:	b085      	sub	sp, #20
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	785b      	ldrb	r3, [r3, #1]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d128      	bne.n	8006988 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	440a      	add	r2, r1
 800694c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006950:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006954:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	78db      	ldrb	r3, [r3, #3]
 800695a:	2b03      	cmp	r3, #3
 800695c:	d003      	beq.n	8006966 <USB_EPClearStall+0x4c>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	78db      	ldrb	r3, [r3, #3]
 8006962:	2b02      	cmp	r3, #2
 8006964:	d138      	bne.n	80069d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	0151      	lsls	r1, r2, #5
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	440a      	add	r2, r1
 800697c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	e027      	b.n	80069d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	0151      	lsls	r1, r2, #5
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	440a      	add	r2, r1
 800699e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	78db      	ldrb	r3, [r3, #3]
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d003      	beq.n	80069b8 <USB_EPClearStall+0x9e>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	78db      	ldrb	r3, [r3, #3]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d10f      	bne.n	80069d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a18:	68f9      	ldr	r1, [r7, #12]
 8006a1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr

08006a2e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a48:	f023 0303 	bic.w	r3, r3, #3
 8006a4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a5c:	f023 0302 	bic.w	r3, r3, #2
 8006a60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr

08006a6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a88:	f023 0303 	bic.w	r3, r3, #3
 8006a8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a9c:	f043 0302 	orr.w	r3, r3, #2
 8006aa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr

08006aae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	4013      	ands	r3, r2
 8006af4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	0c1b      	lsrs	r3, r3, #16
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	4013      	ands	r3, r2
 8006b26:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	b29b      	uxth	r3, r3
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr

08006b36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4013      	ands	r3, r2
 8006b62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b64:	68bb      	ldr	r3, [r7, #8]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b92:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba0:	01db      	lsls	r3, r3, #7
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr

08006bca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr

08006be4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c02:	f023 0307 	bic.w	r3, r3, #7
 8006c06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	460b      	mov	r3, r1
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	333c      	adds	r3, #60	; 0x3c
 8006c3e:	3304      	adds	r3, #4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	4a25      	ldr	r2, [pc, #148]	; (8006cdc <USB_EP0_OutStart+0xb4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d90a      	bls.n	8006c62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c5c:	d101      	bne.n	8006c62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e037      	b.n	8006cd2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c68:	461a      	mov	r2, r3
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c90:	f043 0318 	orr.w	r3, r3, #24
 8006c94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ca8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006caa:	7afb      	ldrb	r3, [r7, #11]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d10f      	bne.n	8006cd0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006cce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr
 8006cdc:	4f54300a 	.word	0x4f54300a

08006ce0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4a12      	ldr	r2, [pc, #72]	; (8006d40 <USB_CoreReset+0x60>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d901      	bls.n	8006cfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e01b      	b.n	8006d36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	daf2      	bge.n	8006cec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f043 0201 	orr.w	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4a08      	ldr	r2, [pc, #32]	; (8006d40 <USB_CoreReset+0x60>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d901      	bls.n	8006d28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e006      	b.n	8006d36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d0f0      	beq.n	8006d16 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr
 8006d40:	00030d40 	.word	0x00030d40

08006d44 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006d4c:	4a03      	ldr	r2, [pc, #12]	; (8006d5c <LL_SetSystemCoreClock+0x18>)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6013      	str	r3, [r2, #0]
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr
 8006d5c:	20000000 	.word	0x20000000

08006d60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	7c1b      	ldrb	r3, [r3, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d115      	bne.n	8006da4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	2181      	movs	r1, #129	; 0x81
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 fece 	bl	8008b22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d90:	2202      	movs	r2, #2
 8006d92:	2101      	movs	r1, #1
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fec4 	bl	8008b22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006da2:	e012      	b.n	8006dca <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006da4:	2340      	movs	r3, #64	; 0x40
 8006da6:	2202      	movs	r2, #2
 8006da8:	2181      	movs	r1, #129	; 0x81
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 feb9 	bl	8008b22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006db6:	2340      	movs	r3, #64	; 0x40
 8006db8:	2202      	movs	r2, #2
 8006dba:	2101      	movs	r1, #1
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 feb0 	bl	8008b22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006dca:	2308      	movs	r3, #8
 8006dcc:	2203      	movs	r2, #3
 8006dce:	2182      	movs	r1, #130	; 0x82
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 fea6 	bl	8008b22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ddc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006de0:	f002 f81c 	bl	8008e1c <malloc>
 8006de4:	4603      	mov	r3, r0
 8006de6:	461a      	mov	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	e026      	b.n	8006e4c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e04:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	7c1b      	ldrb	r3, [r3, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d109      	bne.n	8006e3c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e32:	2101      	movs	r1, #1
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 ff64 	bl	8008d02 <USBD_LL_PrepareReceive>
 8006e3a:	e007      	b.n	8006e4c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e42:	2340      	movs	r3, #64	; 0x40
 8006e44:	2101      	movs	r1, #1
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 ff5b 	bl	8008d02 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e66:	2181      	movs	r1, #129	; 0x81
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 fe80 	bl	8008b6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e74:	2101      	movs	r1, #1
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 fe79 	bl	8008b6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e84:	2182      	movs	r1, #130	; 0x82
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 fe71 	bl	8008b6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00e      	beq.n	8006eba <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 ffbd 	bl	8008e2c <free>
    pdev->pClassData = NULL;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d039      	beq.n	8006f62 <USBD_CDC_Setup+0x9e>
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d17c      	bne.n	8006fec <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	88db      	ldrh	r3, [r3, #6]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d029      	beq.n	8006f4e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b25b      	sxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	da11      	bge.n	8006f28 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006f10:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	88d2      	ldrh	r2, [r2, #6]
 8006f16:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f18:	6939      	ldr	r1, [r7, #16]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	88db      	ldrh	r3, [r3, #6]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 fa03 	bl	800832c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006f26:	e068      	b.n	8006ffa <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	785a      	ldrb	r2, [r3, #1]
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	88db      	ldrh	r3, [r3, #6]
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f3e:	6939      	ldr	r1, [r7, #16]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	88db      	ldrh	r3, [r3, #6]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fa1e 	bl	8008388 <USBD_CtlPrepareRx>
      break;
 8006f4c:	e055      	b.n	8006ffa <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	7850      	ldrb	r0, [r2, #1]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	4798      	blx	r3
      break;
 8006f60:	e04b      	b.n	8006ffa <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	2b0a      	cmp	r3, #10
 8006f68:	d017      	beq.n	8006f9a <USBD_CDC_Setup+0xd6>
 8006f6a:	2b0b      	cmp	r3, #11
 8006f6c:	d029      	beq.n	8006fc2 <USBD_CDC_Setup+0xfe>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d133      	bne.n	8006fda <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d107      	bne.n	8006f8c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006f7c:	f107 030c 	add.w	r3, r7, #12
 8006f80:	2202      	movs	r2, #2
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 f9d1 	bl	800832c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f8a:	e02e      	b.n	8006fea <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 f962 	bl	8008258 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f94:	2302      	movs	r3, #2
 8006f96:	75fb      	strb	r3, [r7, #23]
          break;
 8006f98:	e027      	b.n	8006fea <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d107      	bne.n	8006fb4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fa4:	f107 030f 	add.w	r3, r7, #15
 8006fa8:	2201      	movs	r2, #1
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 f9bd 	bl	800832c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fb2:	e01a      	b.n	8006fea <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 f94e 	bl	8008258 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	75fb      	strb	r3, [r7, #23]
          break;
 8006fc0:	e013      	b.n	8006fea <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d00d      	beq.n	8006fe8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f001 f942 	bl	8008258 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006fd8:	e006      	b.n	8006fe8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 f93b 	bl	8008258 <USBD_CtlError>
          ret = USBD_FAIL;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe6:	e000      	b.n	8006fea <USBD_CDC_Setup+0x126>
          break;
 8006fe8:	bf00      	nop
      }
      break;
 8006fea:	e006      	b.n	8006ffa <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 f932 	bl	8008258 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff8:	bf00      	nop
  }

  return ret;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007016:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800701e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d03a      	beq.n	80070a0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800702a:	78fa      	ldrb	r2, [r7, #3]
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	331c      	adds	r3, #28
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d029      	beq.n	8007094 <USBD_CDC_DataIn+0x90>
 8007040:	78fa      	ldrb	r2, [r7, #3]
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	331c      	adds	r3, #28
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	78f9      	ldrb	r1, [r7, #3]
 8007054:	68b8      	ldr	r0, [r7, #8]
 8007056:	460b      	mov	r3, r1
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	1a5b      	subs	r3, r3, r1
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4403      	add	r3, r0
 8007060:	3344      	adds	r3, #68	; 0x44
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	fbb2 f1f3 	udiv	r1, r2, r3
 8007068:	fb03 f301 	mul.w	r3, r3, r1
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d110      	bne.n	8007094 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007072:	78fa      	ldrb	r2, [r7, #3]
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	440b      	add	r3, r1
 8007080:	331c      	adds	r3, #28
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007086:	78f9      	ldrb	r1, [r7, #3]
 8007088:	2300      	movs	r3, #0
 800708a:	2200      	movs	r2, #0
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 fe15 	bl	8008cbc <USBD_LL_Transmit>
 8007092:	e003      	b.n	800709c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	e000      	b.n	80070a2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80070a0:	2302      	movs	r3, #2
  }
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	460b      	mov	r3, r1
 80070b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 fe40 	bl	8008d48 <USBD_LL_GetRxDataSize>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00d      	beq.n	80070f6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070ee:	4611      	mov	r1, r2
 80070f0:	4798      	blx	r3

    return USBD_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e000      	b.n	80070f8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80070f6:	2302      	movs	r3, #2
  }
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007116:	2b00      	cmp	r3, #0
 8007118:	d015      	beq.n	8007146 <USBD_CDC_EP0_RxReady+0x46>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007120:	2bff      	cmp	r3, #255	; 0xff
 8007122:	d010      	beq.n	8007146 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007132:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800713a:	b292      	uxth	r2, r2
 800713c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	22ff      	movs	r2, #255	; 0xff
 8007142:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2243      	movs	r2, #67	; 0x43
 800715c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800715e:	4b03      	ldr	r3, [pc, #12]	; (800716c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20000094 	.word	0x20000094

08007170 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2243      	movs	r2, #67	; 0x43
 800717c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800717e:	4b03      	ldr	r3, [pc, #12]	; (800718c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000050 	.word	0x20000050

08007190 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2243      	movs	r2, #67	; 0x43
 800719c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800719e:	4b03      	ldr	r3, [pc, #12]	; (80071ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	200000d8 	.word	0x200000d8

080071b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	220a      	movs	r2, #10
 80071bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80071be:	4b03      	ldr	r3, [pc, #12]	; (80071cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bc80      	pop	{r7}
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	2000000c 	.word	0x2000000c

080071d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80071da:	2302      	movs	r3, #2
 80071dc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr

080071fc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	4613      	mov	r3, r2
 8007208:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007210:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800721a:	88fa      	ldrh	r2, [r7, #6]
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	371c      	adds	r7, #28
 8007228:	46bd      	mov	sp, r7
 800722a:	bc80      	pop	{r7}
 800722c:	4770      	bx	lr

0800722e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr

08007254 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007262:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d017      	beq.n	800729e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	7c1b      	ldrb	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800727c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007280:	2101      	movs	r1, #1
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fd3d 	bl	8008d02 <USBD_LL_PrepareReceive>
 8007288:	e007      	b.n	800729a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007290:	2340      	movs	r3, #64	; 0x40
 8007292:	2101      	movs	r1, #1
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 fd34 	bl	8008d02 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	e000      	b.n	80072a0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800729e:	2302      	movs	r3, #2
  }
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80072bc:	2302      	movs	r3, #2
 80072be:	e01a      	b.n	80072f6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	79fa      	ldrb	r2, [r7, #7]
 80072ec:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f001 fbb2 	bl	8008a58 <USBD_LL_Init>

  return USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072fe:	b480      	push	{r7}
 8007300:	b085      	sub	sp, #20
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d006      	beq.n	8007320 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]
 800731e:	e001      	b.n	8007324 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007320:	2302      	movs	r3, #2
 8007322:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr

08007330 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 fbd7 	bl	8008aec <USBD_LL_Start>

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr

0800735c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007368:	2302      	movs	r3, #2
 800736a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00c      	beq.n	8007390 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	4611      	mov	r1, r2
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	460b      	mov	r3, r1
 80073a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	4611      	mov	r1, r2
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3

  return USBD_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 ff04 	bl	80081e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80073f4:	f003 031f 	and.w	r3, r3, #31
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d00c      	beq.n	8007416 <USBD_LL_SetupStage+0x56>
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d302      	bcc.n	8007406 <USBD_LL_SetupStage+0x46>
 8007400:	2b02      	cmp	r3, #2
 8007402:	d010      	beq.n	8007426 <USBD_LL_SetupStage+0x66>
 8007404:	e017      	b.n	8007436 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa04 	bl	800781c <USBD_StdDevReq>
      break;
 8007414:	e01a      	b.n	800744c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa66 	bl	80078f0 <USBD_StdItfReq>
      break;
 8007424:	e012      	b.n	800744c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 faa4 	bl	800797c <USBD_StdEPReq>
      break;
 8007434:	e00a      	b.n	800744c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800743c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007440:	b2db      	uxtb	r3, r3
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 fbb1 	bl	8008bac <USBD_LL_StallEP>
      break;
 800744a:	bf00      	nop
  }

  return USBD_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b086      	sub	sp, #24
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	460b      	mov	r3, r1
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d14b      	bne.n	8007502 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007470:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007478:	2b03      	cmp	r3, #3
 800747a:	d134      	bne.n	80074e6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	429a      	cmp	r2, r3
 8007486:	d919      	bls.n	80074bc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	68da      	ldr	r2, [r3, #12]
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	1ad2      	subs	r2, r2, r3
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800749e:	429a      	cmp	r2, r3
 80074a0:	d203      	bcs.n	80074aa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	e002      	b.n	80074b0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 ff85 	bl	80083c4 <USBD_CtlContinueRx>
 80074ba:	e038      	b.n	800752e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d105      	bne.n	80074de <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 ff82 	bl	80083e8 <USBD_CtlSendStatus>
 80074e4:	e023      	b.n	800752e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074ec:	2b05      	cmp	r3, #5
 80074ee:	d11e      	bne.n	800752e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80074f8:	2100      	movs	r1, #0
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f001 fb56 	bl	8008bac <USBD_LL_StallEP>
 8007500:	e015      	b.n	800752e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00d      	beq.n	800752a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007514:	2b03      	cmp	r3, #3
 8007516:	d108      	bne.n	800752a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	7afa      	ldrb	r2, [r7, #11]
 8007522:	4611      	mov	r1, r2
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	4798      	blx	r3
 8007528:	e001      	b.n	800752e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800752a:	2302      	movs	r3, #2
 800752c:	e000      	b.n	8007530 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	460b      	mov	r3, r1
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007546:	7afb      	ldrb	r3, [r7, #11]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d17f      	bne.n	800764c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3314      	adds	r3, #20
 8007550:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007558:	2b02      	cmp	r3, #2
 800755a:	d15c      	bne.n	8007616 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	429a      	cmp	r2, r3
 8007566:	d915      	bls.n	8007594 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	1ad2      	subs	r2, r2, r3
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	b29b      	uxth	r3, r3
 800757c:	461a      	mov	r2, r3
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 feef 	bl	8008364 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007586:	2300      	movs	r3, #0
 8007588:	2200      	movs	r2, #0
 800758a:	2100      	movs	r1, #0
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f001 fbb8 	bl	8008d02 <USBD_LL_PrepareReceive>
 8007592:	e04e      	b.n	8007632 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	6912      	ldr	r2, [r2, #16]
 800759c:	fbb3 f1f2 	udiv	r1, r3, r2
 80075a0:	fb02 f201 	mul.w	r2, r2, r1
 80075a4:	1a9b      	subs	r3, r3, r2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d11c      	bne.n	80075e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d316      	bcc.n	80075e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d20f      	bcs.n	80075e4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075c4:	2200      	movs	r2, #0
 80075c6:	2100      	movs	r1, #0
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 fecb 	bl	8008364 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075d6:	2300      	movs	r3, #0
 80075d8:	2200      	movs	r2, #0
 80075da:	2100      	movs	r1, #0
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f001 fb90 	bl	8008d02 <USBD_LL_PrepareReceive>
 80075e2:	e026      	b.n	8007632 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d105      	bne.n	8007606 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007606:	2180      	movs	r1, #128	; 0x80
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f001 facf 	bl	8008bac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 fefd 	bl	800840e <USBD_CtlReceiveStatus>
 8007614:	e00d      	b.n	8007632 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800761c:	2b04      	cmp	r3, #4
 800761e:	d004      	beq.n	800762a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800762a:	2180      	movs	r1, #128	; 0x80
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f001 fabd 	bl	8008bac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007638:	2b01      	cmp	r3, #1
 800763a:	d11d      	bne.n	8007678 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f7ff fe83 	bl	8007348 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800764a:	e015      	b.n	8007678 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00d      	beq.n	8007674 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800765e:	2b03      	cmp	r3, #3
 8007660:	d108      	bne.n	8007674 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	7afa      	ldrb	r2, [r7, #11]
 800766c:	4611      	mov	r1, r2
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	4798      	blx	r3
 8007672:	e001      	b.n	8007678 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007674:	2302      	movs	r3, #2
 8007676:	e000      	b.n	800767a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800768a:	2340      	movs	r3, #64	; 0x40
 800768c:	2200      	movs	r2, #0
 800768e:	2100      	movs	r1, #0
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 fa46 	bl	8008b22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2240      	movs	r2, #64	; 0x40
 80076a2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076a6:	2340      	movs	r3, #64	; 0x40
 80076a8:	2200      	movs	r2, #0
 80076aa:	2180      	movs	r1, #128	; 0x80
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 fa38 	bl	8008b22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2240      	movs	r2, #64	; 0x40
 80076bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d009      	beq.n	80076fa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6852      	ldr	r2, [r2, #4]
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	4611      	mov	r1, r2
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
  }

  return USBD_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	78fa      	ldrb	r2, [r7, #3]
 8007714:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	bc80      	pop	{r7}
 8007720:	4770      	bx	lr

08007722 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2204      	movs	r2, #4
 800773a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr

0800774a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007758:	2b04      	cmp	r3, #4
 800775a:	d105      	bne.n	8007768 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr

08007774 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007782:	2b03      	cmp	r3, #3
 8007784:	d10b      	bne.n	800779e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr

080077c0 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr

080077d8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr

080077ec <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6852      	ldr	r2, [r2, #4]
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	4611      	mov	r1, r2
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	4798      	blx	r3

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007832:	2b20      	cmp	r3, #32
 8007834:	d004      	beq.n	8007840 <USBD_StdDevReq+0x24>
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d002      	beq.n	8007840 <USBD_StdDevReq+0x24>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d008      	beq.n	8007850 <USBD_StdDevReq+0x34>
 800783e:	e04c      	b.n	80078da <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
      break;
 800784e:	e049      	b.n	80078e4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	2b09      	cmp	r3, #9
 8007856:	d83a      	bhi.n	80078ce <USBD_StdDevReq+0xb2>
 8007858:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <USBD_StdDevReq+0x44>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	080078b1 	.word	0x080078b1
 8007864:	080078c5 	.word	0x080078c5
 8007868:	080078cf 	.word	0x080078cf
 800786c:	080078bb 	.word	0x080078bb
 8007870:	080078cf 	.word	0x080078cf
 8007874:	08007893 	.word	0x08007893
 8007878:	08007889 	.word	0x08007889
 800787c:	080078cf 	.word	0x080078cf
 8007880:	080078a7 	.word	0x080078a7
 8007884:	0800789d 	.word	0x0800789d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9d4 	bl	8007c38 <USBD_GetDescriptor>
          break;
 8007890:	e022      	b.n	80078d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fb37 	bl	8007f08 <USBD_SetAddress>
          break;
 800789a:	e01d      	b.n	80078d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fb74 	bl	8007f8c <USBD_SetConfig>
          break;
 80078a4:	e018      	b.n	80078d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fbfd 	bl	80080a8 <USBD_GetConfig>
          break;
 80078ae:	e013      	b.n	80078d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fc2c 	bl	8008110 <USBD_GetStatus>
          break;
 80078b8:	e00e      	b.n	80078d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc5a 	bl	8008176 <USBD_SetFeature>
          break;
 80078c2:	e009      	b.n	80078d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fc69 	bl	800819e <USBD_ClrFeature>
          break;
 80078cc:	e004      	b.n	80078d8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fcc1 	bl	8008258 <USBD_CtlError>
          break;
 80078d6:	bf00      	nop
      }
      break;
 80078d8:	e004      	b.n	80078e4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fcbb 	bl	8008258 <USBD_CtlError>
      break;
 80078e2:	bf00      	nop
  }

  return ret;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop

080078f0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007906:	2b20      	cmp	r3, #32
 8007908:	d003      	beq.n	8007912 <USBD_StdItfReq+0x22>
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d001      	beq.n	8007912 <USBD_StdItfReq+0x22>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d12a      	bne.n	8007968 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007918:	3b01      	subs	r3, #1
 800791a:	2b02      	cmp	r3, #2
 800791c:	d81d      	bhi.n	800795a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	889b      	ldrh	r3, [r3, #4]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b01      	cmp	r3, #1
 8007926:	d813      	bhi.n	8007950 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	88db      	ldrh	r3, [r3, #6]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d110      	bne.n	8007964 <USBD_StdItfReq+0x74>
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10d      	bne.n	8007964 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fd4d 	bl	80083e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800794e:	e009      	b.n	8007964 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fc80 	bl	8008258 <USBD_CtlError>
          break;
 8007958:	e004      	b.n	8007964 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc7b 	bl	8008258 <USBD_CtlError>
          break;
 8007962:	e000      	b.n	8007966 <USBD_StdItfReq+0x76>
          break;
 8007964:	bf00      	nop
      }
      break;
 8007966:	e004      	b.n	8007972 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fc74 	bl	8008258 <USBD_CtlError>
      break;
 8007970:	bf00      	nop
  }

  return USBD_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	889b      	ldrh	r3, [r3, #4]
 800798e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007998:	2b20      	cmp	r3, #32
 800799a:	d004      	beq.n	80079a6 <USBD_StdEPReq+0x2a>
 800799c:	2b40      	cmp	r3, #64	; 0x40
 800799e:	d002      	beq.n	80079a6 <USBD_StdEPReq+0x2a>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <USBD_StdEPReq+0x3a>
 80079a4:	e13d      	b.n	8007c22 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
      break;
 80079b4:	e13a      	b.n	8007c2c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d10a      	bne.n	80079d8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	e12a      	b.n	8007c2e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d03e      	beq.n	8007a5e <USBD_StdEPReq+0xe2>
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d002      	beq.n	80079ea <USBD_StdEPReq+0x6e>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d070      	beq.n	8007aca <USBD_StdEPReq+0x14e>
 80079e8:	e115      	b.n	8007c16 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d002      	beq.n	80079fa <USBD_StdEPReq+0x7e>
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d015      	beq.n	8007a24 <USBD_StdEPReq+0xa8>
 80079f8:	e02b      	b.n	8007a52 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00c      	beq.n	8007a1a <USBD_StdEPReq+0x9e>
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b80      	cmp	r3, #128	; 0x80
 8007a04:	d009      	beq.n	8007a1a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 f8ce 	bl	8008bac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a10:	2180      	movs	r1, #128	; 0x80
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 f8ca 	bl	8008bac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a18:	e020      	b.n	8007a5c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fc1b 	bl	8008258 <USBD_CtlError>
              break;
 8007a22:	e01b      	b.n	8007a5c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	885b      	ldrh	r3, [r3, #2]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10e      	bne.n	8007a4a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00b      	beq.n	8007a4a <USBD_StdEPReq+0xce>
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	2b80      	cmp	r3, #128	; 0x80
 8007a36:	d008      	beq.n	8007a4a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	88db      	ldrh	r3, [r3, #6]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d104      	bne.n	8007a4a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 f8b1 	bl	8008bac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fccc 	bl	80083e8 <USBD_CtlSendStatus>

              break;
 8007a50:	e004      	b.n	8007a5c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fbff 	bl	8008258 <USBD_CtlError>
              break;
 8007a5a:	bf00      	nop
          }
          break;
 8007a5c:	e0e0      	b.n	8007c20 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d002      	beq.n	8007a6e <USBD_StdEPReq+0xf2>
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d015      	beq.n	8007a98 <USBD_StdEPReq+0x11c>
 8007a6c:	e026      	b.n	8007abc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00c      	beq.n	8007a8e <USBD_StdEPReq+0x112>
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b80      	cmp	r3, #128	; 0x80
 8007a78:	d009      	beq.n	8007a8e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 f894 	bl	8008bac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a84:	2180      	movs	r1, #128	; 0x80
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 f890 	bl	8008bac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a8c:	e01c      	b.n	8007ac8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fbe1 	bl	8008258 <USBD_CtlError>
              break;
 8007a96:	e017      	b.n	8007ac8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	885b      	ldrh	r3, [r3, #2]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d112      	bne.n	8007ac6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 f89b 	bl	8008bea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fc97 	bl	80083e8 <USBD_CtlSendStatus>
              }
              break;
 8007aba:	e004      	b.n	8007ac6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fbca 	bl	8008258 <USBD_CtlError>
              break;
 8007ac4:	e000      	b.n	8007ac8 <USBD_StdEPReq+0x14c>
              break;
 8007ac6:	bf00      	nop
          }
          break;
 8007ac8:	e0aa      	b.n	8007c20 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d002      	beq.n	8007ada <USBD_StdEPReq+0x15e>
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d032      	beq.n	8007b3e <USBD_StdEPReq+0x1c2>
 8007ad8:	e097      	b.n	8007c0a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <USBD_StdEPReq+0x174>
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b80      	cmp	r3, #128	; 0x80
 8007ae4:	d004      	beq.n	8007af0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fbb5 	bl	8008258 <USBD_CtlError>
                break;
 8007aee:	e091      	b.n	8007c14 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007af0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	da0b      	bge.n	8007b10 <USBD_StdEPReq+0x194>
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	3310      	adds	r3, #16
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	e00b      	b.n	8007b28 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b16:	4613      	mov	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	4413      	add	r3, r2
 8007b26:	3304      	adds	r3, #4
 8007b28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2202      	movs	r2, #2
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fbf8 	bl	800832c <USBD_CtlSendData>
              break;
 8007b3c:	e06a      	b.n	8007c14 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	da11      	bge.n	8007b6a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	f003 020f 	and.w	r2, r3, #15
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	3318      	adds	r3, #24
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d117      	bne.n	8007b90 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fb78 	bl	8008258 <USBD_CtlError>
                  break;
 8007b68:	e054      	b.n	8007c14 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	f003 020f 	and.w	r2, r3, #15
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d104      	bne.n	8007b90 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fb65 	bl	8008258 <USBD_CtlError>
                  break;
 8007b8e:	e041      	b.n	8007c14 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da0b      	bge.n	8007bb0 <USBD_StdEPReq+0x234>
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	3310      	adds	r3, #16
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	4413      	add	r3, r2
 8007bac:	3304      	adds	r3, #4
 8007bae:	e00b      	b.n	8007bc8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <USBD_StdEPReq+0x25a>
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	2b80      	cmp	r3, #128	; 0x80
 8007bd4:	d103      	bne.n	8007bde <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e00e      	b.n	8007bfc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f001 f820 	bl	8008c28 <USBD_LL_IsStallEP>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	e002      	b.n	8007bfc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fb92 	bl	800832c <USBD_CtlSendData>
              break;
 8007c08:	e004      	b.n	8007c14 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fb23 	bl	8008258 <USBD_CtlError>
              break;
 8007c12:	bf00      	nop
          }
          break;
 8007c14:	e004      	b.n	8007c20 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fb1d 	bl	8008258 <USBD_CtlError>
          break;
 8007c1e:	bf00      	nop
      }
      break;
 8007c20:	e004      	b.n	8007c2c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fb17 	bl	8008258 <USBD_CtlError>
      break;
 8007c2a:	bf00      	nop
  }

  return ret;
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	885b      	ldrh	r3, [r3, #2]
 8007c52:	0a1b      	lsrs	r3, r3, #8
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	3b01      	subs	r3, #1
 8007c58:	2b06      	cmp	r3, #6
 8007c5a:	f200 8128 	bhi.w	8007eae <USBD_GetDescriptor+0x276>
 8007c5e:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <USBD_GetDescriptor+0x2c>)
 8007c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c64:	08007c81 	.word	0x08007c81
 8007c68:	08007c99 	.word	0x08007c99
 8007c6c:	08007cd9 	.word	0x08007cd9
 8007c70:	08007eaf 	.word	0x08007eaf
 8007c74:	08007eaf 	.word	0x08007eaf
 8007c78:	08007e4f 	.word	0x08007e4f
 8007c7c:	08007e7b 	.word	0x08007e7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	7c12      	ldrb	r2, [r2, #16]
 8007c8c:	f107 0108 	add.w	r1, r7, #8
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
 8007c94:	60f8      	str	r0, [r7, #12]
      break;
 8007c96:	e112      	b.n	8007ebe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	7c1b      	ldrb	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10d      	bne.n	8007cbc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	f107 0208 	add.w	r2, r7, #8
 8007cac:	4610      	mov	r0, r2
 8007cae:	4798      	blx	r3
 8007cb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cba:	e100      	b.n	8007ebe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	f107 0208 	add.w	r2, r7, #8
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
 8007ccc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	701a      	strb	r2, [r3, #0]
      break;
 8007cd6:	e0f2      	b.n	8007ebe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	885b      	ldrh	r3, [r3, #2]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b05      	cmp	r3, #5
 8007ce0:	f200 80ac 	bhi.w	8007e3c <USBD_GetDescriptor+0x204>
 8007ce4:	a201      	add	r2, pc, #4	; (adr r2, 8007cec <USBD_GetDescriptor+0xb4>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007d05 	.word	0x08007d05
 8007cf0:	08007d39 	.word	0x08007d39
 8007cf4:	08007d6d 	.word	0x08007d6d
 8007cf8:	08007da1 	.word	0x08007da1
 8007cfc:	08007dd5 	.word	0x08007dd5
 8007d00:	08007e09 	.word	0x08007e09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00b      	beq.n	8007d28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	7c12      	ldrb	r2, [r2, #16]
 8007d1c:	f107 0108 	add.w	r1, r7, #8
 8007d20:	4610      	mov	r0, r2
 8007d22:	4798      	blx	r3
 8007d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d26:	e091      	b.n	8007e4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa94 	bl	8008258 <USBD_CtlError>
            err++;
 8007d30:	7afb      	ldrb	r3, [r7, #11]
 8007d32:	3301      	adds	r3, #1
 8007d34:	72fb      	strb	r3, [r7, #11]
          break;
 8007d36:	e089      	b.n	8007e4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00b      	beq.n	8007d5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	7c12      	ldrb	r2, [r2, #16]
 8007d50:	f107 0108 	add.w	r1, r7, #8
 8007d54:	4610      	mov	r0, r2
 8007d56:	4798      	blx	r3
 8007d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d5a:	e077      	b.n	8007e4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa7a 	bl	8008258 <USBD_CtlError>
            err++;
 8007d64:	7afb      	ldrb	r3, [r7, #11]
 8007d66:	3301      	adds	r3, #1
 8007d68:	72fb      	strb	r3, [r7, #11]
          break;
 8007d6a:	e06f      	b.n	8007e4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00b      	beq.n	8007d90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	7c12      	ldrb	r2, [r2, #16]
 8007d84:	f107 0108 	add.w	r1, r7, #8
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4798      	blx	r3
 8007d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d8e:	e05d      	b.n	8007e4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fa60 	bl	8008258 <USBD_CtlError>
            err++;
 8007d98:	7afb      	ldrb	r3, [r7, #11]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d9e:	e055      	b.n	8007e4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	7c12      	ldrb	r2, [r2, #16]
 8007db8:	f107 0108 	add.w	r1, r7, #8
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
 8007dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dc2:	e043      	b.n	8007e4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fa46 	bl	8008258 <USBD_CtlError>
            err++;
 8007dcc:	7afb      	ldrb	r3, [r7, #11]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007dd2:	e03b      	b.n	8007e4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7c12      	ldrb	r2, [r2, #16]
 8007dec:	f107 0108 	add.w	r1, r7, #8
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
 8007df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007df6:	e029      	b.n	8007e4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa2c 	bl	8008258 <USBD_CtlError>
            err++;
 8007e00:	7afb      	ldrb	r3, [r7, #11]
 8007e02:	3301      	adds	r3, #1
 8007e04:	72fb      	strb	r3, [r7, #11]
          break;
 8007e06:	e021      	b.n	8007e4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	7c12      	ldrb	r2, [r2, #16]
 8007e20:	f107 0108 	add.w	r1, r7, #8
 8007e24:	4610      	mov	r0, r2
 8007e26:	4798      	blx	r3
 8007e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e2a:	e00f      	b.n	8007e4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fa12 	bl	8008258 <USBD_CtlError>
            err++;
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	3301      	adds	r3, #1
 8007e38:	72fb      	strb	r3, [r7, #11]
          break;
 8007e3a:	e007      	b.n	8007e4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa0a 	bl	8008258 <USBD_CtlError>
          err++;
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	3301      	adds	r3, #1
 8007e48:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007e4a:	e038      	b.n	8007ebe <USBD_GetDescriptor+0x286>
 8007e4c:	e037      	b.n	8007ebe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	7c1b      	ldrb	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5e:	f107 0208 	add.w	r2, r7, #8
 8007e62:	4610      	mov	r0, r2
 8007e64:	4798      	blx	r3
 8007e66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e68:	e029      	b.n	8007ebe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f9f3 	bl	8008258 <USBD_CtlError>
        err++;
 8007e72:	7afb      	ldrb	r3, [r7, #11]
 8007e74:	3301      	adds	r3, #1
 8007e76:	72fb      	strb	r3, [r7, #11]
      break;
 8007e78:	e021      	b.n	8007ebe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7c1b      	ldrb	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10d      	bne.n	8007e9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8a:	f107 0208 	add.w	r2, r7, #8
 8007e8e:	4610      	mov	r0, r2
 8007e90:	4798      	blx	r3
 8007e92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3301      	adds	r3, #1
 8007e98:	2207      	movs	r2, #7
 8007e9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e9c:	e00f      	b.n	8007ebe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f9d9 	bl	8008258 <USBD_CtlError>
        err++;
 8007ea6:	7afb      	ldrb	r3, [r7, #11]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	72fb      	strb	r3, [r7, #11]
      break;
 8007eac:	e007      	b.n	8007ebe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f9d1 	bl	8008258 <USBD_CtlError>
      err++;
 8007eb6:	7afb      	ldrb	r3, [r7, #11]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	72fb      	strb	r3, [r7, #11]
      break;
 8007ebc:	bf00      	nop
  }

  if (err != 0U)
 8007ebe:	7afb      	ldrb	r3, [r7, #11]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d11c      	bne.n	8007efe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ec4:	893b      	ldrh	r3, [r7, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d011      	beq.n	8007eee <USBD_GetDescriptor+0x2b6>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	88db      	ldrh	r3, [r3, #6]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00d      	beq.n	8007eee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	88da      	ldrh	r2, [r3, #6]
 8007ed6:	893b      	ldrh	r3, [r7, #8]
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	bf28      	it	cs
 8007edc:	4613      	movcs	r3, r2
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ee2:	893b      	ldrh	r3, [r7, #8]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	68f9      	ldr	r1, [r7, #12]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fa1f 	bl	800832c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	88db      	ldrh	r3, [r3, #6]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d104      	bne.n	8007f00 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa76 	bl	80083e8 <USBD_CtlSendStatus>
 8007efc:	e000      	b.n	8007f00 <USBD_GetDescriptor+0x2c8>
    return;
 8007efe:	bf00      	nop
    }
  }
}
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop

08007f08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	889b      	ldrh	r3, [r3, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d130      	bne.n	8007f7c <USBD_SetAddress+0x74>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	88db      	ldrh	r3, [r3, #6]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d12c      	bne.n	8007f7c <USBD_SetAddress+0x74>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	885b      	ldrh	r3, [r3, #2]
 8007f26:	2b7f      	cmp	r3, #127	; 0x7f
 8007f28:	d828      	bhi.n	8007f7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	885b      	ldrh	r3, [r3, #2]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d104      	bne.n	8007f4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f988 	bl	8008258 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f48:	e01c      	b.n	8007f84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	7bfa      	ldrb	r2, [r7, #15]
 8007f4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fe91 	bl	8008c7e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fa43 	bl	80083e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f70:	e008      	b.n	8007f84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7a:	e003      	b.n	8007f84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f96a 	bl	8008258 <USBD_CtlError>
  }
}
 8007f84:	bf00      	nop
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	885b      	ldrh	r3, [r3, #2]
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	4b41      	ldr	r3, [pc, #260]	; (80080a4 <USBD_SetConfig+0x118>)
 8007f9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fa0:	4b40      	ldr	r3, [pc, #256]	; (80080a4 <USBD_SetConfig+0x118>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d904      	bls.n	8007fb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f954 	bl	8008258 <USBD_CtlError>
 8007fb0:	e075      	b.n	800809e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d002      	beq.n	8007fc2 <USBD_SetConfig+0x36>
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d023      	beq.n	8008008 <USBD_SetConfig+0x7c>
 8007fc0:	e062      	b.n	8008088 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007fc2:	4b38      	ldr	r3, [pc, #224]	; (80080a4 <USBD_SetConfig+0x118>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d01a      	beq.n	8008000 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007fca:	4b36      	ldr	r3, [pc, #216]	; (80080a4 <USBD_SetConfig+0x118>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2203      	movs	r2, #3
 8007fd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007fdc:	4b31      	ldr	r3, [pc, #196]	; (80080a4 <USBD_SetConfig+0x118>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff f9ba 	bl	800735c <USBD_SetClassConfig>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d104      	bne.n	8007ff8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f931 	bl	8008258 <USBD_CtlError>
            return;
 8007ff6:	e052      	b.n	800809e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f9f5 	bl	80083e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ffe:	e04e      	b.n	800809e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f9f1 	bl	80083e8 <USBD_CtlSendStatus>
        break;
 8008006:	e04a      	b.n	800809e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008008:	4b26      	ldr	r3, [pc, #152]	; (80080a4 <USBD_SetConfig+0x118>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d112      	bne.n	8008036 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008018:	4b22      	ldr	r3, [pc, #136]	; (80080a4 <USBD_SetConfig+0x118>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008022:	4b20      	ldr	r3, [pc, #128]	; (80080a4 <USBD_SetConfig+0x118>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff f9b6 	bl	800739a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f9da 	bl	80083e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008034:	e033      	b.n	800809e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008036:	4b1b      	ldr	r3, [pc, #108]	; (80080a4 <USBD_SetConfig+0x118>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d01d      	beq.n	8008080 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff f9a4 	bl	800739a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008052:	4b14      	ldr	r3, [pc, #80]	; (80080a4 <USBD_SetConfig+0x118>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800805c:	4b11      	ldr	r3, [pc, #68]	; (80080a4 <USBD_SetConfig+0x118>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff f97a 	bl	800735c <USBD_SetClassConfig>
 8008068:	4603      	mov	r3, r0
 800806a:	2b02      	cmp	r3, #2
 800806c:	d104      	bne.n	8008078 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f8f1 	bl	8008258 <USBD_CtlError>
            return;
 8008076:	e012      	b.n	800809e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f9b5 	bl	80083e8 <USBD_CtlSendStatus>
        break;
 800807e:	e00e      	b.n	800809e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f9b1 	bl	80083e8 <USBD_CtlSendStatus>
        break;
 8008086:	e00a      	b.n	800809e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f8e4 	bl	8008258 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008090:	4b04      	ldr	r3, [pc, #16]	; (80080a4 <USBD_SetConfig+0x118>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff f97f 	bl	800739a <USBD_ClrClassConfig>
        break;
 800809c:	bf00      	nop
    }
  }
}
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	200002e0 	.word	0x200002e0

080080a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	88db      	ldrh	r3, [r3, #6]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d004      	beq.n	80080c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f8cb 	bl	8008258 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080c2:	e021      	b.n	8008108 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	db17      	blt.n	80080fe <USBD_GetConfig+0x56>
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	dd02      	ble.n	80080d8 <USBD_GetConfig+0x30>
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d00b      	beq.n	80080ee <USBD_GetConfig+0x46>
 80080d6:	e012      	b.n	80080fe <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3308      	adds	r3, #8
 80080e2:	2201      	movs	r2, #1
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f920 	bl	800832c <USBD_CtlSendData>
        break;
 80080ec:	e00c      	b.n	8008108 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3304      	adds	r3, #4
 80080f2:	2201      	movs	r2, #1
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f918 	bl	800832c <USBD_CtlSendData>
        break;
 80080fc:	e004      	b.n	8008108 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f8a9 	bl	8008258 <USBD_CtlError>
        break;
 8008106:	bf00      	nop
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008120:	3b01      	subs	r3, #1
 8008122:	2b02      	cmp	r3, #2
 8008124:	d81e      	bhi.n	8008164 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	88db      	ldrh	r3, [r3, #6]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d004      	beq.n	8008138 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f891 	bl	8008258 <USBD_CtlError>
        break;
 8008136:	e01a      	b.n	800816e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f043 0202 	orr.w	r2, r3, #2
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	330c      	adds	r3, #12
 8008158:	2202      	movs	r2, #2
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8e5 	bl	800832c <USBD_CtlSendData>
      break;
 8008162:	e004      	b.n	800816e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f876 	bl	8008258 <USBD_CtlError>
      break;
 800816c:	bf00      	nop
  }
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	885b      	ldrh	r3, [r3, #2]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d106      	bne.n	8008196 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f929 	bl	80083e8 <USBD_CtlSendStatus>
  }
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ae:	3b01      	subs	r3, #1
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d80b      	bhi.n	80081cc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	885b      	ldrh	r3, [r3, #2]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d10c      	bne.n	80081d6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f90f 	bl	80083e8 <USBD_CtlSendStatus>
      }
      break;
 80081ca:	e004      	b.n	80081d6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f842 	bl	8008258 <USBD_CtlError>
      break;
 80081d4:	e000      	b.n	80081d8 <USBD_ClrFeature+0x3a>
      break;
 80081d6:	bf00      	nop
  }
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781a      	ldrb	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	785a      	ldrb	r2, [r3, #1]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	3302      	adds	r3, #2
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	b29a      	uxth	r2, r3
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	3303      	adds	r3, #3
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	b29b      	uxth	r3, r3
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	b29b      	uxth	r3, r3
 800820e:	4413      	add	r3, r2
 8008210:	b29a      	uxth	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	3304      	adds	r3, #4
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	b29a      	uxth	r2, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	3305      	adds	r3, #5
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	b29b      	uxth	r3, r3
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	b29b      	uxth	r3, r3
 800822a:	4413      	add	r3, r2
 800822c:	b29a      	uxth	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	3306      	adds	r3, #6
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	b29a      	uxth	r2, r3
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	3307      	adds	r3, #7
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	021b      	lsls	r3, r3, #8
 8008244:	b29b      	uxth	r3, r3
 8008246:	4413      	add	r3, r2
 8008248:	b29a      	uxth	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	80da      	strh	r2, [r3, #6]

}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	bc80      	pop	{r7}
 8008256:	4770      	bx	lr

08008258 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008262:	2180      	movs	r1, #128	; 0x80
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fca1 	bl	8008bac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800826a:	2100      	movs	r1, #0
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fc9d 	bl	8008bac <USBD_LL_StallEP>
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b086      	sub	sp, #24
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d032      	beq.n	80082f6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 f834 	bl	80082fe <USBD_GetLen>
 8008296:	4603      	mov	r3, r0
 8008298:	3301      	adds	r3, #1
 800829a:	b29b      	uxth	r3, r3
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	75fa      	strb	r2, [r7, #23]
 80082aa:	461a      	mov	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4413      	add	r3, r2
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	7812      	ldrb	r2, [r2, #0]
 80082b4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	75fa      	strb	r2, [r7, #23]
 80082bc:	461a      	mov	r2, r3
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4413      	add	r3, r2
 80082c2:	2203      	movs	r2, #3
 80082c4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80082c6:	e012      	b.n	80082ee <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	60fa      	str	r2, [r7, #12]
 80082ce:	7dfa      	ldrb	r2, [r7, #23]
 80082d0:	1c51      	adds	r1, r2, #1
 80082d2:	75f9      	strb	r1, [r7, #23]
 80082d4:	4611      	mov	r1, r2
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	440a      	add	r2, r1
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	75fa      	strb	r2, [r7, #23]
 80082e4:	461a      	mov	r2, r3
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	4413      	add	r3, r2
 80082ea:	2200      	movs	r2, #0
 80082ec:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e8      	bne.n	80082c8 <USBD_GetString+0x4e>
    }
  }
}
 80082f6:	bf00      	nop
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800830a:	e005      	b.n	8008318 <USBD_GetLen+0x1a>
  {
    len++;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	3301      	adds	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	3301      	adds	r3, #1
 8008316:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1f5      	bne.n	800830c <USBD_GetLen+0xe>
  }

  return len;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr

0800832c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	4613      	mov	r3, r2
 8008338:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2202      	movs	r2, #2
 800833e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008342:	88fa      	ldrh	r2, [r7, #6]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008348:	88fa      	ldrh	r2, [r7, #6]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800834e:	88fb      	ldrh	r3, [r7, #6]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	2100      	movs	r1, #0
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 fcb1 	bl	8008cbc <USBD_LL_Transmit>

  return USBD_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	2100      	movs	r1, #0
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fc9f 	bl	8008cbc <USBD_LL_Transmit>

  return USBD_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	4613      	mov	r3, r2
 8008394:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2203      	movs	r2, #3
 800839a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800839e:	88fa      	ldrh	r2, [r7, #6]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80083a6:	88fa      	ldrh	r2, [r7, #6]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083ae:	88fb      	ldrh	r3, [r7, #6]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	2100      	movs	r1, #0
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fca4 	bl	8008d02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	2100      	movs	r1, #0
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 fc92 	bl	8008d02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2204      	movs	r2, #4
 80083f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083f8:	2300      	movs	r3, #0
 80083fa:	2200      	movs	r2, #0
 80083fc:	2100      	movs	r1, #0
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fc5c 	bl	8008cbc <USBD_LL_Transmit>

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2205      	movs	r2, #5
 800841a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800841e:	2300      	movs	r3, #0
 8008420:	2200      	movs	r2, #0
 8008422:	2100      	movs	r1, #0
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fc6c 	bl	8008d02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008438:	2200      	movs	r2, #0
 800843a:	4912      	ldr	r1, [pc, #72]	; (8008484 <MX_USB_DEVICE_Init+0x50>)
 800843c:	4812      	ldr	r0, [pc, #72]	; (8008488 <MX_USB_DEVICE_Init+0x54>)
 800843e:	f7fe ff33 	bl	80072a8 <USBD_Init>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008448:	f7f9 f96e 	bl	8001728 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800844c:	490f      	ldr	r1, [pc, #60]	; (800848c <MX_USB_DEVICE_Init+0x58>)
 800844e:	480e      	ldr	r0, [pc, #56]	; (8008488 <MX_USB_DEVICE_Init+0x54>)
 8008450:	f7fe ff55 	bl	80072fe <USBD_RegisterClass>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800845a:	f7f9 f965 	bl	8001728 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800845e:	490c      	ldr	r1, [pc, #48]	; (8008490 <MX_USB_DEVICE_Init+0x5c>)
 8008460:	4809      	ldr	r0, [pc, #36]	; (8008488 <MX_USB_DEVICE_Init+0x54>)
 8008462:	f7fe feb5 	bl	80071d0 <USBD_CDC_RegisterInterface>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800846c:	f7f9 f95c 	bl	8001728 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008470:	4805      	ldr	r0, [pc, #20]	; (8008488 <MX_USB_DEVICE_Init+0x54>)
 8008472:	f7fe ff5d 	bl	8007330 <USBD_Start>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800847c:	f7f9 f954 	bl	8001728 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008480:	bf00      	nop
 8008482:	bd80      	pop	{r7, pc}
 8008484:	2000012c 	.word	0x2000012c
 8008488:	200003c8 	.word	0x200003c8
 800848c:	20000018 	.word	0x20000018
 8008490:	2000011c 	.word	0x2000011c

08008494 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008498:	2200      	movs	r2, #0
 800849a:	4905      	ldr	r1, [pc, #20]	; (80084b0 <CDC_Init_FS+0x1c>)
 800849c:	4805      	ldr	r0, [pc, #20]	; (80084b4 <CDC_Init_FS+0x20>)
 800849e:	f7fe fead 	bl	80071fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084a2:	4905      	ldr	r1, [pc, #20]	; (80084b8 <CDC_Init_FS+0x24>)
 80084a4:	4803      	ldr	r0, [pc, #12]	; (80084b4 <CDC_Init_FS+0x20>)
 80084a6:	f7fe fec2 	bl	800722e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000e8c 	.word	0x20000e8c
 80084b4:	200003c8 	.word	0x200003c8
 80084b8:	2000068c 	.word	0x2000068c

080084bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr
	...

080084cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	71fb      	strb	r3, [r7, #7]
 80084d8:	4613      	mov	r3, r2
 80084da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084dc:	79fb      	ldrb	r3, [r7, #7]
 80084de:	2b23      	cmp	r3, #35	; 0x23
 80084e0:	d84a      	bhi.n	8008578 <CDC_Control_FS+0xac>
 80084e2:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <CDC_Control_FS+0x1c>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	08008579 	.word	0x08008579
 80084ec:	08008579 	.word	0x08008579
 80084f0:	08008579 	.word	0x08008579
 80084f4:	08008579 	.word	0x08008579
 80084f8:	08008579 	.word	0x08008579
 80084fc:	08008579 	.word	0x08008579
 8008500:	08008579 	.word	0x08008579
 8008504:	08008579 	.word	0x08008579
 8008508:	08008579 	.word	0x08008579
 800850c:	08008579 	.word	0x08008579
 8008510:	08008579 	.word	0x08008579
 8008514:	08008579 	.word	0x08008579
 8008518:	08008579 	.word	0x08008579
 800851c:	08008579 	.word	0x08008579
 8008520:	08008579 	.word	0x08008579
 8008524:	08008579 	.word	0x08008579
 8008528:	08008579 	.word	0x08008579
 800852c:	08008579 	.word	0x08008579
 8008530:	08008579 	.word	0x08008579
 8008534:	08008579 	.word	0x08008579
 8008538:	08008579 	.word	0x08008579
 800853c:	08008579 	.word	0x08008579
 8008540:	08008579 	.word	0x08008579
 8008544:	08008579 	.word	0x08008579
 8008548:	08008579 	.word	0x08008579
 800854c:	08008579 	.word	0x08008579
 8008550:	08008579 	.word	0x08008579
 8008554:	08008579 	.word	0x08008579
 8008558:	08008579 	.word	0x08008579
 800855c:	08008579 	.word	0x08008579
 8008560:	08008579 	.word	0x08008579
 8008564:	08008579 	.word	0x08008579
 8008568:	08008579 	.word	0x08008579
 800856c:	08008579 	.word	0x08008579
 8008570:	08008579 	.word	0x08008579
 8008574:	08008579 	.word	0x08008579
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008578:	bf00      	nop
  }

  return (USBD_OK);
 800857a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	bc80      	pop	{r7}
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop

08008588 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	4805      	ldr	r0, [pc, #20]	; (80085ac <CDC_Receive_FS+0x24>)
 8008596:	f7fe fe4a 	bl	800722e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800859a:	4804      	ldr	r0, [pc, #16]	; (80085ac <CDC_Receive_FS+0x24>)
 800859c:	f7fe fe5a 	bl	8007254 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	200003c8 	.word	0x200003c8

080085b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	6039      	str	r1, [r7, #0]
 80085ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2212      	movs	r2, #18
 80085c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085c2:	4b03      	ldr	r3, [pc, #12]	; (80085d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	20000148 	.word	0x20000148

080085d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2204      	movs	r2, #4
 80085e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085e6:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bc80      	pop	{r7}
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	2000015c 	.word	0x2000015c

080085f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d105      	bne.n	8008616 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4907      	ldr	r1, [pc, #28]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
 800860e:	4808      	ldr	r0, [pc, #32]	; (8008630 <USBD_FS_ProductStrDescriptor+0x38>)
 8008610:	f7ff fe33 	bl	800827a <USBD_GetString>
 8008614:	e004      	b.n	8008620 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	4904      	ldr	r1, [pc, #16]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
 800861a:	4805      	ldr	r0, [pc, #20]	; (8008630 <USBD_FS_ProductStrDescriptor+0x38>)
 800861c:	f7ff fe2d 	bl	800827a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008620:	4b02      	ldr	r3, [pc, #8]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	2000168c 	.word	0x2000168c
 8008630:	08009164 	.word	0x08009164

08008634 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	4904      	ldr	r1, [pc, #16]	; (8008654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008644:	4804      	ldr	r0, [pc, #16]	; (8008658 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008646:	f7ff fe18 	bl	800827a <USBD_GetString>
  return USBD_StrDesc;
 800864a:	4b02      	ldr	r3, [pc, #8]	; (8008654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	2000168c 	.word	0x2000168c
 8008658:	0800917c 	.word	0x0800917c

0800865c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	221a      	movs	r2, #26
 800866c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800866e:	f000 f843 	bl	80086f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008672:	4b02      	ldr	r3, [pc, #8]	; (800867c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	20000160 	.word	0x20000160

08008680 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d105      	bne.n	800869e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	4907      	ldr	r1, [pc, #28]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008696:	4808      	ldr	r0, [pc, #32]	; (80086b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008698:	f7ff fdef 	bl	800827a <USBD_GetString>
 800869c:	e004      	b.n	80086a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4904      	ldr	r1, [pc, #16]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086a2:	4805      	ldr	r0, [pc, #20]	; (80086b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086a4:	f7ff fde9 	bl	800827a <USBD_GetString>
  }
  return USBD_StrDesc;
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	2000168c 	.word	0x2000168c
 80086b8:	08009190 	.word	0x08009190

080086bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	6039      	str	r1, [r7, #0]
 80086c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d105      	bne.n	80086da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4907      	ldr	r1, [pc, #28]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086d2:	4808      	ldr	r0, [pc, #32]	; (80086f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086d4:	f7ff fdd1 	bl	800827a <USBD_GetString>
 80086d8:	e004      	b.n	80086e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	4904      	ldr	r1, [pc, #16]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086de:	4805      	ldr	r0, [pc, #20]	; (80086f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086e0:	f7ff fdcb 	bl	800827a <USBD_GetString>
  }
  return USBD_StrDesc;
 80086e4:	4b02      	ldr	r3, [pc, #8]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	2000168c 	.word	0x2000168c
 80086f4:	0800919c 	.word	0x0800919c

080086f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <Get_SerialNum+0x44>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008704:	4b0e      	ldr	r3, [pc, #56]	; (8008740 <Get_SerialNum+0x48>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <Get_SerialNum+0x4c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4413      	add	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d009      	beq.n	8008732 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800871e:	2208      	movs	r2, #8
 8008720:	4909      	ldr	r1, [pc, #36]	; (8008748 <Get_SerialNum+0x50>)
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f814 	bl	8008750 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008728:	2204      	movs	r2, #4
 800872a:	4908      	ldr	r1, [pc, #32]	; (800874c <Get_SerialNum+0x54>)
 800872c:	68b8      	ldr	r0, [r7, #8]
 800872e:	f000 f80f 	bl	8008750 <IntToUnicode>
  }
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	1fff7a10 	.word	0x1fff7a10
 8008740:	1fff7a14 	.word	0x1fff7a14
 8008744:	1fff7a18 	.word	0x1fff7a18
 8008748:	20000162 	.word	0x20000162
 800874c:	20000172 	.word	0x20000172

08008750 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008762:	2300      	movs	r3, #0
 8008764:	75fb      	strb	r3, [r7, #23]
 8008766:	e027      	b.n	80087b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	0f1b      	lsrs	r3, r3, #28
 800876c:	2b09      	cmp	r3, #9
 800876e:	d80b      	bhi.n	8008788 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	0f1b      	lsrs	r3, r3, #28
 8008774:	b2da      	uxtb	r2, r3
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	4619      	mov	r1, r3
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	440b      	add	r3, r1
 8008780:	3230      	adds	r2, #48	; 0x30
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	e00a      	b.n	800879e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	0f1b      	lsrs	r3, r3, #28
 800878c:	b2da      	uxtb	r2, r3
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	4619      	mov	r1, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	440b      	add	r3, r1
 8008798:	3237      	adds	r2, #55	; 0x37
 800879a:	b2d2      	uxtb	r2, r2
 800879c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	011b      	lsls	r3, r3, #4
 80087a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	3301      	adds	r3, #1
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	4413      	add	r3, r2
 80087ae:	2200      	movs	r2, #0
 80087b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	3301      	adds	r3, #1
 80087b6:	75fb      	strb	r3, [r7, #23]
 80087b8:	7dfa      	ldrb	r2, [r7, #23]
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d3d3      	bcc.n	8008768 <IntToUnicode+0x18>
  }
}
 80087c0:	bf00      	nop
 80087c2:	371c      	adds	r7, #28
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr
	...

080087cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08a      	sub	sp, #40	; 0x28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d4:	f107 0314 	add.w	r3, r7, #20
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	605a      	str	r2, [r3, #4]
 80087de:	609a      	str	r2, [r3, #8]
 80087e0:	60da      	str	r2, [r3, #12]
 80087e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087ec:	d13a      	bne.n	8008864 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ee:	2300      	movs	r3, #0
 80087f0:	613b      	str	r3, [r7, #16]
 80087f2:	4b1e      	ldr	r3, [pc, #120]	; (800886c <HAL_PCD_MspInit+0xa0>)
 80087f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f6:	4a1d      	ldr	r2, [pc, #116]	; (800886c <HAL_PCD_MspInit+0xa0>)
 80087f8:	f043 0301 	orr.w	r3, r3, #1
 80087fc:	6313      	str	r3, [r2, #48]	; 0x30
 80087fe:	4b1b      	ldr	r3, [pc, #108]	; (800886c <HAL_PCD_MspInit+0xa0>)
 8008800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	613b      	str	r3, [r7, #16]
 8008808:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800880a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800880e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008810:	2302      	movs	r3, #2
 8008812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008814:	2300      	movs	r3, #0
 8008816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008818:	2303      	movs	r3, #3
 800881a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800881c:	230a      	movs	r3, #10
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008820:	f107 0314 	add.w	r3, r7, #20
 8008824:	4619      	mov	r1, r3
 8008826:	4812      	ldr	r0, [pc, #72]	; (8008870 <HAL_PCD_MspInit+0xa4>)
 8008828:	f7fa f8ee 	bl	8002a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800882c:	4b0f      	ldr	r3, [pc, #60]	; (800886c <HAL_PCD_MspInit+0xa0>)
 800882e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008830:	4a0e      	ldr	r2, [pc, #56]	; (800886c <HAL_PCD_MspInit+0xa0>)
 8008832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008836:	6353      	str	r3, [r2, #52]	; 0x34
 8008838:	2300      	movs	r3, #0
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	4b0b      	ldr	r3, [pc, #44]	; (800886c <HAL_PCD_MspInit+0xa0>)
 800883e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008840:	4a0a      	ldr	r2, [pc, #40]	; (800886c <HAL_PCD_MspInit+0xa0>)
 8008842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008846:	6453      	str	r3, [r2, #68]	; 0x44
 8008848:	4b08      	ldr	r3, [pc, #32]	; (800886c <HAL_PCD_MspInit+0xa0>)
 800884a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008854:	2200      	movs	r2, #0
 8008856:	2100      	movs	r1, #0
 8008858:	2043      	movs	r0, #67	; 0x43
 800885a:	f7fa f885 	bl	8002968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800885e:	2043      	movs	r0, #67	; 0x43
 8008860:	f7fa f8ae 	bl	80029c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008864:	bf00      	nop
 8008866:	3728      	adds	r7, #40	; 0x28
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	40023800 	.word	0x40023800
 8008870:	40020000 	.word	0x40020000

08008874 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008888:	4619      	mov	r1, r3
 800888a:	4610      	mov	r0, r2
 800888c:	f7fe fd98 	bl	80073c0 <USBD_LL_SetupStage>
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	00db      	lsls	r3, r3, #3
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	440b      	add	r3, r1
 80088b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	4619      	mov	r1, r3
 80088c2:	f7fe fdc8 	bl	8007456 <USBD_LL_DataOutStage>
}
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 80088e0:	78fa      	ldrb	r2, [r7, #3]
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	4613      	mov	r3, r2
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	1a9b      	subs	r3, r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	3348      	adds	r3, #72	; 0x48
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	4619      	mov	r1, r3
 80088f6:	f7fe fe1f 	bl	8007538 <USBD_LL_DataInStage>
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe ff2f 	bl	8007774 <USBD_LL_SOF>
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008926:	2301      	movs	r3, #1
 8008928:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d102      	bne.n	8008938 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]
 8008936:	e008      	b.n	800894a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d102      	bne.n	8008946 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008940:	2301      	movs	r3, #1
 8008942:	73fb      	strb	r3, [r7, #15]
 8008944:	e001      	b.n	800894a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008946:	f7f8 feef 	bl	8001728 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008950:	7bfa      	ldrb	r2, [r7, #15]
 8008952:	4611      	mov	r1, r2
 8008954:	4618      	mov	r0, r3
 8008956:	f7fe fed5 	bl	8007704 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe fe8e 	bl	8007682 <USBD_LL_Reset>
}
 8008966:	bf00      	nop
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe fecf 	bl	8007722 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008996:	f043 0301 	orr.w	r3, r3, #1
 800899a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d005      	beq.n	80089b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089a4:	4b04      	ldr	r3, [pc, #16]	; (80089b8 <HAL_PCD_SuspendCallback+0x48>)
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	4a03      	ldr	r2, [pc, #12]	; (80089b8 <HAL_PCD_SuspendCallback+0x48>)
 80089aa:	f043 0306 	orr.w	r3, r3, #6
 80089ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	e000ed00 	.word	0xe000ed00

080089bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fe febd 	bl	800774a <USBD_LL_Resume>
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80089ea:	78fa      	ldrb	r2, [r7, #3]
 80089ec:	4611      	mov	r1, r2
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fee6 	bl	80077c0 <USBD_LL_IsoOUTIncomplete>
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	4611      	mov	r1, r2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe fec8 	bl	80077a8 <USBD_LL_IsoINIncomplete>
}
 8008a18:	bf00      	nop
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fed2 	bl	80077d8 <USBD_LL_DevConnected>
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fece 	bl	80077ec <USBD_LL_DevDisconnected>
}
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d139      	bne.n	8008adc <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a68:	4a1f      	ldr	r2, [pc, #124]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a1d      	ldr	r2, [pc, #116]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008a74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a78:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008a7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a80:	4b19      	ldr	r3, [pc, #100]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008a82:	2204      	movs	r2, #4
 8008a84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a86:	4b18      	ldr	r3, [pc, #96]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008a88:	2202      	movs	r2, #2
 8008a8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a8c:	4b16      	ldr	r3, [pc, #88]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a92:	4b15      	ldr	r3, [pc, #84]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008a94:	2202      	movs	r2, #2
 8008a96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a98:	4b13      	ldr	r3, [pc, #76]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a9e:	4b12      	ldr	r3, [pc, #72]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008aa4:	4b10      	ldr	r3, [pc, #64]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008aaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ab0:	480d      	ldr	r0, [pc, #52]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008ab2:	f7fa fb1f 	bl	80030f4 <HAL_PCD_Init>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8008abc:	f7f8 fe34 	bl	8001728 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ac0:	2180      	movs	r1, #128	; 0x80
 8008ac2:	4809      	ldr	r0, [pc, #36]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008ac4:	f7fb fc6e 	bl	80043a4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ac8:	2240      	movs	r2, #64	; 0x40
 8008aca:	2100      	movs	r1, #0
 8008acc:	4806      	ldr	r0, [pc, #24]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008ace:	f7fb fc23 	bl	8004318 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ad2:	2280      	movs	r2, #128	; 0x80
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	4804      	ldr	r0, [pc, #16]	; (8008ae8 <USBD_LL_Init+0x90>)
 8008ad8:	f7fb fc1e 	bl	8004318 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	2000188c 	.word	0x2000188c

08008aec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fa fc26 	bl	8003354 <HAL_PCD_Start>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f92e 	bl	8008d70 <USBD_Get_USB_Status>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	4608      	mov	r0, r1
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4603      	mov	r3, r0
 8008b32:	70fb      	strb	r3, [r7, #3]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70bb      	strb	r3, [r7, #2]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b4a:	78bb      	ldrb	r3, [r7, #2]
 8008b4c:	883a      	ldrh	r2, [r7, #0]
 8008b4e:	78f9      	ldrb	r1, [r7, #3]
 8008b50:	f7fa ffeb 	bl	8003b2a <HAL_PCD_EP_Open>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f908 	bl	8008d70 <USBD_Get_USB_Status>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	460b      	mov	r3, r1
 8008b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fb f834 	bl	8003bfa <HAL_PCD_EP_Close>
 8008b92:	4603      	mov	r3, r0
 8008b94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 f8e9 	bl	8008d70 <USBD_Get_USB_Status>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bc6:	78fa      	ldrb	r2, [r7, #3]
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fb f90b 	bl	8003de6 <HAL_PCD_EP_SetStall>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 f8ca 	bl	8008d70 <USBD_Get_USB_Status>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c04:	78fa      	ldrb	r2, [r7, #3]
 8008c06:	4611      	mov	r1, r2
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fb f950 	bl	8003eae <HAL_PCD_EP_ClrStall>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 f8ab 	bl	8008d70 <USBD_Get_USB_Status>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	da0b      	bge.n	8008c5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c4a:	68f9      	ldr	r1, [r7, #12]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	333e      	adds	r3, #62	; 0x3e
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	e00b      	b.n	8008c74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	4613      	mov	r3, r2
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	1a9b      	subs	r3, r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bc80      	pop	{r7}
 8008c7c:	4770      	bx	lr

08008c7e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c98:	78fa      	ldrb	r2, [r7, #3]
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fa ff1f 	bl	8003ae0 <HAL_PCD_SetAddress>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 f861 	bl	8008d70 <USBD_Get_USB_Status>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	607a      	str	r2, [r7, #4]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	460b      	mov	r3, r1
 8008cca:	72fb      	strb	r3, [r7, #11]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cde:	893b      	ldrh	r3, [r7, #8]
 8008ce0:	7af9      	ldrb	r1, [r7, #11]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	f7fb f835 	bl	8003d52 <HAL_PCD_EP_Transmit>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 f83e 	bl	8008d70 <USBD_Get_USB_Status>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cf8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	460b      	mov	r3, r1
 8008d10:	72fb      	strb	r3, [r7, #11]
 8008d12:	4613      	mov	r3, r2
 8008d14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d24:	893b      	ldrh	r3, [r7, #8]
 8008d26:	7af9      	ldrb	r1, [r7, #11]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	f7fa ffb0 	bl	8003c8e <HAL_PCD_EP_Receive>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 f81b 	bl	8008d70 <USBD_Get_USB_Status>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fa ffe0 	bl	8003d24 <HAL_PCD_EP_GetRxCount>
 8008d64:	4603      	mov	r3, r0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d817      	bhi.n	8008db4 <USBD_Get_USB_Status+0x44>
 8008d84:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <USBD_Get_USB_Status+0x1c>)
 8008d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8a:	bf00      	nop
 8008d8c:	08008d9d 	.word	0x08008d9d
 8008d90:	08008da3 	.word	0x08008da3
 8008d94:	08008da9 	.word	0x08008da9
 8008d98:	08008daf 	.word	0x08008daf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008da0:	e00b      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008da2:	2302      	movs	r3, #2
 8008da4:	73fb      	strb	r3, [r7, #15]
    break;
 8008da6:	e008      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008da8:	2301      	movs	r3, #1
 8008daa:	73fb      	strb	r3, [r7, #15]
    break;
 8008dac:	e005      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dae:	2302      	movs	r3, #2
 8008db0:	73fb      	strb	r3, [r7, #15]
    break;
 8008db2:	e002      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008db4:	2302      	movs	r3, #2
 8008db6:	73fb      	strb	r3, [r7, #15]
    break;
 8008db8:	bf00      	nop
  }
  return usb_status;
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bc80      	pop	{r7}
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop

08008dc8 <__errno>:
 8008dc8:	4b01      	ldr	r3, [pc, #4]	; (8008dd0 <__errno+0x8>)
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	2000017c 	.word	0x2000017c

08008dd4 <__libc_init_array>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	2500      	movs	r5, #0
 8008dd8:	4e0c      	ldr	r6, [pc, #48]	; (8008e0c <__libc_init_array+0x38>)
 8008dda:	4c0d      	ldr	r4, [pc, #52]	; (8008e10 <__libc_init_array+0x3c>)
 8008ddc:	1ba4      	subs	r4, r4, r6
 8008dde:	10a4      	asrs	r4, r4, #2
 8008de0:	42a5      	cmp	r5, r4
 8008de2:	d109      	bne.n	8008df8 <__libc_init_array+0x24>
 8008de4:	f000 f8ea 	bl	8008fbc <_init>
 8008de8:	2500      	movs	r5, #0
 8008dea:	4e0a      	ldr	r6, [pc, #40]	; (8008e14 <__libc_init_array+0x40>)
 8008dec:	4c0a      	ldr	r4, [pc, #40]	; (8008e18 <__libc_init_array+0x44>)
 8008dee:	1ba4      	subs	r4, r4, r6
 8008df0:	10a4      	asrs	r4, r4, #2
 8008df2:	42a5      	cmp	r5, r4
 8008df4:	d105      	bne.n	8008e02 <__libc_init_array+0x2e>
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008dfc:	4798      	blx	r3
 8008dfe:	3501      	adds	r5, #1
 8008e00:	e7ee      	b.n	8008de0 <__libc_init_array+0xc>
 8008e02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e06:	4798      	blx	r3
 8008e08:	3501      	adds	r5, #1
 8008e0a:	e7f2      	b.n	8008df2 <__libc_init_array+0x1e>
 8008e0c:	080091dc 	.word	0x080091dc
 8008e10:	080091dc 	.word	0x080091dc
 8008e14:	080091dc 	.word	0x080091dc
 8008e18:	080091e0 	.word	0x080091e0

08008e1c <malloc>:
 8008e1c:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <malloc+0xc>)
 8008e1e:	4601      	mov	r1, r0
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	f000 b85f 	b.w	8008ee4 <_malloc_r>
 8008e26:	bf00      	nop
 8008e28:	2000017c 	.word	0x2000017c

08008e2c <free>:
 8008e2c:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <free+0xc>)
 8008e2e:	4601      	mov	r1, r0
 8008e30:	6818      	ldr	r0, [r3, #0]
 8008e32:	f000 b80b 	b.w	8008e4c <_free_r>
 8008e36:	bf00      	nop
 8008e38:	2000017c 	.word	0x2000017c

08008e3c <memset>:
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	4402      	add	r2, r0
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d100      	bne.n	8008e46 <memset+0xa>
 8008e44:	4770      	bx	lr
 8008e46:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4a:	e7f9      	b.n	8008e40 <memset+0x4>

08008e4c <_free_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4605      	mov	r5, r0
 8008e50:	2900      	cmp	r1, #0
 8008e52:	d043      	beq.n	8008edc <_free_r+0x90>
 8008e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e58:	1f0c      	subs	r4, r1, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	bfb8      	it	lt
 8008e5e:	18e4      	addlt	r4, r4, r3
 8008e60:	f000 f8aa 	bl	8008fb8 <__malloc_lock>
 8008e64:	4a1e      	ldr	r2, [pc, #120]	; (8008ee0 <_free_r+0x94>)
 8008e66:	6813      	ldr	r3, [r2, #0]
 8008e68:	4610      	mov	r0, r2
 8008e6a:	b933      	cbnz	r3, 8008e7a <_free_r+0x2e>
 8008e6c:	6063      	str	r3, [r4, #4]
 8008e6e:	6014      	str	r4, [r2, #0]
 8008e70:	4628      	mov	r0, r5
 8008e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e76:	f000 b8a0 	b.w	8008fba <__malloc_unlock>
 8008e7a:	42a3      	cmp	r3, r4
 8008e7c:	d90b      	bls.n	8008e96 <_free_r+0x4a>
 8008e7e:	6821      	ldr	r1, [r4, #0]
 8008e80:	1862      	adds	r2, r4, r1
 8008e82:	4293      	cmp	r3, r2
 8008e84:	bf01      	itttt	eq
 8008e86:	681a      	ldreq	r2, [r3, #0]
 8008e88:	685b      	ldreq	r3, [r3, #4]
 8008e8a:	1852      	addeq	r2, r2, r1
 8008e8c:	6022      	streq	r2, [r4, #0]
 8008e8e:	6063      	str	r3, [r4, #4]
 8008e90:	6004      	str	r4, [r0, #0]
 8008e92:	e7ed      	b.n	8008e70 <_free_r+0x24>
 8008e94:	4613      	mov	r3, r2
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	b10a      	cbz	r2, 8008e9e <_free_r+0x52>
 8008e9a:	42a2      	cmp	r2, r4
 8008e9c:	d9fa      	bls.n	8008e94 <_free_r+0x48>
 8008e9e:	6819      	ldr	r1, [r3, #0]
 8008ea0:	1858      	adds	r0, r3, r1
 8008ea2:	42a0      	cmp	r0, r4
 8008ea4:	d10b      	bne.n	8008ebe <_free_r+0x72>
 8008ea6:	6820      	ldr	r0, [r4, #0]
 8008ea8:	4401      	add	r1, r0
 8008eaa:	1858      	adds	r0, r3, r1
 8008eac:	4282      	cmp	r2, r0
 8008eae:	6019      	str	r1, [r3, #0]
 8008eb0:	d1de      	bne.n	8008e70 <_free_r+0x24>
 8008eb2:	6810      	ldr	r0, [r2, #0]
 8008eb4:	6852      	ldr	r2, [r2, #4]
 8008eb6:	4401      	add	r1, r0
 8008eb8:	6019      	str	r1, [r3, #0]
 8008eba:	605a      	str	r2, [r3, #4]
 8008ebc:	e7d8      	b.n	8008e70 <_free_r+0x24>
 8008ebe:	d902      	bls.n	8008ec6 <_free_r+0x7a>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	e7d4      	b.n	8008e70 <_free_r+0x24>
 8008ec6:	6820      	ldr	r0, [r4, #0]
 8008ec8:	1821      	adds	r1, r4, r0
 8008eca:	428a      	cmp	r2, r1
 8008ecc:	bf01      	itttt	eq
 8008ece:	6811      	ldreq	r1, [r2, #0]
 8008ed0:	6852      	ldreq	r2, [r2, #4]
 8008ed2:	1809      	addeq	r1, r1, r0
 8008ed4:	6021      	streq	r1, [r4, #0]
 8008ed6:	6062      	str	r2, [r4, #4]
 8008ed8:	605c      	str	r4, [r3, #4]
 8008eda:	e7c9      	b.n	8008e70 <_free_r+0x24>
 8008edc:	bd38      	pop	{r3, r4, r5, pc}
 8008ede:	bf00      	nop
 8008ee0:	200002e4 	.word	0x200002e4

08008ee4 <_malloc_r>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	1ccd      	adds	r5, r1, #3
 8008ee8:	f025 0503 	bic.w	r5, r5, #3
 8008eec:	3508      	adds	r5, #8
 8008eee:	2d0c      	cmp	r5, #12
 8008ef0:	bf38      	it	cc
 8008ef2:	250c      	movcc	r5, #12
 8008ef4:	2d00      	cmp	r5, #0
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	db01      	blt.n	8008efe <_malloc_r+0x1a>
 8008efa:	42a9      	cmp	r1, r5
 8008efc:	d903      	bls.n	8008f06 <_malloc_r+0x22>
 8008efe:	230c      	movs	r3, #12
 8008f00:	6033      	str	r3, [r6, #0]
 8008f02:	2000      	movs	r0, #0
 8008f04:	bd70      	pop	{r4, r5, r6, pc}
 8008f06:	f000 f857 	bl	8008fb8 <__malloc_lock>
 8008f0a:	4a21      	ldr	r2, [pc, #132]	; (8008f90 <_malloc_r+0xac>)
 8008f0c:	6814      	ldr	r4, [r2, #0]
 8008f0e:	4621      	mov	r1, r4
 8008f10:	b991      	cbnz	r1, 8008f38 <_malloc_r+0x54>
 8008f12:	4c20      	ldr	r4, [pc, #128]	; (8008f94 <_malloc_r+0xb0>)
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	b91b      	cbnz	r3, 8008f20 <_malloc_r+0x3c>
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f000 f83d 	bl	8008f98 <_sbrk_r>
 8008f1e:	6020      	str	r0, [r4, #0]
 8008f20:	4629      	mov	r1, r5
 8008f22:	4630      	mov	r0, r6
 8008f24:	f000 f838 	bl	8008f98 <_sbrk_r>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d124      	bne.n	8008f76 <_malloc_r+0x92>
 8008f2c:	230c      	movs	r3, #12
 8008f2e:	4630      	mov	r0, r6
 8008f30:	6033      	str	r3, [r6, #0]
 8008f32:	f000 f842 	bl	8008fba <__malloc_unlock>
 8008f36:	e7e4      	b.n	8008f02 <_malloc_r+0x1e>
 8008f38:	680b      	ldr	r3, [r1, #0]
 8008f3a:	1b5b      	subs	r3, r3, r5
 8008f3c:	d418      	bmi.n	8008f70 <_malloc_r+0x8c>
 8008f3e:	2b0b      	cmp	r3, #11
 8008f40:	d90f      	bls.n	8008f62 <_malloc_r+0x7e>
 8008f42:	600b      	str	r3, [r1, #0]
 8008f44:	18cc      	adds	r4, r1, r3
 8008f46:	50cd      	str	r5, [r1, r3]
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f000 f836 	bl	8008fba <__malloc_unlock>
 8008f4e:	f104 000b 	add.w	r0, r4, #11
 8008f52:	1d23      	adds	r3, r4, #4
 8008f54:	f020 0007 	bic.w	r0, r0, #7
 8008f58:	1ac3      	subs	r3, r0, r3
 8008f5a:	d0d3      	beq.n	8008f04 <_malloc_r+0x20>
 8008f5c:	425a      	negs	r2, r3
 8008f5e:	50e2      	str	r2, [r4, r3]
 8008f60:	e7d0      	b.n	8008f04 <_malloc_r+0x20>
 8008f62:	684b      	ldr	r3, [r1, #4]
 8008f64:	428c      	cmp	r4, r1
 8008f66:	bf16      	itet	ne
 8008f68:	6063      	strne	r3, [r4, #4]
 8008f6a:	6013      	streq	r3, [r2, #0]
 8008f6c:	460c      	movne	r4, r1
 8008f6e:	e7eb      	b.n	8008f48 <_malloc_r+0x64>
 8008f70:	460c      	mov	r4, r1
 8008f72:	6849      	ldr	r1, [r1, #4]
 8008f74:	e7cc      	b.n	8008f10 <_malloc_r+0x2c>
 8008f76:	1cc4      	adds	r4, r0, #3
 8008f78:	f024 0403 	bic.w	r4, r4, #3
 8008f7c:	42a0      	cmp	r0, r4
 8008f7e:	d005      	beq.n	8008f8c <_malloc_r+0xa8>
 8008f80:	1a21      	subs	r1, r4, r0
 8008f82:	4630      	mov	r0, r6
 8008f84:	f000 f808 	bl	8008f98 <_sbrk_r>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	d0cf      	beq.n	8008f2c <_malloc_r+0x48>
 8008f8c:	6025      	str	r5, [r4, #0]
 8008f8e:	e7db      	b.n	8008f48 <_malloc_r+0x64>
 8008f90:	200002e4 	.word	0x200002e4
 8008f94:	200002e8 	.word	0x200002e8

08008f98 <_sbrk_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	4c05      	ldr	r4, [pc, #20]	; (8008fb4 <_sbrk_r+0x1c>)
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	4608      	mov	r0, r1
 8008fa2:	6023      	str	r3, [r4, #0]
 8008fa4:	f7f8 fd2a 	bl	80019fc <_sbrk>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_sbrk_r+0x1a>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_sbrk_r+0x1a>
 8008fb0:	602b      	str	r3, [r5, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	20001c8c 	.word	0x20001c8c

08008fb8 <__malloc_lock>:
 8008fb8:	4770      	bx	lr

08008fba <__malloc_unlock>:
 8008fba:	4770      	bx	lr

08008fbc <_init>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	bf00      	nop
 8008fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc2:	bc08      	pop	{r3}
 8008fc4:	469e      	mov	lr, r3
 8008fc6:	4770      	bx	lr

08008fc8 <_fini>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	bf00      	nop
 8008fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fce:	bc08      	pop	{r3}
 8008fd0:	469e      	mov	lr, r3
 8008fd2:	4770      	bx	lr
